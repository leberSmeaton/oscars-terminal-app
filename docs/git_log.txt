commit 8249ee42166ac2a7f630fb53d5163527c3baafef
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Thu May 27 16:37:47 2021 +1000

    attempting to do rspec, getting many method errors

diff --git a/README.md b/README.md
index 0accd6c..25e5714 100644
--- a/README.md
+++ b/README.md
@@ -227,8 +227,13 @@ Initial testing for RSPEC worked on the early versions of Oscars Judge Terminal
 
 ### Error Handling
 
-Words
-![]()
+Feature Lists is not operating or available as it should be and so I've included error handling to show two different outcomes. Both @watchlist instance variable and @favourite instance variables are arrays that aren't holding any information. They are both NOT taking information and so this feature of displaying lists is unavailable.
+
+I've included two error options to show differences in them not holding information, and so they don't crash the program.
+
+- **Watch List** you can see `validate_watchlist @watchlist = @list` is going to produce an array of movies, but it is of the user list movies, not actually the @watchlist movies themselves.
+- **Favourite List** you can see `validate_favourite @favourite`. @favourite is not holding any movies as it is currently broken and NOT taking anything and so the StandardError is called but not printed as Rescue comes in.
+  ![Error Handling for Watch List and Favourite List](../docs/preview_screenshots/errorhandling.png)
 
 ### Manual Testing
 
diff --git a/list.rb b/list.rb
index 877ffe9..a0ece8c 100644
--- a/list.rb
+++ b/list.rb
@@ -218,7 +218,6 @@ class List
         puts
         def validate_favourite(favourite) 
             spinner = TTY::Spinner.new(":spinner")
-            puts
             puts favourite
             spinner.auto_spin
             sleep (3)
@@ -232,10 +231,8 @@ class List
         #     validate_watchlist(watchlist) = false
             sleep (2)
         end
-        validate_favourite @favourite = []
-        # validate_favourite @favourite = @list
-        # This displays only the user list, not the array created unfortunately, but it works
-        puts
+        validate_favourite @favourite
+        # validate_favourite @favourite = []
         puts
     end
 
diff --git a/spec/list_spec.rb b/spec/list_spec.rb
index d3910f9..dc330ec 100644
--- a/spec/list_spec.rb
+++ b/spec/list_spec.rb
@@ -1,6 +1,5 @@
-require 'rspec/autorun'
+# require 'rspec/autorun' depreciated
 require_relative '../list.rb'
-require_relative '../index.rb'
 
 
 describe List do
@@ -9,21 +8,16 @@ describe List do
 
     #before everything create a new instance
         before do 
-            @mainmenu = List.new(name)
+            @mainmenu = List.new("username")
         end
     
         it 'should create a new file' do
             @mainmenu.userlist
-            expect(File.exist?('./lists/#{name}.txt')).to be true
+            expect(File.exist?('./lists/Bella.txt')).to be true
         end
 
         it 'should be empty' do
-            expect(File.size('./lists/#{name}.txt')).to eq(0)
-        end
-            
-        # after use, delete
-        after(:context) do # to delete the file url
-            File.delete('./lists/#{name}.txt')
+            expect(File.size('./lists/Bella.txt')).to eq(0)
         end
     end
 end
\ No newline at end of file
diff --git a/spec/movie_item_spec.rb b/spec/movie_item_spec.rb
index ff6aa34..bde63f3 100644
--- a/spec/movie_item_spec.rb
+++ b/spec/movie_item_spec.rb
@@ -1,12 +1,12 @@
-require 'rspec/autorun'
+# require 'rspec/autorun' depreciated
 require_relative "../movie_item"
 
 describe MovieItem do 
     it 'should display the movie item' do
         name = "Sound of Metal" 
         #needs to be pulled from awards array
-        movie_item = MovieItem.new(name)
-        expect(movie_item.name).to eq(name)
+        movie_item = MovieItem.new("name")
+        expect(movie_item.name).to eq("name")
     end
 
     it 'should create a new file' do

commit d5616b819a4d98c82edd18a4a4898efd3cda8e0c
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Thu May 27 16:10:20 2021 +1000

    raised error handling in watch and fave in list.rb

diff --git a/list.rb b/list.rb
index d51c43a..877ffe9 100644
--- a/list.rb
+++ b/list.rb
@@ -190,7 +190,6 @@ class List
     system 'clear'
         puts "#{@name}'s To Watch List"
 
-        # validate_watchlist(watchlist) = true
         def validate_watchlist(watchlist) 
             spinner = TTY::Spinner.new(":spinner")
             puts
@@ -207,20 +206,35 @@ class List
         #     validate_watchlist(watchlist) = false
             sleep (2)
         end
-        validate_watchlist @watchlist = []
+        # validate_watchlist @watchlist = []
+        validate_watchlist @watchlist = @list
+        # This displays only the user list, not the array created unfortunately, but it works
         puts
     end
 
     def fave
     system 'clear'
-        puts "#{@name}'s To Watch List"
+        puts "#{@name}'s Favourite List"
         puts
-        if @favourite == false
-            puts "You don't have any items to list"
-        else
-            puts @favourite
+        def validate_favourite(favourite) 
+            spinner = TTY::Spinner.new(":spinner")
+            puts
+            puts favourite
+            spinner.auto_spin
+            sleep (3)
+            spinner.stop
+            raise StandardError, "Array cannot be empty." if favourite.empty?
+        rescue
+            spinner.auto_spin
+            sleep (2)
+            spinner.stop
+            puts "You must submit movies first before you view your Favourite List"
+        #     validate_watchlist(watchlist) = false
+            sleep (2)
         end
-        sleep(3)
+        validate_favourite @favourite = []
+        # validate_favourite @favourite = @list
+        # This displays only the user list, not the array created unfortunately, but it works
         puts
         puts
     end

commit 098de0a8e9def80759f91290f36f6036be985b09
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Thu May 27 15:44:58 2021 +1000

    added coniditoinal on exit for randomise selection

diff --git a/index.rb b/index.rb
index 262e0b5..c00791f 100755
--- a/index.rb
+++ b/index.rb
@@ -176,8 +176,16 @@ loop do
         puts
         puts "Enjoy the movie!"
         sleep(3)
-        exitapp
-        exit
+        puts "Would you like to exit the app? 'yes' or 'no' "
+        answer = gets.chomp.downcase
+        if answer == 'yes'
+            puts
+            puts
+            exitapp
+            exit
+        else
+            sleep(1)
+        end
     when 8
         mainmenu.helpinfo
     when 9

commit 2ac7378f288d1fa2cb332b78bf6444822d2dacc4
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Thu May 27 13:33:08 2021 +1000

    actually did it! I set a conditional in List.delete that tells the user their list is empty if there are no movies. Going to merge branches next.

diff --git a/list.rb b/list.rb
index 10a6b02..d51c43a 100644
--- a/list.rb
+++ b/list.rb
@@ -71,77 +71,69 @@ class List
         sleep(2)
         puts
 
-        add_open = true
-        while add_open
-            puts "Select your next option:".colorize(:light_blue)
-            puts "1: > Back to MAIN MENU"
-            puts "2: > Exit App"
-            choice = gets.chomp.to_i
-            if choice == 1
-                add_open = false
-            else choice == 2
-                puts
-                exitapp
-                exit
-                #exits app
-            end
-        end
+        # add_open = true
+        # while add_open
+        #     puts "Select your next option:".colorize(:light_blue)
+        #     puts "1: > Back to MAIN MENU"
+        #     puts "2: > Exit App"
+        #     choice = gets.chomp.to_i
+        #     if choice == 1
+        #         add_open = false
+        #     else choice == 2
+        #         puts
+        #         exitapp
+        #         exit
+        #         #exits app
+        #     end
+        # end
         # sleep(1)
         puts
     end
 
     def remove
     system 'clear'
+        puts "***".colorize(:yellow)
         puts "Remove a movie from the list".colorize(:blue)
         @list = file_to_array(@file_path)
         # view
         puts
 
-        File.open(@file_path, 'r') do |file|
-            file.each_line do |line|
-                puts "#{file.lineno}. #{line}"
+        if file_empty?
+            spinner = TTY::Spinner.new(":spinner")
+            spinner.auto_spin
+            sleep (3)
+            spinner.stop
+            puts "Your list is empty.".colorize(:red)
+            puts
+        else 
+            File.open(@file_path, 'r') do |file|
+                file.each_line do |line|
+                    puts "#{file.lineno}. #{line}"
+                end
+                # working with files we can call each line of file through each_line
             end
-            # working with files we can call each line of file through each_line
-        end
-        puts
-
-        puts "Enter the movie number: ".colorize(:blue)
-        print "> "
-        movie_no = gets.to_i - 1
-        # the file starts at 1 but array starts at 0 does so need to -1 to start.
-        @list.delete_at movie_no 
+            puts
 
-        puts
-        puts "Success! Deleted".colorize(:blue)
-        array_to_file(@list)
-        puts
-        
-        File.open(@file_path, 'r') do |file|
-            file.each_line do |line|
-                puts "#{file.lineno}. #{line}"
-            end
-            # working with files we can call each line of file through each_line
-        end
-        sleep(2)
-        puts
+            puts "Enter the movie number: ".colorize(:blue)
+            print "> "
+            movie_no = gets.to_i - 1
+            # the file starts at 1 but array starts at 0 does so need to -1 to start.
+            @list.delete_at movie_no 
 
-        remove_open = true
-        while remove_open
-            puts "Select your next option:".colorize(:light_blue)
-            puts "1: > Back to MAIN MENU"
-            puts "2: > Exit App"
-            choice = gets.chomp.to_i
-            if choice == 1
-                remove_open = false
-            else choice == 2
-                puts
-                exitapp
-                exit
-                #exits app
+            puts
+            puts "Success! Deleted".colorize(:blue)
+            array_to_file(@list)
+            puts
+            
+            File.open(@file_path, 'r') do |file|
+                file.each_line do |line|
+                    puts "#{file.lineno}. #{line}"
+                end
+                # working with files we can call each line of file through each_line
             end
-        end
-        
-        puts
+            sleep(2)
+            puts
+        end # if exist        
     end
 
     def viewbestpicture

commit 7463dd12228edf8e5528fb069063e7c7e3e41ae5
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Thu May 27 13:04:23 2021 +1000

    attempted new branch to implement conditional, didn't work so deleted branch and starting again. Updated Readme.

diff --git a/README.md b/README.md
index 92c7195..0accd6c 100644
--- a/README.md
+++ b/README.md
@@ -79,7 +79,7 @@ You've made it to the GitHub repo! Choose to download the ZIP folder or clone th
 
 # Oscars Judge Terminal App
 
-[Welcome Message of Oscars Judge App]()<br/>
+![Welcome Message of Oscars Judge App](../docs/preview_screenshots/heading.png)<br/>
 [Git Hub Source Respository](https://github.com/leberSmeaton/portfolioT1A3)
 
 ## Statement of Purpose
@@ -115,16 +115,7 @@ The Oscars Judge app creation idea came from loving to watch movies, but spendin
 - Other flags include -instructions and -info for the app.
 
 ![info, instruction and help flags](../docs/preview_screenshots/flags.png)
-
-<br/>**Interacting with the app features**
-
-- On start after the app welcome page, the **User Profile Creation** feature allows the user to either select their previously saved profile or create a new user profile. Users initially create their profile by selecting 'New User' which prompts name input. To save the user just has to exit via prompt and **Saving Sessions** feature will execute. On return to the app a user who's created a profile will see their name as an option to continue with their saved profile that has stored all information from the **Creating New Lists** feature. Error handling for **User Profile Creation** is set for name input, ensuring only english a-z characters are used, no symbols or numbers. Control flow will stop on invalid user name, displaying a prompt to enter a new name and the reason why.
-- The user can interact with 'To Watch List' and 'Favourite List' objects in the **Creating New Lists** feature that allows them to keep record and interact with the app. Whilst browsing movies in their chosen films category they have the option to 'Save to Watch List'/'Save to Favourite List'. The user doesn't get taken from the movie interface they've selected, rather on selection the movie is pushed into the array list of their choice. If the movie is already in either list error handling will display 'movie not added. Movie already in list'. When they want to view either list, it is available to select through the main menu. If the lists are empty, error handling will display 'You don't have any items to list.'
-- When the user can't decide on a movie to watch **Randomise Movies** feature can be selected to output a random movie. On execute the feature will loop through all movies Control flow, If option is random - output movie. This is also a feature exit of the program that will take the user to a direct link to watch the movie.
-  The session will end and **Saving Session** feature will execute. Error handling to display 'You've seen this film' is not yet set up on **Randomise Movies** feature yet.
-- The user must move through the app after creating their profile to get to the final feature. On exit of the app, the user does not have to take any additional steps for the **Saving Sessions** to execute as it is a built in save automation. The control flow asks, If exit - then save to file.
-  Error handling is not yet set up for **Saving Sessions**. If something goes wrong on exit or the save does not occur a message will display 'save error - goodbye'.
-  <br />
+<br />
 
 ![Instructions](../docs/preview_screenshots/instructions.png)
 
@@ -189,21 +180,20 @@ Saving session is setup initially by User Profile Creation feature. It allows us
 
 # Software Development Plan
 
-### App-flow
-
-![AppFlow](../docs/preview_screenshots/appflow.png)
+- ### App-flow
 
-### Data-flow
+  ![AppFlow](../docs/preview_screenshots/appflow.png)
 
-![Data Flow](../docs/preview_screenshots/dataflow.png)
+- ### Data-flow
 
-### Interface-flow
+  ![Data Flow](../docs/preview_screenshots/dataflow.png)
 
-![Interface Flow](../docs/preview_screenshots/interfaceflow.png)
+- ### Interface-flow
 
-### User Direction-flow
+  ![Interface Flow](../docs/preview_screenshots/interfaceflow.png)
 
-![User Direction options](../docs/preview_screenshots/userdirection.png)
+- ### User Direction Stories
+  ![User Direction options](../docs/preview_screenshots/userdirection.png)
 
 ## Implementation Plan
 
diff --git a/lists/Bella.txt b/lists/Bella.txt
index 06f794a..74b74f8 100644
--- a/lists/Bella.txt
+++ b/lists/Bella.txt
@@ -4,7 +4,6 @@ Minari
 Minority Report
 Perfect Blue
 Drive
-Between the Pines
 Anaconda
 Drive
 Walkabout
diff --git a/lists/Thunder.txt b/lists/Thunder.txt
deleted file mode 100644
index d8e8f11..0000000
--- a/lists/Thunder.txt
+++ /dev/null
@@ -1 +0,0 @@
-Spaceballs

commit 5fba92a10e7e0468c1d58b5bb3bea5e9fe719918
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Thu May 27 11:56:35 2021 +1000

    added flowcharts to readme file. finished impplementation of help me section in program

diff --git a/README.md b/README.md
index eb179de..92c7195 100644
--- a/README.md
+++ b/README.md
@@ -191,19 +191,19 @@ Saving session is setup initially by User Profile Creation feature. It allows us
 
 ### App-flow
 
-![]()
+![AppFlow](../docs/preview_screenshots/appflow.png)
 
 ### Data-flow
 
-![]()
+![Data Flow](../docs/preview_screenshots/dataflow.png)
 
 ### Interface-flow
 
-![]()
+![Interface Flow](../docs/preview_screenshots/interfaceflow.png)
 
 ### User Direction-flow
 
-![]()
+![User Direction options](../docs/preview_screenshots/userdirection.png)
 
 ## Implementation Plan
 
diff --git a/help.rb b/help.rb
index cb43ba3..8ca30b0 100644
--- a/help.rb
+++ b/help.rb
@@ -35,8 +35,71 @@ class HelpItem
     end
 
     def infoitem
+        font = TTY::Font.new(:doom) # implementing font gem
+        pastel = Pastel.new # implementing pastel gem
+        puts "*** * *** ** *** * *** ** *** * ***".colorize(:yellow)
+        puts
+        puts pastel.green(font.write("INFO+"))
+        puts
+        puts "> This program has executeable flags"
+        puts " -help ".colorize(:black).on_red.underline
+        puts " -info ".colorize(:black).on_green.underline
+        puts " -instructions ".colorize(:black).on_yellow.underline
+        puts
+        puts "> This terminal app is created by Bella Leber Smeaton"
+        puts TTY::Link.link_to("> Find the GitHub Repo here", "https://github.com/leberSmeaton/portfolioT1A3".colorize(:yellow))
+        puts
+        puts "See further documentation in README.md"
+        puts "***\n * \n***".colorize(:yellow)
+        sleep(3)
+        puts "Please choose an option.".colorize(:blue)
+        infoitem_open = true
+        while infoitem_open
+            puts "1: > Back to Help Menu"
+            puts "2: > Exit App"
+            choice = gets.chomp.to_i
+            if choice == 1
+                #Back to Help Menu
+                infoitem_open = false
+            elsif choice == 2
+                puts
+                exitapp
+                exit
+                #exits app
+            end
+            puts "***\n * \n***".colorize(:yellow)
+        end
     end
 
     def instructionsitem
+        font = TTY::Font.new(:doom) # implementing font gem
+        pastel = Pastel.new # implementing pastel gem
+        puts "*** * *** ** *** * *** ** *** * ***".colorize(:yellow)
+        puts pastel.yellow(font.write("INSTRUCTIONS+"))
+        puts "> Input your name to create a profile."
+        puts "> Update your own personalised movie list."
+        puts "> Check out award winning movies and nominees from the Academy Awards."
+        puts "> Create to watch lists and favourite lists."
+        puts "> Become an Oscars Judge".colorize(:yellow)
+        puts
+        puts "***\n * \n***".colorize(:yellow)
+        sleep(3)
+        puts "Please choose an option.".colorize(:blue)
+        instructions_open = true
+        while instructions_open
+            puts "1: > Back to Help Menu"
+            puts "2: > Exit App"
+            choice = gets.chomp.to_i
+            if choice == 1
+                #Back to Help Menu
+                instructions_open = false
+            elsif choice == 2
+                puts
+                exitapp
+                exit
+                #exits app
+            end
+            puts "***\n * \n***".colorize(:yellow)
+        end
     end
 end
\ No newline at end of file

commit 55cd6eaa64dae0d1f289c8e087ab1cc3eba5bf96
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Thu May 27 08:59:58 2021 +1000

    adding help dir to menu. created and linking class methods to menu.

diff --git a/help.rb b/help.rb
new file mode 100644
index 0000000..cb43ba3
--- /dev/null
+++ b/help.rb
@@ -0,0 +1,42 @@
+class HelpItem
+
+    def helpitem
+        font = TTY::Font.new(:doom) # implementing font gem
+        pastel = Pastel.new # implementing pastel gem
+        puts "*** * *** ** *** * *** ** *** * ***".colorize(:yellow)
+        puts
+        puts pastel.red(font.write("HELP+"))
+        puts
+        puts "> This program is using Ruby version: #{RUBY_VERSION}"
+        puts
+        puts "> Gems required for bundle install..."
+        puts ">> 'colorize', '~> 0.8.1' " + "|".colorize(:yellow) + " 'tty-link', '~> 0.1.1' " + "|".colorize(:yellow) + " 'tty-font', '~> 0.5.0' " + "|".colorize(:yellow) + " 'pastel', '~> 0.7.1' " + "|".colorize(:yellow) + " 'tty-spinner', '~> 0.9.3' "
+        puts
+        puts "See further documentation in README.md"
+        puts "***\n * \n***".colorize(:yellow)
+        sleep(3)
+        puts "Please choose an option.".colorize(:blue)
+        helpitem_open = true
+        while helpitem_open
+            puts "1: > Back to Help Menu"
+            puts "2: > Exit App"
+            choice = gets.chomp.to_i
+            if choice == 1
+                #Back to Help Menu
+                helpitem_open = false
+            elsif choice == 2
+                puts
+                exitapp
+                exit
+                #exits app
+            end
+            puts "***\n * \n***".colorize(:yellow)
+        end
+    end
+
+    def infoitem
+    end
+
+    def instructionsitem
+    end
+end
\ No newline at end of file
diff --git a/index.rb b/index.rb
index b490f74..262e0b5 100755
--- a/index.rb
+++ b/index.rb
@@ -109,8 +109,8 @@ def menu
     puts
     puts "7: Random Movie Selector"
     puts
-    puts
-    puts "8: Exit App"
+    puts "8: Help"
+    puts "9: Exit App"
     puts "***\n * \n***".colorize(:yellow)
 end
 
@@ -161,13 +161,26 @@ loop do
         puts "Random Movie Selector"
         puts
         puts "The random movie to watch tonight is... " 
+        puts
         spinner.auto_spin
         sleep (3)
         spinner.stop
+        puts
         puts "> " + "#{group_instance.shuffle.sample}"
         puts
+        sleep(1)
+        puts
+        sleep(1)
+        puts
+        sleep(1)
+        puts
+        puts "Enjoy the movie!"
         sleep(3)
+        exitapp
+        exit
     when 8
+        mainmenu.helpinfo
+    when 9
         puts
         exitapp
         exit
diff --git a/list.rb b/list.rb
index 2031392..10a6b02 100644
--- a/list.rb
+++ b/list.rb
@@ -1,4 +1,5 @@
 require_relative './movie_item'
+require_relative './help'
 
 class List
     # do i need the initialise function?
@@ -35,59 +36,6 @@ class List
         sleep(3)
     end
 
-    def viewbestpicture
-    system 'clear'
-        def bestmenu
-            puts
-            puts
-            puts "2021 Best Picture Films:"
-            puts "Please choose an option.".colorize(:blue)
-            puts "***".colorize(:yellow)
-            puts
-            puts "1: Sound of Metal"
-            puts "2: Mank"
-            puts "3: Minari"
-            puts "4: Promising Young Woman"
-            puts "5: The Father"
-            puts "6: Judas and the Black Messiah"
-            puts "7: The Trial of the Chicago 7"
-            puts "8: Nomadland - Winner".colorize(:cyan)
-            puts
-            puts "9: Back to MAIN MENU"
-            puts "***\n * \n***".colorize(:yellow)
-        end
-        
-        movieitemselection = MovieItem.new(@watchlist, @favourite)
-        
-        viewbestpicture_open = true
-        while viewbestpicture_open
-            bestmenu
-                case gets.to_i
-                when 1
-                    movieitemselection.soundofmetal
-                when 2
-                    movieitemselection.mank
-                when 3
-                    movieitemselection.minari
-                when 4
-                    movieitemselection.promising
-                when 5
-                    movieitemselection.thefather
-                when 6
-                    movieitemselection.judas
-                when 7
-                    movieitemselection.trial
-                when 8
-                    movieitemselection.nomadland
-                when 9
-                    viewbestpicture_open = false
-                end
-                # stop loop?
-                # system 'clear'
-            end
-        #end #getting an error, I'm not sure why I can't close this loop ?
-    end
-
     def add
         # check whether the file exists and read  into array, otherwise create a new file
         puts "Add a movie to the list".colorize(:blue)    
@@ -130,7 +78,7 @@ class List
             puts "2: > Exit App"
             choice = gets.chomp.to_i
             if choice == 1
-                remove_open = false
+                add_open = false
             else choice == 2
                 puts
                 exitapp
@@ -196,6 +144,56 @@ class List
         puts
     end
 
+    def viewbestpicture
+    system 'clear'
+        def bestmenu
+            puts
+            puts
+            puts "2021 Best Picture Films:"
+            puts "Please choose an option.".colorize(:blue)
+            puts "***".colorize(:yellow)
+            puts
+            puts "1: Sound of Metal"
+            puts "2: Mank"
+            puts "3: Minari"
+            puts "4: Promising Young Woman"
+            puts "5: The Father"
+            puts "6: Judas and the Black Messiah"
+            puts "7: The Trial of the Chicago 7"
+            puts "8: Nomadland - Winner".colorize(:cyan)
+            puts
+            puts "9: Back to MAIN MENU"
+            puts "***\n * \n***".colorize(:yellow)
+        end
+        
+        movieitemselection = MovieItem.new(@watchlist, @favourite)
+        
+        viewbestpicture_open = true
+        while viewbestpicture_open
+            bestmenu
+            case gets.to_i
+            when 1
+                movieitemselection.soundofmetal
+            when 2
+                movieitemselection.mank
+            when 3
+                movieitemselection.minari
+            when 4
+                movieitemselection.promising
+            when 5
+                movieitemselection.thefather
+            when 6
+                movieitemselection.judas
+            when 7
+                movieitemselection.trial
+            when 8
+                movieitemselection.nomadland
+            when 9
+                viewbestpicture_open = false
+            end
+        end
+    end
+
     def watch
     system 'clear'
         puts "#{@name}'s To Watch List"
@@ -235,6 +233,48 @@ class List
         puts
     end
 
+    def helpinfo
+    system 'clear'
+        def helpmenu
+            font = TTY::Font.new(:doom) # implementing font gem
+            pastel = Pastel.new # implementing pastel gem
+            puts "*** * *** ** *** * *** ** *** * ***".colorize(:yellow)
+            puts
+            puts pastel.yellow(font.write("HELP+"))
+            puts "Please choose an option.".colorize(:red)
+            puts "***".colorize(:red)
+            puts
+            puts "1: HELP"
+            puts "2: INFO"
+            puts "3: INSTRUCTIONS"
+            puts 
+            puts "4: Back to MAIN MENU"
+            puts "5: EXIT"
+            puts "***\n * \n***".colorize(:yellow)
+        end
+
+        helpitemselection = HelpItem.new
+
+        help_open = true
+        while help_open
+            helpmenu
+            case gets.to_i
+            when 1
+                helpitemselection.helpitem
+            when 2
+                helpitemselection.infoitem
+            when 3
+                helpitemselection.instructionsitem
+            when 4
+                help_open = false
+            when 5
+                puts
+                exitapp
+                exit
+            end
+        end
+    end
+
     #
     # You can have these in the public section but makes it easier to read
     # methods that arern't called outside of class should be in private. 
@@ -278,4 +318,4 @@ class List
             end
         end
     end
-end
\ No newline at end of file
+end
diff --git a/lists/Thunder.txt b/lists/Thunder.txt
new file mode 100644
index 0000000..d8e8f11
--- /dev/null
+++ b/lists/Thunder.txt
@@ -0,0 +1 @@
+Spaceballs

commit 19134c007bf92263323ac5df4f8f282bce172015
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 26 23:28:04 2021 +1000

    updated randomiser. Updated imagery in README file.

diff --git a/README copy.md b/README copy.md
deleted file mode 100644
index b8115c9..0000000
--- a/README copy.md	
+++ /dev/null
@@ -1,264 +0,0 @@
-# Oscars Judge Terminal App
-
-Oscars Judge Terminal App gives you the opportunity to be your own judge on the Academy Awards nominees and winners.<br/>
-Create:
-
-- Create a **User Profile**,
-- **Personalise lists** of your Favourite Oscars movies and To Watch Lists,
-- Can't decide what to watch? **Randomise** best picture movies and be directed to streaming sites,
-- **Save and return** at any time.
-
-[Git Hub Source Respository](https://github.com/leberSmeaton/portfolioT1A3)
-
-<br/>![Michelle Obama annouces 'And the OScar goes to...' gif](https://media.giphy.com/media/l0Exilgks3XFeHErK/giphy.gif)
-
-## Installation
-
-This Oscars Judge Terminal App has,
-
-- System Requirements,
-- Ruby 3.0.1 installed for operation,
-- Ruby Gem Bundler Install to run gem dependencies,
-- Command Line Arguments available.
-
-<br/> [**Ruby 3.0.1** install information here,](https://www.ruby-lang.org/en/documentation/installation/#rubyinstaller)
-
-- **Homebrew (macOS)**<br/>
-  Ruby versions 2.0 and above are included by default in macOS releases since at least El Capitan (10.11). [Homebrew](https://brew.sh/) is a commonly used package manager on macOS. Installing Ruby using Homebrew is easy:
-
-  `$ brew install ruby`
-
-  - You may already have ruby installed on your computer. To check which version is installed type in your terminal emulator,<br/>
-    `$ ruby --version`
-
-- [rbenv](https://github.com/rbenv/rbenv#readme) to manage multiple installations/versions of Ruby. [rbenv](https://github.com/rbenv/rbenv#readme) allows you to manage multiple installations of Ruby.
-
-  - To update to version required,<br/>
-    `$ rbenv install -list`<br/>
-    #select from available versions<br/>
-    #set to global version...<br/>
-    `$ rbenv install 3.0.1`<br/>
-    #check ruby version<br/>
-    `ruby --version`
-
-- **Windows** <br/>
-  Check our the [**RubyInstaller**](https://rubyinstaller.org/) as it gives you everything to set up a full Ruby environment.
-
-- **Linux/UNIX** <br/>
-  You can use the package management system of your distribution or third-party tools ([rbenv](https://github.com/rbenv/rbenv) and [RVM](http://rvm.io/)).
-  Debian GNU/Linux and Ubuntu use the apt package manager. You can use it like this:<br/>
-  - `$ sudo apt-get install ruby-full`
-
-<br/> **Ruby Install Bundler** to manage the Oscars Judge Terminal App gem dependencies. The app utilises the following gems: _Colorize, TTY-link, TTY-font, Pastel, TTY-spinner._
-
-- Bundler is an easy way to install all gem dependencies.
-- Check to see if you have bundler installed.
-- `$ bundler -v`
-- OR install, `$ gem install bundler`
-
-<br/> **Downloading Oscars Judge** -
-You've made it to the GitHub repo! Choose to download the ZIP folder or clone the repository to your computer.
-
-- To run, open your terminal,
-- Locate the src folder and ensure it is your working directory,
-- Within the src directory run `$ bundler install` to ensure Ruby gem dependencies are all installed.
-  - Either `$ ruby index.rb`
-  - OR, use simple execution once `$ chmod +x ./run_program.sh` to run.
-  - AFTER, running chmod the first time you can use `$ ./run_program.sh`.
-- You can find other information about the app by using the following flags,
-  - `$ ruby index.rb - help` for help
-  - `$ ruby index.rb - info` for info
-  - `$ ruby index.rb - instructions` for instructions on how to play
-    <br/>
-    <br/>
-    <br/>
-
-# Oscars Judge Terminal App
-
-[Welcome Message of Oscars Judge App]()<br/>
-[Git Hub Source Respository](https://github.com/leberSmeaton/portfolioT1A3)
-
-## Statement of Purpose
-
-### Purpose
-
-The Oscars Judge Terminal App is a multi-user, multi-session Oscar's experience, presenting the user with information on the nominees and winners of every annual Academy Awards category.
-Users can create a profile to store 'Favourite List' and 'To Watch List', and set ratings on the movies they loved and hated (feature not yet available). If users can't decide on a movie to watch next, the Randomise feature will choose for you!
-
-### The Problem
-
-The Oscars Judge app creation idea came from loving to watch movies, but spending hours deciding what to watch. Creating lists is great, but having a random selection for you takes the ease off decision making.
-
-- Never knowing 'what's good?'
-- Indecisive decision makers.
-- Quick link to watch movie instead of searching online for streaming.
-
-### Target Audience
-
-The app is great for the indecisive user who finds it difficult to find quality movies. The 'Random Movie Selector' will narrow down the search for the user, provide a movie choice and exiting the app to watch.
-Users can return and start from where they left off to update their profiles and discover what to watch next.
-The avid movie goer will love the ease of movie information and ability to store their rating and movie review(currently unavailable) in their 'Favourite List'.
-
-### User Interaction
-
-<br/>**README[.]md**
-
-- As seen above, The README.md file provides the user instructions on the install requirements to run the Oscars Judge Terminal App. The README.md also provides the user instructions on how to navigate the app using up and down arrow keys rather than a mouse click or numerical.
-
-<br/>**Flags**
-
-- Built into the Oscars Judge Terminal App is a -help flag that will also give a rundown of requirements and how to navigate and any other features the User needs to be informed about.
-
-<br/>**Interacting with the app features**
-
-- On start after the app welcome page, the **User Profile Creation** feature allows the user to either select their previously saved profile or create a new user profile. Users initially create their profile by selecting 'New User' which prompts name input. To save the user just has to exit via prompt and **Saving Sessions** feature will execute. On return to the app a user who's created a profile will see their name as an option to continue with their saved profile that has stored all information from the **Creating New Lists** feature. Error handling for **User Profile Creation** is set for name input, ensuring only english a-z characters are used, no symbols or numbers. Control flow will stop on invalid user name, displaying a prompt to enter a new name and the reason why.
-- The user can interact with 'To Watch List' and 'Favourite List' objects in the **Creating New Lists** feature that allows them to keep record and interact with the app. Whilst browsing movies in their chosen films category they have the option to 'Save to Watch List'/'Save to Favourite List'. The user doesn't get taken from the movie interface they've selected, rather on selection the movie is pushed into the array list of their choice. If the movie is already in either list error handling will display 'movie not added. Movie already in list'. When they want to view either list, it is available to select through the main menu. If the lists are empty, error handling will display 'You don't have any items to list.'
-- When the user can't decide on a movie to watch **Randomise Movies** feature can be selected to output a random movie. On execute the feature will loop through all movies Control flow, If option is random - output movie. This is also a feature exit of the program that will take the user to a direct link to watch the movie.
-  The session will end and **Saving Session** feature will execute. Error handling to display 'You've seen this film' is not yet set up on **Randomise Movies** feature yet.
-- The user must move through the app after creating their profile to get to the final feature. On exit of the app, the user does not have to take any additional steps for the **Saving Sessions** to execute as it is a built in save automation. The control flow asks, If exit - then save to file.
-  Error handling is not yet set up for **Saving Sessions**. If something goes wrong on exit or the save does not occur a message will display 'save error - goodbye'.
-  <br />
-
-## Features
-
-### User Profile Creation
-
-Allows a user to create a profile that stores the data they create and remembers it for future sessions. The User Profile Creation caters to multiple users.
-
-- On creation of a new user, the data is stored in an array which is assigned as a variable defined by the users name. name = $bella ?
-- Within the array profile we store @watchlist and @favourite variables that can be called in creating new lists. Are these global variables?
-- when a user is attempting to make a profile a conditional conditional control structure will check if the name contains any invalid numbers or symbols. This is where 'invalid name' error handling will take place.
-  ![]()
-  <br />
-  <br />
-
-### Creating New Lists
-
-is for @watchlist and @favourite lists and is defined by the user and stored in the user profile. Lists can be accessed whilst in the main menu.
-
-- $watchlist and $favourite are global variables because they can be accessed across multiple features. variable movie names are accessed to pull the entire movie info to move into either list.
-- there are no loops only printing of the array of variable movie title names.
-- If nothing has been saved in the lists a 'nothing saved' error message is printed.
-  ![]()
-  <br />
-  <br />
-
-### Randomise Movies
-
-When a user can't choose what movie to watch they have the option in the main menu to randomly output a movie from the entire movie list. On selection it executes watch now and exits user directly to an external website youtube trailer link.
-
-- It randomises the variable movies names and their youtube link value.
-- Loop control structure for random variable movie name output. On answer user has conditional control structure to 'watch now' and exit or 'go back' to main menu.
-- possible error handling if user receives movies that they have favourited.  
-  ![]()
-  <br />
-  <br />
-
-### Saving Sessions
-
-Saving session is setup initially by User Profile Creation feature. It allows users to return to where they left off.
-
-- When users decide to exit the program their data is automatically saved into their profile @name variable and @watchlist @favourites into their alloted key values.
-- All end points offer a conditional control structure before exiting 'are you sure'? If no, it loops back into main menu selection.
-- Error messages must be displayed if saving does not complete at exit.
-  ![]()
-  <br />
-  <br />
-
-# Software Development Plan
-
-### App-flow
-
-![]()
-
-### Data-flow
-
-![]()
-
-### Interface-flow
-
-![]()
-
-### User Direction-flow
-
-![]()
-
-## Implementation Plan
-
-![]()
-
-## Help Documentation
-
-## Slide Deck
-
-()[] with link
-
-## Testing
-
-### RSPEC
-
-### Manual Testing
-
-(Google Sheets Manual Testing)[https://docs.google.com/spreadsheets/d/1iY5QTru8DgXZkvqTJFGbQCp33T6ukUDzvvMpt0CoipY/edit?usp=sharing]
-
-### 'Feature ID 1 Testing' - User prints name on intro
-
-**ID 1** Check results of user prints name in 'a-z'.
-
-1. Open app.
-2. Title.
-3. Instructions.
-4. Who is watching? User is prompted to enter name.
-5. User writes name in 'a-z' letters.
-   <br/>=> User enters through to next step as no
-6. App continues... Greeting and menu.
-
-**ID 2** Check results of user printing name with symbols.
-
-1. Open app.
-2. Title.
-3. Instructions.
-4. Who is watching? User is prompted to enter name.
-5. User writes name in 'a-z' letters and symbols.
-6. Error message states invalid username.
-7. User enters prompted result in only 'a-z'.
-   <br/>=> User enters through to next step as no result passes.
-
-### 'Feature ID 2' Testing - User adds movie into into their txt file
-
-**ID 3** Check results of saving data
-
-1. Open app.
-2. Title.
-3. Instructions.
-4. Who is watching? User is prompted to enter name.
-5. User writes name in 'a-z' letters.
-6. Greeting and menu.
-7. User selects 2 to input movie name data.
-8. User is returned to main menu.
-9. User selects 1 to view profile user list.
-   <br/>=> Movie is printed in user profile list.
-
-**ID 4** No movie data is saved
-
-1. Open app.
-2. Title.
-3. Instructions.
-4. Who is watching? User is prompted to enter name.
-5. User writes name in 'a-z' letters.
-6. Greeting and menu.
-7. User selects 2 to input movie name data.
-8. User enters with out input
-   <br/>=> User receives error message of no input and is returned to main menu.
-   <br />
-   <br />
-
-## Resources
-
-<br/>[Ruby Gems. 'tty-link', '~> 0.1.1'](https://github.com/piotrmurach/tty-link)
-<br/>[Ruby Gems. 'tty-font', '~> 0.5.0'](https://rubygems.org/gems/tty-font)
-<br/>[Ruby Gems. 'colorize', '~> 0.8.1'](https://rubygems.org/gems/colorize)
-<br/>[Ruby Gems. 'pastel', '~> 0.7.1'](https://rubygems.org/gems/pastel/versions/0.7.1)
-<br/>[Viking Code School. Shebangs](https://www.vikingcodeschool.com/falling-in-love-with-ruby/running-ruby-scripts#:~:text=Running%20a%20Script&text=It's%20easy%20%2D%2D%20just%20create,to%20the%20command%20line%20now!)
-
-<br/>![Bong Joon-ho saying thankyou with Oscar in hand](https://media.giphy.com/media/VhosQcv9wVK5MmXULs/giphy.gif)
diff --git a/README.md b/README.md
index 4e86622..eb179de 100644
--- a/README.md
+++ b/README.md
@@ -1,16 +1,20 @@
 # Oscars Judge Terminal App
 
-Oscars Judge Terminal App gives you the opportunity to be your own judge on the Academy Awards nominees and winners.<br/>
-Create:
+![App Heading](../docs/preview_screenshots/title.png)<br/>
+
+Oscars Judge Terminal App gives you the opportunity to be your own judge on the Academy Awards nominees and winners. Favourite movies, randomise movie selections and stay upto date with award winners.
+<br/>Create:
 
 - Create a **User Profile**,
 - **Personalise lists** of your Favourite Oscars movies and To Watch Lists,
 - Can't decide what to watch? **Randomise** best picture movies and be directed to streaming sites,
 - **Save and return** at any time.
 
-[Git Hub Source Respository](https://github.com/leberSmeaton/portfolioT1A3)
+<br/>[Git Hub Source Respository](https://github.com/leberSmeaton/portfolioT1A3)
 
-<br/>![Michelle Obama annouces 'And the OScar goes to...' gif](https://media.giphy.com/media/l0Exilgks3XFeHErK/giphy.gif)
+![Michelle Obama annouces 'And the OScar goes to...' gif](https://media.giphy.com/media/l0Exilgks3XFeHErK/giphy.gif)
+<br/>
+<br/>
 
 ## Installation
 
@@ -75,101 +79,225 @@ You've made it to the GitHub repo! Choose to download the ZIP folder or clone th
 
 # Oscars Judge Terminal App
 
+[Welcome Message of Oscars Judge App]()<br/>
 [Git Hub Source Respository](https://github.com/leberSmeaton/portfolioT1A3)
 
-## Example imagery
-
-![Welcome Interface](../docs/preview_screenshots/home.png)
-_
-![Who's Watching and Main Menu](../docs/preview_screenshots/whowatchingmenu.png)
-_
-![Random Movie Selector and menu](../docs/preview_screenshots/randommoviemenu.png)
-_
-![Random Movie Selector and menu](../docs/preview_screenshots/movieinfo.png)
-_
-![Adding a movie to list](../docs/preview_screenshots/addmovietolist.png)
-<br />
-<br />
-
-# Software Development Plan
-
 ## Statement of Purpose
 
-The Oscars Judge Terminal App is a multi-user, multi-session Oscar's experience, presenting the user with information on the nominees and winners of every annual Academy Awards category.
+### Purpose
 
+The Oscars Judge Terminal App is a multi-user, multi-session Oscar's experience, presenting the user with information on the nominees and winners of every annual Academy Awards category.
 Users can create a profile to store 'Favourite List' and 'To Watch List', and set ratings on the movies they loved and hated (feature not yet available). If users can't decide on a movie to watch next, the Randomise feature will choose for you!
 
-On start be welcomed by the Oscars Judge App welcome message, greeting the user and describing how to operate the app in short. The welcome screen waits for 3 seconds until the user is presented with 'Who is watching?' and the ability to select a pre-made profile or create a new profile with 'New User'. If 'New User' is selected, the prompt 'Type name of new user' requests the new user's name.
+### The Problem
 
-The user's name will be used as a personifier throughout the session in menu titles. On exit of the app the profile will save and the name will be a unique identifier when they return to play again. When 'Who's Watching?' has been executed the main menu will appear requesting selection.
+The Oscars Judge app creation idea came from loving to watch movies, but spending hours deciding what to watch. Creating lists is great, but having a random selection for you takes the ease off decision making.
 
-Selecting option '2021 Best Picture' will list films from that selected category. Movie information will be printed, including synopsis and director. The user can select to store that movie into their 'To Watch List' or in their 'Favourite List' for future analysis.
+- Never knowing 'what's good?',
+- Indecisive decision makers,
+- Spending too much time searching for movies,
+- Quick links to watch movie instead of searching online for streaming.
 
-The Main Menu is where the personalised 'To Watch List' and 'Favourite List' are directly accessed. If the 'To Watch List' is populated there is the option to exit the app via direct link of the chosen movie.
+### Target Audience
 
-The avid movie goer will love the ease of movie information and ability to store their rating and movie review(currently unavailable) in their 'Favourite List'.
+- The indecisive user who finds it difficult to find quality movies. The 'Random Movie Selector' will narrow down the search for the user, provide a movie choice and exiting the app to watch.
+- The avid moviegoer who wants to keep tabs on their favourites and to watch lists. Users can return and start from where they left off to update their profiles and discover what to watch next.
 
-The app is great for the indecisive user who finds it difficult to find quality movies. The 'Random Movie Selector' will narrow down the search for the user, provide a movie choice and exiting the app to watch.
+### User Interaction
 
-Users can return and start from where they left off to update their profiles and discover what to watch next.
+**README[.]md**
 
-<br />
-<br />
+- As seen above, The README.md file provides the user instructions on the install requirements to run the Oscars Judge Terminal App. The README.md also provides the user instructions on how to navigate the app using up and down arrow keys rather than a mouse click or numerical.
+
+<br/>**Flags**
+
+- Built into the Oscars Judge Terminal App is a -help flag that will also give a rundown of requirements and how to navigate and any other features the User needs to be informed about.
+- Other flags include -instructions and -info for the app.
+
+![info, instruction and help flags](../docs/preview_screenshots/flags.png)
+
+<br/>**Interacting with the app features**
+
+- On start after the app welcome page, the **User Profile Creation** feature allows the user to either select their previously saved profile or create a new user profile. Users initially create their profile by selecting 'New User' which prompts name input. To save the user just has to exit via prompt and **Saving Sessions** feature will execute. On return to the app a user who's created a profile will see their name as an option to continue with their saved profile that has stored all information from the **Creating New Lists** feature. Error handling for **User Profile Creation** is set for name input, ensuring only english a-z characters are used, no symbols or numbers. Control flow will stop on invalid user name, displaying a prompt to enter a new name and the reason why.
+- The user can interact with 'To Watch List' and 'Favourite List' objects in the **Creating New Lists** feature that allows them to keep record and interact with the app. Whilst browsing movies in their chosen films category they have the option to 'Save to Watch List'/'Save to Favourite List'. The user doesn't get taken from the movie interface they've selected, rather on selection the movie is pushed into the array list of their choice. If the movie is already in either list error handling will display 'movie not added. Movie already in list'. When they want to view either list, it is available to select through the main menu. If the lists are empty, error handling will display 'You don't have any items to list.'
+- When the user can't decide on a movie to watch **Randomise Movies** feature can be selected to output a random movie. On execute the feature will loop through all movies Control flow, If option is random - output movie. This is also a feature exit of the program that will take the user to a direct link to watch the movie.
+  The session will end and **Saving Session** feature will execute. Error handling to display 'You've seen this film' is not yet set up on **Randomise Movies** feature yet.
+- The user must move through the app after creating their profile to get to the final feature. On exit of the app, the user does not have to take any additional steps for the **Saving Sessions** to execute as it is a built in save automation. The control flow asks, If exit - then save to file.
+  Error handling is not yet set up for **Saving Sessions**. If something goes wrong on exit or the save does not occur a message will display 'save error - goodbye'.
+  <br />
+
+![Instructions](../docs/preview_screenshots/instructions.png)
 
-## Main Features
+**Gems**
+
+- Pastel, Colorize & TTY-font
+  - For creating a attractive user interface. Boosting readability of headings and creating points of difference.
+- TTY-link
+  - Providing hyperlinks for users when they arrive at end points of their movie searches. Allows the users to quickly leave the app and be diverted to their film of choice. This works as an end point for the To Watch list feature.
+- TTY-spinner
+  - Creating DRY code by removing repetitive code, double the size of of the spinner code. Showing realtime wait times and creating build up for revealing features such as the Randomise feature.
+
+## Features
+
+### User Profile Creation
 
-**User Profile Creation**
 Allows a user to create a profile that stores the data they create and remembers it for future sessions. The User Profile Creation caters to multiple users.
 
 - On creation of a new user, the data is stored in an array which is assigned as a variable defined by the users name. name = $bella ?
 - Within the array profile we store @watchlist and @favourite variables that can be called in creating new lists. Are these global variables?
-- when a user is attempting to make a profile a conditional conditional control structure will check if the name contains any invalid numbers or symbols. This is where 'invalid name' error handling will take place.
-  <br />
-  <br />
+- when a user is attempting to make a profile a conditional conditional control structure will check if the name contains any invalid numbers or symbols. This is where 'invalid name' error handling will take place.<br/>
+
+![Who is watching?](../docs/preview_screenshots/mainmenu.png)
+<br />
+<br />
+
+### Creating New Lists
 
-**Creating New Lists**
 is for @watchlist and @favourite lists and is defined by the user and stored in the user profile. Lists can be accessed whilst in the main menu.
 
 - $watchlist and $favourite are global variables because they can be accessed across multiple features. variable movie names are accessed to pull the entire movie info to move into either list.
 - there are no loops only printing of the array of variable movie title names.
-- If nothing has been saved in the lists a 'nothing saved' error message is printed.
-  <br />
-  <br />
+- If nothing has been saved in the lists a 'nothing saved' error message is printed.<br/>
+
+![Creating New Lists](../docs/preview_screenshots/addmovietolist.png)
+<br />
+<br />
+
+### Randomise Movies
 
-**Randomise Movies**
 When a user can't choose what movie to watch they have the option in the main menu to randomly output a movie from the entire movie list. On selection it executes watch now and exits user directly to an external website youtube trailer link.
 
 - It randomises the variable movies names and their youtube link value.
 - Loop control structure for random variable movie name output. On answer user has conditional control structure to 'watch now' and exit or 'go back' to main menu.
-- possible error handling if user receives movies that they have favourited.  
-  <br />
-  <br />
+- possible error handling if user receives movies that they have favourited.<br/>
+
+![Random select movie](../docs/preview_screenshots/randommoviemenu.png)
+<br />
+<br />
+
+### Saving Sessions & Exiting App
 
-**Saving Session**
 Saving session is setup initially by User Profile Creation feature. It allows users to return to where they left off.
 
-- When users decide to exit the program their data is automatically saved into their profile @name variable and @watchlist @favourites into their alloted key values.
+- When users decide to exit the program their data is automatically saved into their profile txt file created at the start of the session. The @watchlist and @favourites arrays are also stored in the txt file.
 - All end points offer a conditional control structure before exiting 'are you sure'? If no, it loops back into main menu selection.
-- Error messages must be displayed if saving does not complete at exit.
-  <br />
-  <br />
+- Error messages must be displayed if saving does not complete at exit.<br/>
+
+![Exiting App](../docs/preview_screenshots/exitapp.png)
+<br />
+<br />
+
+# Software Development Plan
+
+### App-flow
+
+![]()
+
+### Data-flow
+
+![]()
+
+### Interface-flow
+
+![]()
+
+### User Direction-flow
+
+![]()
+
+## Implementation Plan
+
+Using [Trello as project management software](https://trello.com/b/4HGN7XKp/t1a3) for keeping track.
+
+- Board Feature
+  ![Board Feature](../docs/preview_screenshots/managingfeatures.png)
+- Early Stages
+  ![Early Stages](../docs/preview_screenshots/early.png)
+- Around Midway
+  ![Around Midway](../docs/preview_screenshots/midway.png)
+- Towards Conclusion
+  ![Towards Conclusion](../docs/preview_screenshots/towardsend.png)
+
+<br/>
+
+[GitHub](https://github.com/leberSmeaton/portfolioT1A3) for version control.
+
+- ![Early Stages](../docs/preview_screenshots/firstinit.png)
+- ![Around Midway](../docs/preview_screenshots/branchgit.png)
+
+## Help Documentation
+
+## Testing
+
+### RSPEC
+
+Initial testing for RSPEC worked on the early versions of Oscars Judge Terminal App, but as the app changed, had to be refactored and eventually removed. Here are some images of that process...
+![]()
+![]()
+
+### Error Handling
+
+Words
+![]()
+
+### Manual Testing
+
+[Google Sheets Manual Testing Link](https://docs.google.com/spreadsheets/d/1iY5QTru8DgXZkvqTJFGbQCp33T6ukUDzvvMpt0CoipY/edit?usp=sharing)
+
+**'Feature ID 1' - User prints name on intro**
+
+**ID 1** Check results of user prints name in 'a-z'.
+
+1. Open app.
+2. Title.
+3. Instructions.
+4. Who is watching? User is prompted to enter name.
+5. User writes name in 'a-z' letters.
+   <br/>=> User enters through to next step as no
+6. App continues... Greeting and menu.
+
+**ID 2** Check results of user printing name with symbols.
 
-## User Interaction
+1. Open app.
+2. Title.
+3. Instructions.
+4. Who is watching? User is prompted to enter name.
+5. User writes name in 'a-z' letters and symbols.
+6. Error message states invalid username.
+7. User enters prompted result in only 'a-z'.
+   <br/>=> User enters through to next step as no result now passes....
+8. App continues... Greeting and menu.
 
-As seen above, The README.md file provides the user instructions on the install requirements to run the Oscars Judge Terminal App. The README.md also provides the user instructions on how to navigate the app using up and down arrow keys rather than a mouse click or numerical.
-Built into the Oscars Judge Terminal App is a -help flag that will also give a rundown of requirements and how to navigate and any other features the User needs to be informed about.
+**'Feature ID 2' - User adds movie into into their txt file**
 
-On start after the app welcome page, the **User Profile Creation** feature allows the user to either select their previously saved profile or create a new user profile. Users initially create their profile by selecting 'New User' which prompts name input. To save the user just has to exit via prompt and **Saving Sessions** feature will execute. On return to the app a user who's created a profile will see their name as an option to continue with their saved profile that has stored all information from the **Creating New Lists** feature.
-Error handling for **User Profile Creation** is set for name input, ensuring only english a-z characters are used, no symbols or numbers. Control flow will stop on invalid user name, displaying a prompt to enter a new name and the reason why.
+**ID 3** Check results of saving data
 
-The user can interact with 'To Watch List' and 'Favourite List' objects in the **Creating New Lists** feature that allows them to keep record and interact with the app. Whilst browsing movies in their chosen films category they have the option to 'Save to Watch List'/'Save to Favourite List'. The user doesn't get taken from the movie interface they've selected, rather on selection the movie is pushed into the array list of their choice. If the movie is already in either list error handling will display 'movie not added. Movie already in list'.
-When they want to view either list, it is available to select through the main menu. If the lists are empty, error handling will display 'You don't have any items to list.'
+1. Open app.
+2. Title.
+3. Instructions.
+4. Who is watching? User is prompted to enter name.
+5. User writes name in 'a-z' letters.
+6. Greeting and menu.
+7. User selects 2 to input movie name data.
+8. User is returned to main menu.
+9. User selects 1 to view profile user list.
+   <br/>=> Movie is printed in user profile list....
+10. App continues... User is back at main menu menu.
 
-When the user can't decide on a movie to watch **Randomise Movies** feature can be selected to output a random movie. On execute the feature will loop through all movies Control flow, If option is random - output movie. This is also a feature exit of the program that will take the user to a direct link to watch the movie.
-The session will end and **Saving Session** feature will execute. Error handling to display 'You've seen this film' is not yet set up on **Randomise Movies** feature yet.
+**ID 4** No movie data is saved
 
-The user must move through the app after creating their profile to get to the final feature. On exit of the app, the user does not have to take any additional steps for the **Saving Sessions** to execute as it is a built in save automation. The control flow asks, If exit - then save to file.
-Error handling is not yet set up for **Saving Sessions**. If something goes wrong on exit or the save does not occur a message will display 'save error - goodbye'.
+1. Open app.
+2. Title.
+3. Instructions.
+4. Who is watching? User is prompted to enter name.
+5. User writes name in 'a-z' letters.
+6. Greeting and menu.
+7. User selects 2 to input movie name data.
+8. User enters with out input
+   <br/>=> User receives error message of no input and is returned to main menu.
+9. App continues... User is back at main menu menu.
+   <br />
+   <br />
 
 ## Resources
 
diff --git a/index.rb b/index.rb
index eaeea04..b490f74 100755
--- a/index.rb
+++ b/index.rb
@@ -121,7 +121,7 @@ def exitapp
     puts "© Oscars Judge Terminal App *** by Bella Leber Smeaton".colorize(:cyan)
     puts TTY::Link.link_to("GitHub Repo", "https://github.com/leberSmeaton/portfolioT1A3".colorize(:yellow))
     puts
-    puts "***\n * \n***".colorize(:yellow)
+    puts "*** * *** ** *** * *** ** *** * *** * *** ** *** * *** ** *** * *** * *** **".colorize(:yellow)
 end
 # ------------ main body ------------
 
@@ -155,7 +155,7 @@ loop do
     when 7
         spinner = TTY::Spinner.new(":spinner")
 
-        group_instance = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
+        group_instance = [TTY::Link.link_to("Sound of Metal", "https://youtu.be/VFOrGkAvjAE".colorize(:yellow)), TTY::Link.link_to("Mank", "https://youtu.be/aSfX-nrg-lI".colorize(:yellow)), TTY::Link.link_to("Minari", "https://youtu.be/KQ0gFidlro8".colorize(:yellow)), TTY::Link.link_to("Promising Young Woman", "https://youtu.be/KQ0gFidlro8".colorize(:yellow)), TTY::Link.link_to("The Father", "https://youtu.be/4TZb7YfK-JI".colorize(:yellow)), TTY::Link.link_to("Judas and the Black Messiah", "https://youtu.be/sSjtGqRXQ9Y".colorize(:yellow)), TTY::Link.link_to("The Trial of the Chicago 7", "https://youtu.be/FVb6EdKDBfU".colorize(:yellow)), TTY::Link.link_to("Nomadland", "https://youtu.be/6sxCFZ8_d84".colorize(:yellow))]
 
         puts
         puts "Random Movie Selector"
diff --git a/lists/Bella.txt b/lists/Bella.txt
index ab4998a..06f794a 100644
--- a/lists/Bella.txt
+++ b/lists/Bella.txt
@@ -5,7 +5,6 @@ Minority Report
 Perfect Blue
 Drive
 Between the Pines
-Harry Potter
-Spiderman
 Anaconda
 Drive
+Walkabout

commit 5ab9c6a838bcabf5ed2fdd73364f59a3ab46b38d
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 26 19:13:44 2021 +1000

    updating README with screenshots of work and laying it out to be more readable. Sectioned out the landing heading a bit more in index.rb

diff --git a/README copy.md b/README copy.md
index bcd98dc..b8115c9 100644
--- a/README copy.md	
+++ b/README copy.md	
@@ -75,42 +75,97 @@ You've made it to the GitHub repo! Choose to download the ZIP folder or clone th
 
 # Oscars Judge Terminal App
 
+[Welcome Message of Oscars Judge App]()<br/>
 [Git Hub Source Respository](https://github.com/leberSmeaton/portfolioT1A3)
 
 ## Statement of Purpose
 
 ### Purpose
 
+The Oscars Judge Terminal App is a multi-user, multi-session Oscar's experience, presenting the user with information on the nominees and winners of every annual Academy Awards category.
+Users can create a profile to store 'Favourite List' and 'To Watch List', and set ratings on the movies they loved and hated (feature not yet available). If users can't decide on a movie to watch next, the Randomise feature will choose for you!
+
 ### The Problem
 
+The Oscars Judge app creation idea came from loving to watch movies, but spending hours deciding what to watch. Creating lists is great, but having a random selection for you takes the ease off decision making.
+
+- Never knowing 'what's good?'
+- Indecisive decision makers.
+- Quick link to watch movie instead of searching online for streaming.
+
 ### Target Audience
 
+The app is great for the indecisive user who finds it difficult to find quality movies. The 'Random Movie Selector' will narrow down the search for the user, provide a movie choice and exiting the app to watch.
+Users can return and start from where they left off to update their profiles and discover what to watch next.
+The avid movie goer will love the ease of movie information and ability to store their rating and movie review(currently unavailable) in their 'Favourite List'.
+
 ### User Interaction
 
-<br />
-<br />
+<br/>**README[.]md**
+
+- As seen above, The README.md file provides the user instructions on the install requirements to run the Oscars Judge Terminal App. The README.md also provides the user instructions on how to navigate the app using up and down arrow keys rather than a mouse click or numerical.
+
+<br/>**Flags**
+
+- Built into the Oscars Judge Terminal App is a -help flag that will also give a rundown of requirements and how to navigate and any other features the User needs to be informed about.
+
+<br/>**Interacting with the app features**
+
+- On start after the app welcome page, the **User Profile Creation** feature allows the user to either select their previously saved profile or create a new user profile. Users initially create their profile by selecting 'New User' which prompts name input. To save the user just has to exit via prompt and **Saving Sessions** feature will execute. On return to the app a user who's created a profile will see their name as an option to continue with their saved profile that has stored all information from the **Creating New Lists** feature. Error handling for **User Profile Creation** is set for name input, ensuring only english a-z characters are used, no symbols or numbers. Control flow will stop on invalid user name, displaying a prompt to enter a new name and the reason why.
+- The user can interact with 'To Watch List' and 'Favourite List' objects in the **Creating New Lists** feature that allows them to keep record and interact with the app. Whilst browsing movies in their chosen films category they have the option to 'Save to Watch List'/'Save to Favourite List'. The user doesn't get taken from the movie interface they've selected, rather on selection the movie is pushed into the array list of their choice. If the movie is already in either list error handling will display 'movie not added. Movie already in list'. When they want to view either list, it is available to select through the main menu. If the lists are empty, error handling will display 'You don't have any items to list.'
+- When the user can't decide on a movie to watch **Randomise Movies** feature can be selected to output a random movie. On execute the feature will loop through all movies Control flow, If option is random - output movie. This is also a feature exit of the program that will take the user to a direct link to watch the movie.
+  The session will end and **Saving Session** feature will execute. Error handling to display 'You've seen this film' is not yet set up on **Randomise Movies** feature yet.
+- The user must move through the app after creating their profile to get to the final feature. On exit of the app, the user does not have to take any additional steps for the **Saving Sessions** to execute as it is a built in save automation. The control flow asks, If exit - then save to file.
+  Error handling is not yet set up for **Saving Sessions**. If something goes wrong on exit or the save does not occur a message will display 'save error - goodbye'.
+  <br />
 
 ## Features
 
 ### User Profile Creation
 
-![]()
+Allows a user to create a profile that stores the data they create and remembers it for future sessions. The User Profile Creation caters to multiple users.
+
+- On creation of a new user, the data is stored in an array which is assigned as a variable defined by the users name. name = $bella ?
+- Within the array profile we store @watchlist and @favourite variables that can be called in creating new lists. Are these global variables?
+- when a user is attempting to make a profile a conditional conditional control structure will check if the name contains any invalid numbers or symbols. This is where 'invalid name' error handling will take place.
+  ![]()
+  <br />
+  <br />
 
 ### Creating New Lists
 
-![]()
+is for @watchlist and @favourite lists and is defined by the user and stored in the user profile. Lists can be accessed whilst in the main menu.
+
+- $watchlist and $favourite are global variables because they can be accessed across multiple features. variable movie names are accessed to pull the entire movie info to move into either list.
+- there are no loops only printing of the array of variable movie title names.
+- If nothing has been saved in the lists a 'nothing saved' error message is printed.
+  ![]()
+  <br />
+  <br />
 
 ### Randomise Movies
 
-![]()
+When a user can't choose what movie to watch they have the option in the main menu to randomly output a movie from the entire movie list. On selection it executes watch now and exits user directly to an external website youtube trailer link.
+
+- It randomises the variable movies names and their youtube link value.
+- Loop control structure for random variable movie name output. On answer user has conditional control structure to 'watch now' and exit or 'go back' to main menu.
+- possible error handling if user receives movies that they have favourited.  
+  ![]()
+  <br />
+  <br />
 
 ### Saving Sessions
 
-![]()
+Saving session is setup initially by User Profile Creation feature. It allows users to return to where they left off.
 
-# Software Development Plan
+- When users decide to exit the program their data is automatically saved into their profile @name variable and @watchlist @favourites into their alloted key values.
+- All end points offer a conditional control structure before exiting 'are you sure'? If no, it loops back into main menu selection.
+- Error messages must be displayed if saving does not complete at exit.
+  ![]()
+  <br />
+  <br />
 
-Add flowchart images
+# Software Development Plan
 
 ### App-flow
 
@@ -128,81 +183,75 @@ Add flowchart images
 
 ![]()
 
-The Oscars Judge Terminal App is a multi-user, multi-session Oscar's experience, presenting the user with information on the nominees and winners of every annual Academy Awards category.
-
-Users can create a profile to store 'Favourite List' and 'To Watch List', and set ratings on the movies they loved and hated (feature not yet available). If users can't decide on a movie to watch next, the Randomise feature will choose for you!
-
-On start be welcomed by the Oscars Judge App welcome message, greeting the user and describing how to operate the app in short. The welcome screen waits for 3 seconds until the user is presented with 'Who is watching?' and the ability to select a pre-made profile or create a new profile with 'New User'. If 'New User' is selected, the prompt 'Type name of new user' requests the new user's name.
-
-The user's name will be used as a personifier throughout the session in menu titles. On exit of the app the profile will save and the name will be a unique identifier when they return to play again. When 'Who's Watching?' has been executed the main menu will appear requesting selection.
+## Implementation Plan
 
-Selecting option '2021 Best Picture' will list films from that selected category. Movie information will be printed, including synopsis and director. The user can select to store that movie into their 'To Watch List' or in their 'Favourite List' for future analysis.
-
-The Main Menu is where the personalised 'To Watch List' and 'Favourite List' are directly accessed. If the 'To Watch List' is populated there is the option to exit the app via direct link of the chosen movie.
-
-The avid movie goer will love the ease of movie information and ability to store their rating and movie review(currently unavailable) in their 'Favourite List'.
-
-The app is great for the indecisive user who finds it difficult to find quality movies. The 'Random Movie Selector' will narrow down the search for the user, provide a movie choice and exiting the app to watch.
+![]()
 
-Users can return and start from where they left off to update their profiles and discover what to watch next.
+## Help Documentation
 
-<br />
-<br />
+## Slide Deck
 
-## Main Features
+()[] with link
 
-**User Profile Creation**
-Allows a user to create a profile that stores the data they create and remembers it for future sessions. The User Profile Creation caters to multiple users.
+## Testing
 
-- On creation of a new user, the data is stored in an array which is assigned as a variable defined by the users name. name = $bella ?
-- Within the array profile we store @watchlist and @favourite variables that can be called in creating new lists. Are these global variables?
-- when a user is attempting to make a profile a conditional conditional control structure will check if the name contains any invalid numbers or symbols. This is where 'invalid name' error handling will take place.
-  <br />
-  <br />
+### RSPEC
 
-**Creating New Lists**
-is for @watchlist and @favourite lists and is defined by the user and stored in the user profile. Lists can be accessed whilst in the main menu.
+### Manual Testing
 
-- $watchlist and $favourite are global variables because they can be accessed across multiple features. variable movie names are accessed to pull the entire movie info to move into either list.
-- there are no loops only printing of the array of variable movie title names.
-- If nothing has been saved in the lists a 'nothing saved' error message is printed.
-  <br />
-  <br />
+(Google Sheets Manual Testing)[https://docs.google.com/spreadsheets/d/1iY5QTru8DgXZkvqTJFGbQCp33T6ukUDzvvMpt0CoipY/edit?usp=sharing]
 
-**Randomise Movies**
-When a user can't choose what movie to watch they have the option in the main menu to randomly output a movie from the entire movie list. On selection it executes watch now and exits user directly to an external website youtube trailer link.
+### 'Feature ID 1 Testing' - User prints name on intro
 
-- It randomises the variable movies names and their youtube link value.
-- Loop control structure for random variable movie name output. On answer user has conditional control structure to 'watch now' and exit or 'go back' to main menu.
-- possible error handling if user receives movies that they have favourited.  
-  <br />
-  <br />
+**ID 1** Check results of user prints name in 'a-z'.
 
-**Saving Session**
-Saving session is setup initially by User Profile Creation feature. It allows users to return to where they left off.
+1. Open app.
+2. Title.
+3. Instructions.
+4. Who is watching? User is prompted to enter name.
+5. User writes name in 'a-z' letters.
+   <br/>=> User enters through to next step as no
+6. App continues... Greeting and menu.
 
-- When users decide to exit the program their data is automatically saved into their profile @name variable and @watchlist @favourites into their alloted key values.
-- All end points offer a conditional control structure before exiting 'are you sure'? If no, it loops back into main menu selection.
-- Error messages must be displayed if saving does not complete at exit.
-  <br />
-  <br />
+**ID 2** Check results of user printing name with symbols.
 
-## User Interaction
+1. Open app.
+2. Title.
+3. Instructions.
+4. Who is watching? User is prompted to enter name.
+5. User writes name in 'a-z' letters and symbols.
+6. Error message states invalid username.
+7. User enters prompted result in only 'a-z'.
+   <br/>=> User enters through to next step as no result passes.
 
-As seen above, The README.md file provides the user instructions on the install requirements to run the Oscars Judge Terminal App. The README.md also provides the user instructions on how to navigate the app using up and down arrow keys rather than a mouse click or numerical.
-Built into the Oscars Judge Terminal App is a -help flag that will also give a rundown of requirements and how to navigate and any other features the User needs to be informed about.
+### 'Feature ID 2' Testing - User adds movie into into their txt file
 
-On start after the app welcome page, the **User Profile Creation** feature allows the user to either select their previously saved profile or create a new user profile. Users initially create their profile by selecting 'New User' which prompts name input. To save the user just has to exit via prompt and **Saving Sessions** feature will execute. On return to the app a user who's created a profile will see their name as an option to continue with their saved profile that has stored all information from the **Creating New Lists** feature.
-Error handling for **User Profile Creation** is set for name input, ensuring only english a-z characters are used, no symbols or numbers. Control flow will stop on invalid user name, displaying a prompt to enter a new name and the reason why.
+**ID 3** Check results of saving data
 
-The user can interact with 'To Watch List' and 'Favourite List' objects in the **Creating New Lists** feature that allows them to keep record and interact with the app. Whilst browsing movies in their chosen films category they have the option to 'Save to Watch List'/'Save to Favourite List'. The user doesn't get taken from the movie interface they've selected, rather on selection the movie is pushed into the array list of their choice. If the movie is already in either list error handling will display 'movie not added. Movie already in list'.
-When they want to view either list, it is available to select through the main menu. If the lists are empty, error handling will display 'You don't have any items to list.'
+1. Open app.
+2. Title.
+3. Instructions.
+4. Who is watching? User is prompted to enter name.
+5. User writes name in 'a-z' letters.
+6. Greeting and menu.
+7. User selects 2 to input movie name data.
+8. User is returned to main menu.
+9. User selects 1 to view profile user list.
+   <br/>=> Movie is printed in user profile list.
 
-When the user can't decide on a movie to watch **Randomise Movies** feature can be selected to output a random movie. On execute the feature will loop through all movies Control flow, If option is random - output movie. This is also a feature exit of the program that will take the user to a direct link to watch the movie.
-The session will end and **Saving Session** feature will execute. Error handling to display 'You've seen this film' is not yet set up on **Randomise Movies** feature yet.
+**ID 4** No movie data is saved
 
-The user must move through the app after creating their profile to get to the final feature. On exit of the app, the user does not have to take any additional steps for the **Saving Sessions** to execute as it is a built in save automation. The control flow asks, If exit - then save to file.
-Error handling is not yet set up for **Saving Sessions**. If something goes wrong on exit or the save does not occur a message will display 'save error - goodbye'.
+1. Open app.
+2. Title.
+3. Instructions.
+4. Who is watching? User is prompted to enter name.
+5. User writes name in 'a-z' letters.
+6. Greeting and menu.
+7. User selects 2 to input movie name data.
+8. User enters with out input
+   <br/>=> User receives error message of no input and is returned to main menu.
+   <br />
+   <br />
 
 ## Resources
 
diff --git a/index.rb b/index.rb
index ce9260b..eaeea04 100755
--- a/index.rb
+++ b/index.rb
@@ -7,7 +7,6 @@ require 'tty-font'
 require 'pastel'
 require 'tty-spinner'
 
-
 # ARGV flags
 if ARGV.length > 0 
     flag, *rest = ARGV
@@ -60,13 +59,20 @@ if ARGV.length > 0
 end
 
 def title 
+    spinner = TTY::Spinner.new(":spinner")
     font = TTY::Font.new(:doom) # implementing font gem
     pastel = Pastel.new # implementing pastel gem
+    puts "*** * *** ** *** * *** ** *** * *** * *** ** *** * *** ** *** * *** * *** **".colorize(:yellow)
+    puts
     puts pastel.yellow(font.write("OSCARS JUDGE"))
-    puts "Welcome to Oscars Judge Terminal App!".colorize(:red) # implementing colorize gem
+    spinner.auto_spin
+    sleep (3)
+    spinner.stop
+    puts "Welcome to Oscars Judge Terminal App!".colorize(:blue) # implementing colorize gem
     puts "Become your own movie critic!"
     puts
-    puts "***\n * \n***".colorize(:yellow)
+    puts "*** * *** ** *** * *** ** *** * *** * *** ** *** * *** ** *** * *** * *** **".colorize(:yellow)
+    puts
 end
 
 def instructions
diff --git a/list.rb b/list.rb
index 9ca2286..2031392 100644
--- a/list.rb
+++ b/list.rb
@@ -132,6 +132,8 @@ class List
             if choice == 1
                 remove_open = false
             else choice == 2
+                puts
+                exitapp
                 exit
                 #exits app
             end
@@ -184,6 +186,8 @@ class List
             if choice == 1
                 remove_open = false
             else choice == 2
+                puts
+                exitapp
                 exit
                 #exits app
             end

commit 29ba5e3dd51ea36542a7b141898cae3eb9c8ccda
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 26 17:18:39 2021 +1000

    Added thankyou message on exit.  Attempting rspec and error handling.

diff --git a/README copy.md b/README copy.md
new file mode 100644
index 0000000..bcd98dc
--- /dev/null
+++ b/README copy.md	
@@ -0,0 +1,215 @@
+# Oscars Judge Terminal App
+
+Oscars Judge Terminal App gives you the opportunity to be your own judge on the Academy Awards nominees and winners.<br/>
+Create:
+
+- Create a **User Profile**,
+- **Personalise lists** of your Favourite Oscars movies and To Watch Lists,
+- Can't decide what to watch? **Randomise** best picture movies and be directed to streaming sites,
+- **Save and return** at any time.
+
+[Git Hub Source Respository](https://github.com/leberSmeaton/portfolioT1A3)
+
+<br/>![Michelle Obama annouces 'And the OScar goes to...' gif](https://media.giphy.com/media/l0Exilgks3XFeHErK/giphy.gif)
+
+## Installation
+
+This Oscars Judge Terminal App has,
+
+- System Requirements,
+- Ruby 3.0.1 installed for operation,
+- Ruby Gem Bundler Install to run gem dependencies,
+- Command Line Arguments available.
+
+<br/> [**Ruby 3.0.1** install information here,](https://www.ruby-lang.org/en/documentation/installation/#rubyinstaller)
+
+- **Homebrew (macOS)**<br/>
+  Ruby versions 2.0 and above are included by default in macOS releases since at least El Capitan (10.11). [Homebrew](https://brew.sh/) is a commonly used package manager on macOS. Installing Ruby using Homebrew is easy:
+
+  `$ brew install ruby`
+
+  - You may already have ruby installed on your computer. To check which version is installed type in your terminal emulator,<br/>
+    `$ ruby --version`
+
+- [rbenv](https://github.com/rbenv/rbenv#readme) to manage multiple installations/versions of Ruby. [rbenv](https://github.com/rbenv/rbenv#readme) allows you to manage multiple installations of Ruby.
+
+  - To update to version required,<br/>
+    `$ rbenv install -list`<br/>
+    #select from available versions<br/>
+    #set to global version...<br/>
+    `$ rbenv install 3.0.1`<br/>
+    #check ruby version<br/>
+    `ruby --version`
+
+- **Windows** <br/>
+  Check our the [**RubyInstaller**](https://rubyinstaller.org/) as it gives you everything to set up a full Ruby environment.
+
+- **Linux/UNIX** <br/>
+  You can use the package management system of your distribution or third-party tools ([rbenv](https://github.com/rbenv/rbenv) and [RVM](http://rvm.io/)).
+  Debian GNU/Linux and Ubuntu use the apt package manager. You can use it like this:<br/>
+  - `$ sudo apt-get install ruby-full`
+
+<br/> **Ruby Install Bundler** to manage the Oscars Judge Terminal App gem dependencies. The app utilises the following gems: _Colorize, TTY-link, TTY-font, Pastel, TTY-spinner._
+
+- Bundler is an easy way to install all gem dependencies.
+- Check to see if you have bundler installed.
+- `$ bundler -v`
+- OR install, `$ gem install bundler`
+
+<br/> **Downloading Oscars Judge** -
+You've made it to the GitHub repo! Choose to download the ZIP folder or clone the repository to your computer.
+
+- To run, open your terminal,
+- Locate the src folder and ensure it is your working directory,
+- Within the src directory run `$ bundler install` to ensure Ruby gem dependencies are all installed.
+  - Either `$ ruby index.rb`
+  - OR, use simple execution once `$ chmod +x ./run_program.sh` to run.
+  - AFTER, running chmod the first time you can use `$ ./run_program.sh`.
+- You can find other information about the app by using the following flags,
+  - `$ ruby index.rb - help` for help
+  - `$ ruby index.rb - info` for info
+  - `$ ruby index.rb - instructions` for instructions on how to play
+    <br/>
+    <br/>
+    <br/>
+
+# Oscars Judge Terminal App
+
+[Git Hub Source Respository](https://github.com/leberSmeaton/portfolioT1A3)
+
+## Statement of Purpose
+
+### Purpose
+
+### The Problem
+
+### Target Audience
+
+### User Interaction
+
+<br />
+<br />
+
+## Features
+
+### User Profile Creation
+
+![]()
+
+### Creating New Lists
+
+![]()
+
+### Randomise Movies
+
+![]()
+
+### Saving Sessions
+
+![]()
+
+# Software Development Plan
+
+Add flowchart images
+
+### App-flow
+
+![]()
+
+### Data-flow
+
+![]()
+
+### Interface-flow
+
+![]()
+
+### User Direction-flow
+
+![]()
+
+The Oscars Judge Terminal App is a multi-user, multi-session Oscar's experience, presenting the user with information on the nominees and winners of every annual Academy Awards category.
+
+Users can create a profile to store 'Favourite List' and 'To Watch List', and set ratings on the movies they loved and hated (feature not yet available). If users can't decide on a movie to watch next, the Randomise feature will choose for you!
+
+On start be welcomed by the Oscars Judge App welcome message, greeting the user and describing how to operate the app in short. The welcome screen waits for 3 seconds until the user is presented with 'Who is watching?' and the ability to select a pre-made profile or create a new profile with 'New User'. If 'New User' is selected, the prompt 'Type name of new user' requests the new user's name.
+
+The user's name will be used as a personifier throughout the session in menu titles. On exit of the app the profile will save and the name will be a unique identifier when they return to play again. When 'Who's Watching?' has been executed the main menu will appear requesting selection.
+
+Selecting option '2021 Best Picture' will list films from that selected category. Movie information will be printed, including synopsis and director. The user can select to store that movie into their 'To Watch List' or in their 'Favourite List' for future analysis.
+
+The Main Menu is where the personalised 'To Watch List' and 'Favourite List' are directly accessed. If the 'To Watch List' is populated there is the option to exit the app via direct link of the chosen movie.
+
+The avid movie goer will love the ease of movie information and ability to store their rating and movie review(currently unavailable) in their 'Favourite List'.
+
+The app is great for the indecisive user who finds it difficult to find quality movies. The 'Random Movie Selector' will narrow down the search for the user, provide a movie choice and exiting the app to watch.
+
+Users can return and start from where they left off to update their profiles and discover what to watch next.
+
+<br />
+<br />
+
+## Main Features
+
+**User Profile Creation**
+Allows a user to create a profile that stores the data they create and remembers it for future sessions. The User Profile Creation caters to multiple users.
+
+- On creation of a new user, the data is stored in an array which is assigned as a variable defined by the users name. name = $bella ?
+- Within the array profile we store @watchlist and @favourite variables that can be called in creating new lists. Are these global variables?
+- when a user is attempting to make a profile a conditional conditional control structure will check if the name contains any invalid numbers or symbols. This is where 'invalid name' error handling will take place.
+  <br />
+  <br />
+
+**Creating New Lists**
+is for @watchlist and @favourite lists and is defined by the user and stored in the user profile. Lists can be accessed whilst in the main menu.
+
+- $watchlist and $favourite are global variables because they can be accessed across multiple features. variable movie names are accessed to pull the entire movie info to move into either list.
+- there are no loops only printing of the array of variable movie title names.
+- If nothing has been saved in the lists a 'nothing saved' error message is printed.
+  <br />
+  <br />
+
+**Randomise Movies**
+When a user can't choose what movie to watch they have the option in the main menu to randomly output a movie from the entire movie list. On selection it executes watch now and exits user directly to an external website youtube trailer link.
+
+- It randomises the variable movies names and their youtube link value.
+- Loop control structure for random variable movie name output. On answer user has conditional control structure to 'watch now' and exit or 'go back' to main menu.
+- possible error handling if user receives movies that they have favourited.  
+  <br />
+  <br />
+
+**Saving Session**
+Saving session is setup initially by User Profile Creation feature. It allows users to return to where they left off.
+
+- When users decide to exit the program their data is automatically saved into their profile @name variable and @watchlist @favourites into their alloted key values.
+- All end points offer a conditional control structure before exiting 'are you sure'? If no, it loops back into main menu selection.
+- Error messages must be displayed if saving does not complete at exit.
+  <br />
+  <br />
+
+## User Interaction
+
+As seen above, The README.md file provides the user instructions on the install requirements to run the Oscars Judge Terminal App. The README.md also provides the user instructions on how to navigate the app using up and down arrow keys rather than a mouse click or numerical.
+Built into the Oscars Judge Terminal App is a -help flag that will also give a rundown of requirements and how to navigate and any other features the User needs to be informed about.
+
+On start after the app welcome page, the **User Profile Creation** feature allows the user to either select their previously saved profile or create a new user profile. Users initially create their profile by selecting 'New User' which prompts name input. To save the user just has to exit via prompt and **Saving Sessions** feature will execute. On return to the app a user who's created a profile will see their name as an option to continue with their saved profile that has stored all information from the **Creating New Lists** feature.
+Error handling for **User Profile Creation** is set for name input, ensuring only english a-z characters are used, no symbols or numbers. Control flow will stop on invalid user name, displaying a prompt to enter a new name and the reason why.
+
+The user can interact with 'To Watch List' and 'Favourite List' objects in the **Creating New Lists** feature that allows them to keep record and interact with the app. Whilst browsing movies in their chosen films category they have the option to 'Save to Watch List'/'Save to Favourite List'. The user doesn't get taken from the movie interface they've selected, rather on selection the movie is pushed into the array list of their choice. If the movie is already in either list error handling will display 'movie not added. Movie already in list'.
+When they want to view either list, it is available to select through the main menu. If the lists are empty, error handling will display 'You don't have any items to list.'
+
+When the user can't decide on a movie to watch **Randomise Movies** feature can be selected to output a random movie. On execute the feature will loop through all movies Control flow, If option is random - output movie. This is also a feature exit of the program that will take the user to a direct link to watch the movie.
+The session will end and **Saving Session** feature will execute. Error handling to display 'You've seen this film' is not yet set up on **Randomise Movies** feature yet.
+
+The user must move through the app after creating their profile to get to the final feature. On exit of the app, the user does not have to take any additional steps for the **Saving Sessions** to execute as it is a built in save automation. The control flow asks, If exit - then save to file.
+Error handling is not yet set up for **Saving Sessions**. If something goes wrong on exit or the save does not occur a message will display 'save error - goodbye'.
+
+## Resources
+
+<br/>[Ruby Gems. 'tty-link', '~> 0.1.1'](https://github.com/piotrmurach/tty-link)
+<br/>[Ruby Gems. 'tty-font', '~> 0.5.0'](https://rubygems.org/gems/tty-font)
+<br/>[Ruby Gems. 'colorize', '~> 0.8.1'](https://rubygems.org/gems/colorize)
+<br/>[Ruby Gems. 'pastel', '~> 0.7.1'](https://rubygems.org/gems/pastel/versions/0.7.1)
+<br/>[Viking Code School. Shebangs](https://www.vikingcodeschool.com/falling-in-love-with-ruby/running-ruby-scripts#:~:text=Running%20a%20Script&text=It's%20easy%20%2D%2D%20just%20create,to%20the%20command%20line%20now!)
+
+<br/>![Bong Joon-ho saying thankyou with Oscar in hand](https://media.giphy.com/media/VhosQcv9wVK5MmXULs/giphy.gif)
diff --git a/index.rb b/index.rb
index bceecfb..ce9260b 100755
--- a/index.rb
+++ b/index.rb
@@ -1,4 +1,5 @@
 require_relative "./list"
+
 require 'colorize'
 require 'tty-link'
 #tty-link gem located in movie_item.rb
@@ -106,6 +107,16 @@ def menu
     puts "8: Exit App"
     puts "***\n * \n***".colorize(:yellow)
 end
+
+def exitapp
+    font = TTY::Font.new(:doom) # implementing font gem
+    pastel = Pastel.new # implementing pastel gem
+    puts pastel.yellow(font.write("THANK-YOU"))
+    puts "© Oscars Judge Terminal App *** by Bella Leber Smeaton".colorize(:cyan)
+    puts TTY::Link.link_to("GitHub Repo", "https://github.com/leberSmeaton/portfolioT1A3".colorize(:yellow))
+    puts
+    puts "***\n * \n***".colorize(:yellow)
+end
 # ------------ main body ------------
 
 system 'clear'
@@ -151,6 +162,8 @@ loop do
         puts
         sleep(3)
     when 8
+        puts
+        exitapp
         exit
     end
 end
diff --git a/list.rb b/list.rb
index 9a9feb5..9ca2286 100644
--- a/list.rb
+++ b/list.rb
@@ -201,10 +201,10 @@ class List
             spinner = TTY::Spinner.new(":spinner")
             puts
             puts watchlist
-            raise StandardError, "Array cannot be empty." if watchlist.empty?
             spinner.auto_spin
             sleep (3)
             spinner.stop
+            raise StandardError, "Array cannot be empty." if watchlist.empty?
         rescue
             spinner.auto_spin
             sleep (2)
diff --git a/movie_item.rb b/movie_item.rb
index b9f4b47..d439206 100644
--- a/movie_item.rb
+++ b/movie_item.rb
@@ -46,6 +46,8 @@ class MovieItem
                 #Back to Best Picture Menu
                 soundofmetal_open = false
             elsif choice == 4
+                puts
+                exitapp
                 exit
                 #exits app
             end
@@ -90,6 +92,8 @@ class MovieItem
                 #Back to Best Picture Menu
                 mank_open = false
             elsif choice == 4
+                puts
+                exitapp
                 exit
                 #exits app
             end
@@ -134,6 +138,8 @@ class MovieItem
                 #Back to Best Picture Menu
                 minari_open = false
             elsif choice == 4
+                puts
+                exitapp
                 exit
                 #exits app
             end
@@ -178,6 +184,8 @@ class MovieItem
                 #Back to Best Picture Menu
                 promising_open = false
             elsif choice == 4
+                puts
+                exitapp
                 exit
                 #exits app
             end
@@ -222,6 +230,8 @@ class MovieItem
                 #Back to Best Picture Menu
                 thefather_open = false
             elsif choice == 4
+                puts
+                exitapp
                 exit
                 #exits app
             end
@@ -266,6 +276,8 @@ class MovieItem
                 #Back to Best Picture Menu
                 judas_open = false
             elsif choice == 4
+                puts
+                exitapp
                 exit
                 #exits app
             end
@@ -310,6 +322,8 @@ class MovieItem
                 #Back to Best Picture Menu
                 trial_open = false
             elsif choice == 4
+                puts
+                exitapp
                 exit
                 #exits app
             end
@@ -355,6 +369,8 @@ class MovieItem
                 #Back to Best Picture Menu
                 nomadland_open = false
             elsif choice == 4
+                puts
+                exitapp
                 exit
                 #exits app
             end
diff --git a/spec/list_spec.rb b/spec/list_spec.rb
index 60aa1eb..d3910f9 100644
--- a/spec/list_spec.rb
+++ b/spec/list_spec.rb
@@ -1,7 +1,9 @@
+require 'rspec/autorun'
 require_relative '../list.rb'
 require_relative '../index.rb'
 
-describe "List" do
+
+describe List do
     context "#userlist new user list" do 
     # hash shows that this is an instance methods
 
diff --git a/spec/movie_item_spec.rb b/spec/movie_item_spec.rb
index 3a080ca..ff6aa34 100644
--- a/spec/movie_item_spec.rb
+++ b/spec/movie_item_spec.rb
@@ -1,3 +1,4 @@
+require 'rspec/autorun'
 require_relative "../movie_item"
 
 describe MovieItem do 

commit fc7a216a2308e0b3eaeec6b06b620742fdcf37eb
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 26 15:58:19 2021 +1000

    updating list.rb method watch with error handling.

diff --git a/list.rb b/list.rb
index d91d793..9a9feb5 100644
--- a/list.rb
+++ b/list.rb
@@ -198,16 +198,22 @@ class List
 
         # validate_watchlist(watchlist) = true
         def validate_watchlist(watchlist) 
+            spinner = TTY::Spinner.new(":spinner")
+            puts
             puts watchlist
             raise StandardError, "Array cannot be empty." if watchlist.empty?
-            sleep(2)
-        # else
+            spinner.auto_spin
+            sleep (3)
+            spinner.stop
+        rescue
+            spinner.auto_spin
+            sleep (2)
+            spinner.stop
+            puts "You must submit movies first before you view your To Watch List"
         #     validate_watchlist(watchlist) = false
+            sleep (2)
         end
         validate_watchlist @watchlist = []
-
-        sleep(3)
-        puts
         puts
     end
 

commit 66da091fa68906909acf52ba7435356cc6c0b712
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 26 15:44:56 2021 +1000

     updated rspec files. implemented error handling in list.rb in def watch method

diff --git a/list.rb b/list.rb
index c6f0799..d91d793 100644
--- a/list.rb
+++ b/list.rb
@@ -196,9 +196,13 @@ class List
     system 'clear'
         puts "#{@name}'s To Watch List"
 
-        def validate_watchlist(watchlist)
+        # validate_watchlist(watchlist) = true
+        def validate_watchlist(watchlist) 
             puts watchlist
             raise StandardError, "Array cannot be empty." if watchlist.empty?
+            sleep(2)
+        # else
+        #     validate_watchlist(watchlist) = false
         end
         validate_watchlist @watchlist = []
 

commit 33d44230f00d2b16a2289e366bf9b99590fed999
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 26 15:40:40 2021 +1000

     updated rspec files. implemented error handling in list.rb in def watch method

diff --git a/list.rb b/list.rb
index 07f21bb..c6f0799 100644
--- a/list.rb
+++ b/list.rb
@@ -195,15 +195,13 @@ class List
     def watch
     system 'clear'
         puts "#{@name}'s To Watch List"
-        # puts "#{@watchlist}"
-        # puts @watchlist
-        # if @watchlist == false
-        #     puts "You don't have any items to list"
-        # else
-        #     MovieItem.new(watchlist).each do |movie|
-        #         puts movie
-        #     end
-        # end
+
+        def validate_watchlist(watchlist)
+            puts watchlist
+            raise StandardError, "Array cannot be empty." if watchlist.empty?
+        end
+        validate_watchlist @watchlist = []
+
         sleep(3)
         puts
         puts
diff --git a/spec/list_spec.rb b/spec/list_spec.rb
index 49b1151..60aa1eb 100644
--- a/spec/list_spec.rb
+++ b/spec/list_spec.rb
@@ -1,17 +1,17 @@
 require_relative '../list.rb'
 require_relative '../index.rb'
 
-describe "List"
-    context "#view new user list" do 
+describe "List" do
+    context "#userlist new user list" do 
     # hash shows that this is an instance methods
 
     #before everything create a new instance
         before do 
             @mainmenu = List.new(name)
         end
-
+    
         it 'should create a new file' do
-            @mainmenu.view
+            @mainmenu.userlist
             expect(File.exist?('./lists/#{name}.txt')).to be true
         end
 
@@ -19,7 +19,7 @@ describe "List"
             expect(File.size('./lists/#{name}.txt')).to eq(0)
         end
             
-            # after use, delete
+        # after use, delete
         after(:context) do # to delete the file url
             File.delete('./lists/#{name}.txt')
         end
diff --git a/spec/movie_item_spec.rb b/spec/movie_item_spec.rb
new file mode 100644
index 0000000..3a080ca
--- /dev/null
+++ b/spec/movie_item_spec.rb
@@ -0,0 +1,15 @@
+require_relative "../movie_item"
+
+describe MovieItem do 
+    it 'should display the movie item' do
+        name = "Sound of Metal" 
+        #needs to be pulled from awards array
+        movie_item = MovieItem.new(name)
+        expect(movie_item.name).to eq(name)
+    end
+
+    it 'should create a new file' do
+        expect(@watchlist.exist?).to be true
+    end
+end
+

commit c0113516a2f41a3e0b25b36f59cb2848dda39f5a
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 26 11:39:15 2021 +1000

    rspec file testing to see if it will work. Failiure error. between list_spec and list.rb

diff --git a/spec/list_spec.rb b/spec/list_spec.rb
index 254e8f0..49b1151 100644
--- a/spec/list_spec.rb
+++ b/spec/list_spec.rb
@@ -1,4 +1,5 @@
 require_relative '../list.rb'
+require_relative '../index.rb'
 
 describe "List"
     context "#view new user list" do 
@@ -6,21 +7,21 @@ describe "List"
 
     #before everything create a new instance
         before do 
-            @mainmenu = List.new('new_user')
+            @mainmenu = List.new(name)
         end
 
         it 'should create a new file' do
             @mainmenu.view
-            expect(File.exist?('./lists/new_user.txt')).to be true
+            expect(File.exist?('./lists/#{name}.txt')).to be true
         end
 
         it 'should be empty' do
-            expect(File.size('./lists/new_user.txt')).to eq(0)
+            expect(File.size('./lists/#{name}.txt')).to eq(0)
         end
-        
-        # after use, delete
+            
+            # after use, delete
         after(:context) do # to delete the file url
-            File.delete('./lists/new_user.txt')
+            File.delete('./lists/#{name}.txt')
         end
     end
 end
\ No newline at end of file
diff --git a/spec/ruby_oscars_spec.rb b/spec/ruby_oscars_spec.rb
deleted file mode 100644
index 684c3a8..0000000
--- a/spec/ruby_oscars_spec.rb
+++ /dev/null
@@ -1,34 +0,0 @@
-# require_relative "../oscars_app"
-# require_relative "../main_menu"
-require_relative "../movie_menu"
-require_relative "../movie_item"
-# starting build from lowest level item 
-# require_relative "../randomiser"
-# require_relative "../saving_session"
-
-describe MovieItem do 
-    it 'should display the movie item' do
-        name = "Sound of Metal" 
-        #needs to be pulled from awards array
-        movie_item = MovieItem.new(name)
-        expect(movie_item.name).to eq(name)
-    end
-    # it 'should save to watch list and offer to go to list'
-    # it 'should save to fave list and offer to go to list'
-    # it 'should go back to main menu'
-end
-
-describe MovieMenu do
-    it 'should display list of movies' do
-        name = "Minari"
-        menu = MovieMenu.new
-        menu.add_item(name)
-        expect(menu.get_name(name)).to eq(name)
-    end
-    it 'should be able to add a movie item name' do
-        name = "Nomadland"
-        menu = MovieMenu.new
-        menu.add_item(name)
-        expect(menu.get_items().length).to be(1)
-    end
-end
\ No newline at end of file

commit 0e3ba9ff003b6beab3c9c3bccec0aacbc79862a8
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 26 11:26:29 2021 +1000

    removed methods.rb and movie_menu.rb as content not in user and code within not useful. Cleaning up source code

diff --git a/methods.rb b/methods.rb
deleted file mode 100644
index 6a7713b..0000000
--- a/methods.rb
+++ /dev/null
@@ -1,11 +0,0 @@
-
-class methods
-
-    def returninglist
-
-    end
-
-end
-
-# create a method for writing into a text file
-# create a method for reading that text file
diff --git a/movie_menu.rb b/movie_menu.rb
deleted file mode 100644
index b4fd77a..0000000
--- a/movie_menu.rb
+++ /dev/null
@@ -1,15 +0,0 @@
-# require_relative './movie_item'
-
-# class MovieMenu
-#     def initialize
-#         @movie_items = []
-#     end
-#     def add_item(name)
-#         movie_item = MovieItem.new(name)
-#         @movie_items << movie_item
-#     end
-#     def get_name(name)
-#         item = @movie_items.filter {|movie_item| movie_item.name == name}
-#         return item.name
-#     end
-# end
\ No newline at end of file

commit a69b6c1eabfe1a4ce8226208668786f371a70c6c
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 26 11:25:01 2021 +1000

    Input a resource in readme.md

diff --git a/README.md b/README.md
index 7676bee..4e86622 100644
--- a/README.md
+++ b/README.md
@@ -19,7 +19,7 @@ This Oscars Judge Terminal App has,
 - System Requirements,
 - Ruby 3.0.1 installed for operation,
 - Ruby Gem Bundler Install to run gem dependencies,
-- Command Line Arguments Availale.
+- Command Line Arguments available.
 
 <br/> [**Ruby 3.0.1** install information here,](https://www.ruby-lang.org/en/documentation/installation/#rubyinstaller)
 
@@ -49,7 +49,7 @@ This Oscars Judge Terminal App has,
   Debian GNU/Linux and Ubuntu use the apt package manager. You can use it like this:<br/>
   - `$ sudo apt-get install ruby-full`
 
-<br/> **Ruby Install Bundler** to manage the Oscars Judge Terminal App gem dependencies.
+<br/> **Ruby Install Bundler** to manage the Oscars Judge Terminal App gem dependencies. The app utilises the following gems: _Colorize, TTY-link, TTY-font, Pastel, TTY-spinner._
 
 - Bundler is an easy way to install all gem dependencies.
 - Check to see if you have bundler installed.
@@ -173,9 +173,10 @@ Error handling is not yet set up for **Saving Sessions**. If something goes wron
 
 ## Resources
 
-<br/>['tty-link', '~> 0.1.1'](https://github.com/piotrmurach/tty-link)
-<br/>['tty-font', '~> 0.5.0'](https://rubygems.org/gems/tty-font)
-<br/>['colorize', '~> 0.8.1'](https://rubygems.org/gems/colorize)
-<br/>['pastel', '~> 0.7.1'](https://rubygems.org/gems/pastel/versions/0.7.1)
+<br/>[Ruby Gems. 'tty-link', '~> 0.1.1'](https://github.com/piotrmurach/tty-link)
+<br/>[Ruby Gems. 'tty-font', '~> 0.5.0'](https://rubygems.org/gems/tty-font)
+<br/>[Ruby Gems. 'colorize', '~> 0.8.1'](https://rubygems.org/gems/colorize)
+<br/>[Ruby Gems. 'pastel', '~> 0.7.1'](https://rubygems.org/gems/pastel/versions/0.7.1)
+<br/>[Viking Code School. Shebangs](https://www.vikingcodeschool.com/falling-in-love-with-ruby/running-ruby-scripts#:~:text=Running%20a%20Script&text=It's%20easy%20%2D%2D%20just%20create,to%20the%20command%20line%20now!)
 
 <br/>![Bong Joon-ho saying thankyou with Oscar in hand](https://media.giphy.com/media/VhosQcv9wVK5MmXULs/giphy.gif)

commit e9c799edf8049012242977878c7af8251ba678a8
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 26 10:59:03 2021 +1000

    added spinner gem and cut down some loading code from 5 lines to 3. Applied spinners to all sections where needed.

diff --git a/Gemfile b/Gemfile
index 70c92c0..84b57eb 100644
--- a/Gemfile
+++ b/Gemfile
@@ -11,7 +11,4 @@ gem 'pastel', '~> 0.7.1'
 gem 'colorize', '~> 0.8.1'
 gem 'tty-font', '~> 0.5.0'
 gem 'tty-link', '~> 0.1.1'
-
-# gem 'launchy', '~> 2.4', '>= 2.4.3'
-# gem "whirly" # couldn't work on ruby 2+
-# gem "tty-spinner" # couldn't figure out how to work
+gem 'tty-spinner', '~> 0.9.3'
\ No newline at end of file
diff --git a/README.md b/README.md
index 28655e6..7676bee 100644
--- a/README.md
+++ b/README.md
@@ -14,10 +14,12 @@ Create:
 
 ## Installation
 
-This Oscars Judge Terminal App requires,
+This Oscars Judge Terminal App has,
 
-- Ruby 3.0.1 installed for operation.
-- Ruby Gem Bundler Install Ruby Gems: Colorize, TTY-reader.
+- System Requirements,
+- Ruby 3.0.1 installed for operation,
+- Ruby Gem Bundler Install to run gem dependencies,
+- Command Line Arguments Availale.
 
 <br/> [**Ruby 3.0.1** install information here,](https://www.ruby-lang.org/en/documentation/installation/#rubyinstaller)
 
@@ -57,7 +59,9 @@ This Oscars Judge Terminal App requires,
 <br/> **Downloading Oscars Judge** -
 You've made it to the GitHub repo! Choose to download the ZIP folder or clone the repository to your computer.
 
-- To run, find src folder and `$ bundler install` to ensure Ruby gem dependencies are all installed.
+- To run, open your terminal,
+- Locate the src folder and ensure it is your working directory,
+- Within the src directory run `$ bundler install` to ensure Ruby gem dependencies are all installed.
   - Either `$ ruby index.rb`
   - OR, use simple execution once `$ chmod +x ./run_program.sh` to run.
   - AFTER, running chmod the first time you can use `$ ./run_program.sh`.
diff --git a/index.rb b/index.rb
index d275cad..bceecfb 100755
--- a/index.rb
+++ b/index.rb
@@ -1,8 +1,11 @@
 require_relative "./list"
 require 'colorize'
 require 'tty-link'
+#tty-link gem located in movie_item.rb
 require 'tty-font'
 require 'pastel'
+require 'tty-spinner'
+
 
 # ARGV flags
 if ARGV.length > 0 
@@ -133,17 +136,17 @@ loop do
     when 6 
         mainmenu.fave
     when 7
+        spinner = TTY::Spinner.new(":spinner")
+
         group_instance = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
 
         puts
         puts "Random Movie Selector"
         puts
         puts "The random movie to watch tonight is... " 
-        sleep(1)
-        puts "."
-        sleep(1)
-        puts "."
-        sleep(1.5)
+        spinner.auto_spin
+        sleep (3)
+        spinner.stop
         puts "> " + "#{group_instance.shuffle.sample}"
         puts
         sleep(3)
diff --git a/list.rb b/list.rb
index 43f72cb..07f21bb 100644
--- a/list.rb
+++ b/list.rb
@@ -100,9 +100,6 @@ class List
             # working with files we can call each line of file through each_line
         end
         puts
-        
-        # prompt = TTY::Prompt.new
-        # prompt.ask("Enter the movie name: ")
 
         puts "Enter the movie name: ".colorize(:blue)
         print "> "
@@ -126,10 +123,6 @@ class List
         sleep(2)
         puts
 
-        # prompt = TTY::Prompt.new
-        # option = ["Back to MAIN MENU", "Save & Exit"]
-        # prompt.select("Select your next option: ", option)
-
         add_open = true
         while add_open
             puts "Select your next option:".colorize(:light_blue)
@@ -182,10 +175,6 @@ class List
         sleep(2)
         puts
 
-        # prompt = TTY::Prompt.new
-        # option = ["Back to MAIN MENU", "Save & Exit"]
-        # prompt.select("Select your next option: ", option)
-
         remove_open = true
         while remove_open
             puts "Select your next option:".colorize(:light_blue)
@@ -199,7 +188,7 @@ class List
                 #exits app
             end
         end
-        # sleep(1)
+        
         puts
     end
 
diff --git a/movie_item.rb b/movie_item.rb
index c71cc98..b9f4b47 100644
--- a/movie_item.rb
+++ b/movie_item.rb
@@ -8,6 +8,7 @@ class MovieItem
 
     def soundofmetal
     system 'clear'
+        spinner = TTY::Spinner.new
         puts "***\n * \n***".colorize(:yellow)
         puts
         puts " Sound of Metal ".colorize(:red).on_white.underline
@@ -15,6 +16,7 @@ class MovieItem
         puts "Director".colorize(:light_red) + "- Darius Marder"
         puts "Synopsis: ".colorize(:light_red) + "During a series of adrenaline-fueled one-night gigs, itinerant punk-metal drummer Ruben (Riz Ahmed) begins to experience intermittent hearing loss."
         puts "Link: ".colorize(:light_red) + TTY::Link.link_to("Sound of Metal Movie Trailer", "https://youtu.be/VFOrGkAvjAE")
+        #tty link gem 
         puts "***\n * \n***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         soundofmetal_open = true
@@ -26,20 +28,18 @@ class MovieItem
             choice = gets.chomp.to_i
             if choice == 1
                 @watchlist << "Sound of Metal"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
+
                 puts "Saved to To Watch List".colorize(:light_blue)
                 puts @watchlist
             elsif choice == 2
                 @favourite << "Sound of Metal"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
+
                 puts "Saved to Favourite List".colorize(:light_blue)
                 puts @favourite
             elsif choice == 3
@@ -55,6 +55,7 @@ class MovieItem
 
     def mank
     system 'clear'
+        spinner = TTY::Spinner.new
         puts "***\n * \n***".colorize(:yellow)
         puts
         puts " Mank ".colorize(:red).on_white.underline
@@ -73,20 +74,16 @@ class MovieItem
             choice = gets.chomp.to_i
             if choice == 1
                 @watchlist << "Mank"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
                 puts "Saved to To Watch List".colorize(:light_blue)
                 puts @watchlist
             elsif choice == 2
                 @favourite << "Mank"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
                 puts "Saved to Favourite List".colorize(:light_blue)
                 puts @favourite
             elsif choice == 3
@@ -102,6 +99,7 @@ class MovieItem
 
     def minari
     system 'clear'
+        spinner = TTY::Spinner.new
         puts "***\n * \n***".colorize(:yellow)
         puts
         puts " Minari ".colorize(:red).on_white.underline
@@ -120,20 +118,16 @@ class MovieItem
             choice = gets.chomp.to_i
             if choice == 1
                 @watchlist << "Minari"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
                 puts "Saved to To Watch List"
                 puts @watchlist
             elsif choice == 2
                 @favourite << "Minari"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
                 puts "Saved to Favourite List"
                 puts @favourite
             elsif choice == 3
@@ -149,6 +143,7 @@ class MovieItem
 
     def promising
     system 'clear'
+        spinner = TTY::Spinner.new
         puts "***\n * \n***".colorize(:yellow)
         puts
         puts " Promising Young Woman ".colorize(:red).on_white.underline
@@ -167,20 +162,16 @@ class MovieItem
             choice = gets.chomp.to_i
             if choice == 1
                 @watchlist << "Promising Young Woman"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
                 puts "Saved to To Watch List".colorize(:light_blue)
                 puts @watchlist
             elsif choice == 2
                 @favourite << "Promising Young Woman"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
                 puts "Saved to Favourite List".colorize(:light_blue)
                 puts @favourite
             elsif choice == 3
@@ -196,6 +187,7 @@ class MovieItem
 
     def thefather
     system 'clear'
+        spinner = TTY::Spinner.new
         puts "***\n * \n***".colorize(:yellow)
         puts
         puts " The Father ".colorize(:red).on_white.underline
@@ -214,20 +206,16 @@ class MovieItem
             choice = gets.chomp.to_i
             if choice == 1
                 @watchlist << "The Father"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
                 puts "Saved to To Watch List".colorize(:light_blue)
                 puts @watchlist
             elsif choice == 2
                 @favourite << "The Father"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
                 puts "Saved to Favourite List".colorize(:light_blue)
                 puts @favourite
             elsif choice == 3
@@ -243,6 +231,7 @@ class MovieItem
 
     def judas
     system 'clear'
+        spinner = TTY::Spinner.new
         puts "***\n * \n***".colorize(:yellow)
         puts
         puts " Judas and the Black Messiah ".colorize(:red).on_white.underline
@@ -261,20 +250,16 @@ class MovieItem
             choice = gets.chomp.to_i
             if choice == 1
                 @watchlist << "Judas and the Black Messiah"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
                 puts "Saved to To Watch List".colorize(:light_blue)
                 puts @watchlist
             elsif choice == 2
                 @favourite << "Judas and the Black Messiah"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
                 puts "Saved to Favourite List".colorize(:light_blue)
                 puts @favourite
             elsif choice == 3
@@ -290,6 +275,7 @@ class MovieItem
 
     def trial
     system 'clear'
+        spinner = TTY::Spinner.new
         puts "***\n * \n***".colorize(:yellow)
         puts
         puts " The Trial of the Chicago 7 ".colorize(:red).on_white.underline
@@ -308,20 +294,16 @@ class MovieItem
             choice = gets.chomp.to_i
             if choice == 1
                 @watchlist << "The Trial of the Chicago 7"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
                 puts "Saved to To Watch List".colorize(:light_blue)
                 puts @watchlist
             elsif choice == 2
                 @favourite << "The Trial of the Chicago 7"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
                 puts "Saved to Favourite List".colorize(:light_blue)
                 puts @favourite
             elsif choice == 3
@@ -337,6 +319,7 @@ class MovieItem
 
     def nomadland
     system 'clear'
+        spinner = TTY::Spinner.new
         puts "***\n * \n***".colorize(:yellow)
         puts
         puts " Nomadland ".colorize(:black).on_red.underline
@@ -356,20 +339,16 @@ class MovieItem
             choice = gets.chomp.to_i
             if choice == 1
                 @watchlist << "Nomadland"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
                 puts "Saved to To Watch List".colorize(:light_blue)
                 puts @watchlist
             elsif choice == 2
                 @favourite << "Nomadland"
-                sleep(1)
-                puts "."
-                sleep(1)
-                puts "."
-                sleep(1.5)
+                spinner.auto_spin
+                sleep (3)
+                spinner.stop
                 puts "Saved to Favourite List".colorize(:light_blue)
                 puts @favourite
             elsif choice == 3

commit 8fa643f8e4d65c9c08ffdc4af768fed16ff36b37
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 26 09:46:40 2021 +1000

    added executables, ARGV and a run_program.sh file. Updated README.md document installation process with info on flags.

diff --git a/README.md b/README.md
index 8a3b337..28655e6 100644
--- a/README.md
+++ b/README.md
@@ -50,10 +50,24 @@ This Oscars Judge Terminal App requires,
 <br/> **Ruby Install Bundler** to manage the Oscars Judge Terminal App gem dependencies.
 
 - Bundler is an easy way to install all gem dependencies.
-- `$ bundler install`
-  <br/>
-  <br/>
-  <br/>
+- Check to see if you have bundler installed.
+- `$ bundler -v`
+- OR install, `$ gem install bundler`
+
+<br/> **Downloading Oscars Judge** -
+You've made it to the GitHub repo! Choose to download the ZIP folder or clone the repository to your computer.
+
+- To run, find src folder and `$ bundler install` to ensure Ruby gem dependencies are all installed.
+  - Either `$ ruby index.rb`
+  - OR, use simple execution once `$ chmod +x ./run_program.sh` to run.
+  - AFTER, running chmod the first time you can use `$ ./run_program.sh`.
+- You can find other information about the app by using the following flags,
+  - `$ ruby index.rb - help` for help
+  - `$ ruby index.rb - info` for info
+  - `$ ruby index.rb - instructions` for instructions on how to play
+    <br/>
+    <br/>
+    <br/>
 
 # Oscars Judge Terminal App
 
@@ -153,4 +167,11 @@ The session will end and **Saving Session** feature will execute. Error handling
 The user must move through the app after creating their profile to get to the final feature. On exit of the app, the user does not have to take any additional steps for the **Saving Sessions** to execute as it is a built in save automation. The control flow asks, If exit - then save to file.
 Error handling is not yet set up for **Saving Sessions**. If something goes wrong on exit or the save does not occur a message will display 'save error - goodbye'.
 
+## Resources
+
+<br/>['tty-link', '~> 0.1.1'](https://github.com/piotrmurach/tty-link)
+<br/>['tty-font', '~> 0.5.0'](https://rubygems.org/gems/tty-font)
+<br/>['colorize', '~> 0.8.1'](https://rubygems.org/gems/colorize)
+<br/>['pastel', '~> 0.7.1'](https://rubygems.org/gems/pastel/versions/0.7.1)
+
 <br/>![Bong Joon-ho saying thankyou with Oscar in hand](https://media.giphy.com/media/VhosQcv9wVK5MmXULs/giphy.gif)
diff --git a/index.rb b/index.rb
old mode 100644
new mode 100755
index 931d210..d275cad
--- a/index.rb
+++ b/index.rb
@@ -1,24 +1,59 @@
-# when the program starts, ask user name
-# create a new list for a new user
-#when a new list is created it is called by the name of the user
-
-#1. View 2021 Best Picture Films
-#2. Add a new task to the list
-#3. Remove a tast from the list
-#4. View to Watch List
-#5. View Favourite List
-#6. Randomise
-#7. Save & Exit
-
-
 require_relative "./list"
-# require_relative "./awards"
 require 'colorize'
 require 'tty-link'
 require 'tty-font'
 require 'pastel'
-# require_relative "/.user_profile"
 
+# ARGV flags
+if ARGV.length > 0 
+    flag, *rest = ARGV
+    ARGV.clear
+    # clear out arguments
+    case flag
+    when '-help'
+        font = TTY::Font.new(:doom) # implementing font gem
+        pastel = Pastel.new # implementing pastel gem
+        puts pastel.yellow(font.write("OSCARS JUDGE"))
+        puts " HELP ".colorize(:black).on_red.underline
+        puts
+        puts "> This program is using Ruby version: #{RUBY_VERSION}"
+        puts "> Gems required for install..."
+        puts ">> 'colorize', '~> 0.8.1' " + "|".colorize(:yellow) + " 'tty-link', '~> 0.1.1' " + "|".colorize(:yellow) + " 'tty-font', '~> 0.5.0' " + "|".colorize(:yellow) + " 'pastel', '~> 0.7.1' "
+        puts
+        puts "See further documentation in README.md"
+        puts "***\n * \n***".colorize(:yellow)
+        sleep(3)
+        exit
+    when '-info'
+        font = TTY::Font.new(:doom) # implementing font gem
+        pastel = Pastel.new # implementing pastel gem
+        puts pastel.yellow(font.write("OSCARS JUDGE"))
+        puts " INFO ".colorize(:black).on_green.underline
+        puts
+        puts "> This terminal app is created by Bella Leber Smeaton"
+        puts TTY::Link.link_to("> Find the GitHub Repo here", "https://github.com/leberSmeaton/portfolioT1A3".colorize(:yellow))
+        puts "***\n * \n***".colorize(:yellow)
+        sleep(3)
+        exit
+    when '-instructions'
+        font = TTY::Font.new(:doom) # implementing font gem
+        pastel = Pastel.new # implementing pastel gem
+        puts pastel.yellow(font.write("OSCARS JUDGE"))
+        puts " INSTRUCTIONS ".colorize(:black).on_yellow.underline
+        puts
+        puts "> Input your name to create a profile."
+        puts "> Update your own personalised movie list."
+        puts "> Check out award winning movies and nominees from the Academy Awards."
+        puts "> Create to watch lists and favourite lists."
+        puts "> Become an Oscars Judge".colorize(:yellow)
+        puts "***\n * \n***".colorize(:yellow)
+        sleep(3)
+        exit
+    else
+        puts 'Invalid argument, see readme for options'
+        exit
+    end
+end
 
 def title 
     font = TTY::Font.new(:doom) # implementing font gem
@@ -33,9 +68,10 @@ end
 def instructions
     # need to implement tty-reader
     puts "INSTRUCTIONS".colorize(:blue)
-    puts "Input your name to create a profile."
+    puts "Input your name to create a profile, or type an existing one."
     puts "Check out award winning movies."
     puts "Create to watch lists and favourite lists."
+    puts "Randomise movie to watch."
     puts "***\n * \n***".colorize(:yellow)
 end
 
@@ -67,7 +103,7 @@ def menu
     puts "8: Exit App"
     puts "***\n * \n***".colorize(:yellow)
 end
-# ------------------------ main body ------------------------
+# ------------ main body ------------
 
 system 'clear'
 title
diff --git a/list.rb b/list.rb
index 4867d00..43f72cb 100644
--- a/list.rb
+++ b/list.rb
@@ -11,10 +11,8 @@ class List
     end
 
     def userlist
-        puts
         puts "#{@name}'s full list:".colorize(:blue)
         puts
-
         #reading from a file instead of array
         if file_exist? 
             unless file_empty? #if not empty open it
@@ -55,7 +53,6 @@ class List
             puts "7: The Trial of the Chicago 7"
             puts "8: Nomadland - Winner".colorize(:cyan)
             puts
-            puts
             puts "9: Back to MAIN MENU"
             puts "***\n * \n***".colorize(:yellow)
         end
@@ -209,7 +206,6 @@ class List
     def watch
     system 'clear'
         puts "#{@name}'s To Watch List"
-        
         # puts "#{@watchlist}"
         # puts @watchlist
         # if @watchlist == false
diff --git a/lists/Bella.txt b/lists/Bella.txt
index c201637..ab4998a 100644
--- a/lists/Bella.txt
+++ b/lists/Bella.txt
@@ -7,10 +7,5 @@ Drive
 Between the Pines
 Harry Potter
 Spiderman
-When Harry Met Sally
 Anaconda
-Yellow
-*
-sound of metal
-*
 Drive
diff --git a/run_program.sh b/run_program.sh
new file mode 100755
index 0000000..046dbf0
--- /dev/null
+++ b/run_program.sh
@@ -0,0 +1,7 @@
+#!/bin/bash
+echo "....."
+echo "...."
+echo "..."
+echo ".."
+echo "."
+ruby index.rb
\ No newline at end of file

commit 4b0d18980c79edf695cbb335e6ec0ffda43eae53
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 26 00:10:26 2021 +1000

    trying to find out how to call out watchlist movieitem class instance in list

diff --git a/index.rb b/index.rb
index 761e4a4..931d210 100644
--- a/index.rb
+++ b/index.rb
@@ -37,19 +37,13 @@ def instructions
     puts "Check out award winning movies."
     puts "Create to watch lists and favourite lists."
     puts "***\n * \n***".colorize(:yellow)
-    # wait 3 seconds
 end
 
 def who_is_watching
-    # prompt = TTY::Prompt.new
-
     puts "Who is watching?"
     puts "> Bella"
-    # I want to add names to this list
-    # I want to loop through the file_path txt file names if they exist to be able to select them. 
     puts "> New User"
     puts 
-    # prompt.ask("Type your name, using a-z characters.", required: true)
     puts "Type your name, using a-z characters.".colorize(:blue)
     puts
 end
@@ -73,31 +67,23 @@ def menu
     puts "8: Exit App"
     puts "***\n * \n***".colorize(:yellow)
 end
-# ------------------------
-# main body
-# ------------------------
+# ------------------------ main body ------------------------
 
 system 'clear'
 title
 sleep(1)
 instructions
 sleep(2)
-# wait 3 seconds
 who_is_watching
 
 name = gets.strip.downcase.capitalize
 puts ">>>>> Thanks for joining us #{name}"
-# wait 2 seconds
 mainmenu = List.new(name)
 sleep(2)
 
 loop do
-    #start 
-    
     menu
     case gets.to_i
-    # view list first then create view best picture.
-    # best picture just write file path
     when 1
         mainmenu.userlist
     when 2 
@@ -127,7 +113,6 @@ loop do
         sleep(3)
     when 8
         exit
-        # quit_program
     end
 end
 system 'clear'
diff --git a/list.rb b/list.rb
index 0e2c85a..4867d00 100644
--- a/list.rb
+++ b/list.rb
@@ -7,8 +7,6 @@ class List
         @name = name
         @file_path = "./lists/#{name}.txt" 
         @list = file_to_array(@file_path)
-        @watchlist = ['empty']
-        @favourite = ['empty']
         # passing in name as arguement or instance variable@ 
     end
 
@@ -62,7 +60,7 @@ class List
             puts "***\n * \n***".colorize(:yellow)
         end
         
-        movieitemselection = MovieItem.new
+        movieitemselection = MovieItem.new(@watchlist, @favourite)
         
         viewbestpicture_open = true
         while viewbestpicture_open
@@ -211,12 +209,16 @@ class List
     def watch
     system 'clear'
         puts "#{@name}'s To Watch List"
-        puts
-        if @watchlist == ['empty']
-            puts "You don't have any items to list"
-        else
-            puts @watchlist
-        end
+        
+        # puts "#{@watchlist}"
+        # puts @watchlist
+        # if @watchlist == false
+        #     puts "You don't have any items to list"
+        # else
+        #     MovieItem.new(watchlist).each do |movie|
+        #         puts movie
+        #     end
+        # end
         sleep(3)
         puts
         puts
@@ -226,7 +228,7 @@ class List
     system 'clear'
         puts "#{@name}'s To Watch List"
         puts
-        if @favourite == ['empty']
+        if @favourite == false
             puts "You don't have any items to list"
         else
             puts @favourite
diff --git a/movie_item.rb b/movie_item.rb
index 9d873c3..c71cc98 100644
--- a/movie_item.rb
+++ b/movie_item.rb
@@ -1,10 +1,9 @@
 class MovieItem
-#     attr_accessor :watchlist
+    attr_accessor :watchlist, :favourite
     
-    def initialize
-#         # @moviename = moviename
-        # @watchlist = []    
-        # @favourite = []
+    def initialize(watchlist, favourite)
+        @watchlist = []    
+        @favourite = []
     end
 
     def soundofmetal
@@ -383,4 +382,4 @@ class MovieItem
             puts "***\n * \n***".colorize(:yellow)
         end
     end
-end
\ No newline at end of file
+end

commit c11f9893558da60de5aa10dd359949ca7c379948
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Tue May 25 23:36:11 2021 +1000

    simplified and DRY the syntax for dividers, using line breaks in one line of code instead of 3 lines of code

diff --git a/dividers.rb b/dividers.rb
deleted file mode 100644
index a2f7f06..0000000
--- a/dividers.rb
+++ /dev/null
@@ -1,19 +0,0 @@
-# class Dividers
-#     attr_reader :stardivider
-
-#     def initialize
-#         @stardivider = stardivider
-#     end
-
-#     def stardivider
-#         @stardivider << "***"
-#         # , " * ", "***"
-#     end
-# end
-
-# # puts @stardivider
-# # puts stardivider
-# # puts Dividers
-# # Dividers
-# # @stardivider
-# stardivider
diff --git a/index.rb b/index.rb
index a12df03..761e4a4 100644
--- a/index.rb
+++ b/index.rb
@@ -27,18 +27,16 @@ def title
     puts "Welcome to Oscars Judge Terminal App!".colorize(:red) # implementing colorize gem
     puts "Become your own movie critic!"
     puts
-    puts "***".colorize(:yellow)
-    puts " * ".colorize(:light_yellow)
-    puts "***".colorize(:yellow)
+    puts "***\n * \n***".colorize(:yellow)
 end
 
 def instructions
     # need to implement tty-reader
     puts "INSTRUCTIONS".colorize(:blue)
-    puts "Use the UP and DOWN arrows to move to an option, ENTER to select."
-    puts "***".colorize(:yellow)
-    puts " * ".colorize(:light_yellow)
-    puts "***".colorize(:yellow)
+    puts "Input your name to create a profile."
+    puts "Check out award winning movies."
+    puts "Create to watch lists and favourite lists."
+    puts "***\n * \n***".colorize(:yellow)
     # wait 3 seconds
 end
 
@@ -57,9 +55,7 @@ def who_is_watching
 end
 
 def menu
-    puts "***".colorize(:yellow)
-    puts " * ".colorize(:light_yellow)
-    puts "***".colorize(:yellow)
+    puts "***\n * \n***".colorize(:yellow)
     puts "MAIN MENU"
     puts "Please choose an option.".colorize(:blue)
     puts
@@ -75,9 +71,7 @@ def menu
     puts
     puts
     puts "8: Exit App"
-    puts "***".colorize(:yellow)
-    puts " * ".colorize(:light_yellow)
-    puts "***".colorize(:yellow)
+    puts "***\n * \n***".colorize(:yellow)
 end
 # ------------------------
 # main body
diff --git a/list.rb b/list.rb
index e254572..0e2c85a 100644
--- a/list.rb
+++ b/list.rb
@@ -43,12 +43,6 @@ class List
     system 'clear'
         def bestmenu
             puts
-
-            # prompt = TTY::Prompt.new
-            # best_menu = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
-            # choose_a_film_option = "Please choose a film option.".colorize(:blue)
-            # prompt.multi_select(choose_a_film_option, best_menu)
-
             puts
             puts "2021 Best Picture Films:"
             puts "Please choose an option.".colorize(:blue)
@@ -65,9 +59,7 @@ class List
             puts
             puts
             puts "9: Back to MAIN MENU"
-            puts "***".colorize(:yellow)
-            puts " * ".colorize(:light_yellow)
-            puts "***".colorize(:yellow)
+            puts "***\n * \n***".colorize(:yellow)
         end
         
         movieitemselection = MovieItem.new
@@ -220,7 +212,7 @@ class List
     system 'clear'
         puts "#{@name}'s To Watch List"
         puts
-        if @watchlist = ['empty']
+        if @watchlist == ['empty']
             puts "You don't have any items to list"
         else
             puts @watchlist
@@ -234,7 +226,7 @@ class List
     system 'clear'
         puts "#{@name}'s To Watch List"
         puts
-        if @favourite = ['empty']
+        if @favourite == ['empty']
             puts "You don't have any items to list"
         else
             puts @favourite
diff --git a/movie_item.rb b/movie_item.rb
index 32ff4f5..9d873c3 100644
--- a/movie_item.rb
+++ b/movie_item.rb
@@ -1,24 +1,22 @@
-# require_relative './list'
-
 class MovieItem
 #     attr_accessor :watchlist
     
     def initialize
 #         # @moviename = moviename
-        @watchlist = []    
-        @favourite = []
+        # @watchlist = []    
+        # @favourite = []
     end
 
     def soundofmetal
     system 'clear'
+        puts "***\n * \n***".colorize(:yellow)
+        puts
         puts " Sound of Metal ".colorize(:red).on_white.underline
         puts "2021".colorize(:light_red) + "- Best Picture Nominee"
         puts "Director".colorize(:light_red) + "- Darius Marder"
         puts "Synopsis: ".colorize(:light_red) + "During a series of adrenaline-fueled one-night gigs, itinerant punk-metal drummer Ruben (Riz Ahmed) begins to experience intermittent hearing loss."
         puts "Link: ".colorize(:light_red) + TTY::Link.link_to("Sound of Metal Movie Trailer", "https://youtu.be/VFOrGkAvjAE")
-        puts "***".colorize(:yellow)
-        puts " * ".colorize(:light_yellow)
-        puts "***".colorize(:yellow)
+        puts "***\n * \n***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         soundofmetal_open = true
         while soundofmetal_open
@@ -52,22 +50,20 @@ class MovieItem
                 exit
                 #exits app
             end
-            puts "***".colorize(:yellow)
-            puts " * ".colorize(:light_yellow)
-            puts "***".colorize(:yellow)
+            puts "***\n * \n***".colorize(:yellow)
         end
     end
 
     def mank
     system 'clear'
+        puts "***\n * \n***".colorize(:yellow)
+        puts
         puts " Mank ".colorize(:red).on_white.underline
         puts "Director".colorize(:light_red) + " - David Fincher"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + " - Mank is a 2020 American biographical drama film about screenwriter Herman J. Mankiewicz and his development of the screenplay for Citizen Kane (1941)."
         puts "Link: ".colorize(:light_red) + TTY::Link.link_to("Mank Movie Trailer", "https://youtu.be/aSfX-nrg-lI")
-        puts "***".colorize(:yellow)
-        puts " * ".colorize(:light_yellow)
-        puts "***".colorize(:yellow)
+        puts "***\n * \n***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         mank_open = true
         while mank_open
@@ -101,22 +97,20 @@ class MovieItem
                 exit
                 #exits app
             end
-            puts "***".colorize(:yellow)
-            puts " * ".colorize(:light_yellow)
-            puts "***".colorize(:yellow)
+            puts "***\n * \n***".colorize(:yellow)
         end
     end
 
     def minari
     system 'clear'
+        puts "***\n * \n***".colorize(:yellow)
+        puts
         puts " Minari ".colorize(:red).on_white.underline
         puts "Director".colorize(:light_red) + " - Lee Isaac Chung"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + " - A tender and sweeping story about what roots us, Minari follows a Korean-American family that moves to a tiny Arkansas farm in search of their own American dream."
         puts "Link: ".colorize(:light_red) + TTY::Link.link_to("Minari Movie Trailer", "https://youtu.be/KQ0gFidlro8")
-        puts "***".colorize(:yellow)
-        puts " * ".colorize(:light_yellow)
-        puts "***".colorize(:yellow)
+        puts "***\n * \n***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         minari_open = true
         while minari_open
@@ -150,22 +144,20 @@ class MovieItem
                 exit
                 #exits app
             end
-            puts "***".colorize(:yellow)
-            puts " * ".colorize(:light_yellow)
-            puts "***".colorize(:yellow)
+            puts "***\n * \n***".colorize(:yellow)
         end
     end
 
     def promising
     system 'clear'
+        puts "***\n * \n***".colorize(:yellow)
+        puts
         puts " Promising Young Woman ".colorize(:red).on_white.underline
         puts "Director".colorize(:light_red) + " - Emerald Fennell"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + " - The film stars Carey Mulligan as a vigilante seeking to avenge the death of her best friend who was a rape victim."
         puts "Link: ".colorize(:light_red) + TTY::Link.link_to("Promising Young Woman movie trailer", "https://youtu.be/KQ0gFidlro8")
-        puts "***".colorize(:yellow)
-        puts " * ".colorize(:light_yellow)
-        puts "***".colorize(:yellow)
+        puts "***\n * \n***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         promising_open = true
         while promising_open
@@ -199,22 +191,20 @@ class MovieItem
                 exit
                 #exits app
             end
-            puts "***".colorize(:yellow)
-            puts " * ".colorize(:light_yellow)
-            puts "***".colorize(:yellow)
+            puts "***\n * \n***".colorize(:yellow)
         end
     end
 
     def thefather
     system 'clear'
+        puts "***\n * \n***".colorize(:yellow)
+        puts
         puts " The Father ".colorize(:red).on_white.underline
         puts "Director".colorize(:light_red) + " - Florian Zeller"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + " - Based on the acclaimed, award-winning play, The Father starts out as a deceptively simple drama hinged on a deceptively familiar dynamic."
         puts "Link: ".colorize(:light_red) + TTY::Link.link_to("The Father movie trailer", "https://youtu.be/4TZb7YfK-JI")
-        puts "***".colorize(:yellow)
-        puts " * ".colorize(:light_yellow)
-        puts "***".colorize(:yellow)
+        puts "***\n * \n***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         thefather_open = true
         while thefather_open
@@ -248,22 +238,20 @@ class MovieItem
                 exit
                 #exits app
             end
-            puts "***".colorize(:yellow)
-            puts " * ".colorize(:light_yellow)
-            puts "***".colorize(:yellow)
+            puts "***\n * \n***".colorize(:yellow)
         end
     end
 
     def judas
     system 'clear'
+        puts "***\n * \n***".colorize(:yellow)
+        puts
         puts " Judas and the Black Messiah ".colorize(:red).on_white.underline
         puts "Director".colorize(:light_red) + " - Shaka King"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + " - FBI informant William O'Neal infiltrates the Illinois Black Panther Party and is tasked with keeping tabs on their charismatic leader, Chairman Fred Hampton."
         puts "Link: ".colorize(:light_red) + TTY::Link.link_to("Judas and the Black Messiah movie trailer", "https://youtu.be/sSjtGqRXQ9Y")
-        puts "***".colorize(:yellow)
-        puts " * ".colorize(:light_yellow)
-        puts "***".colorize(:yellow)
+        puts "***\n * \n***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         judas_open = true
         while judas_open
@@ -297,22 +285,20 @@ class MovieItem
                 exit
                 #exits app
             end
-            puts "***".colorize(:yellow)
-            puts " * ".colorize(:light_yellow)
-            puts "***".colorize(:yellow)
+            puts "***\n * \n***".colorize(:yellow)
         end
     end
 
     def trial
     system 'clear'
+        puts "***\n * \n***".colorize(:yellow)
+        puts
         puts " The Trial of the Chicago 7 ".colorize(:red).on_white.underline
         puts "Director".colorize(:light_red) + " - Aaron Sorkin"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + " - In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago."
         puts "Link: ".colorize(:light_red) + TTY::Link.link_to("The Trial of the Chicago 7 movie trailer", "https://youtu.be/FVb6EdKDBfU")
-        puts "***".colorize(:yellow)
-        puts " * ".colorize(:light_yellow)
-        puts "***".colorize(:yellow)
+        puts "***\n * \n***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         trial_open = true
         while trial_open
@@ -346,23 +332,20 @@ class MovieItem
                 exit
                 #exits app
             end
-            puts "***".colorize(:yellow)
-            puts " * ".colorize(:light_yellow)
-            puts "***".colorize(:yellow)
+            puts "***\n * \n***".colorize(:yellow)
         end
     end
 
     def nomadland
     system 'clear'
+        puts "***\n * \n***".colorize(:yellow)
         puts
         puts " Nomadland ".colorize(:black).on_red.underline
         puts "Director".colorize(:light_red) + "- Chloe Zhao"
         puts "2021".colorize(:light_red) + "- Best Picture Winner" + " * * * ".colorize(:red)
         puts "Synopsis: ".colorize(:light_red) + " - Nomadland is a surprisingly balanced look at the van living, nomadic life within America."
         puts "Link: ".colorize(:light_red) + TTY::Link.link_to("Nomadland movie trailer", "https://youtu.be/6sxCFZ8_d84")
-        puts "***".colorize(:yellow)
-        puts " * ".colorize(:light_yellow)
-        puts "***".colorize(:yellow)
+        puts "***\n * \n***".colorize(:yellow)
         puts
         puts "Please choose an option.".colorize(:blue)
         nomadland_open = true
@@ -397,9 +380,7 @@ class MovieItem
                 exit
                 #exits app
             end
-            puts "***".colorize(:yellow)
-            puts " * ".colorize(:light_yellow)
-            puts "***".colorize(:yellow)
+            puts "***\n * \n***".colorize(:yellow)
         end
     end
 end
\ No newline at end of file

commit 0c50bcbd170e8d27b2a6e276b0af78ff521a6dec
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Tue May 25 22:37:02 2021 +1000

    continuing to remove unneeded ttyprompts

diff --git a/list.rb b/list.rb
index 9bfa7e1..e254572 100644
--- a/list.rb
+++ b/list.rb
@@ -44,10 +44,10 @@ class List
         def bestmenu
             puts
 
-            prompt = TTY::Prompt.new
-            best_menu = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
-            choose_a_film_option = "Please choose a film option.".colorize(:blue)
-            prompt.multi_select(choose_a_film_option, best_menu)
+            # prompt = TTY::Prompt.new
+            # best_menu = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
+            # choose_a_film_option = "Please choose a film option.".colorize(:blue)
+            # prompt.multi_select(choose_a_film_option, best_menu)
 
             puts
             puts "2021 Best Picture Films:"
@@ -114,8 +114,8 @@ class List
         end
         puts
         
-        prompt = TTY::Prompt.new
-        prompt.ask("Enter the movie name: ")
+        # prompt = TTY::Prompt.new
+        # prompt.ask("Enter the movie name: ")
 
         puts "Enter the movie name: ".colorize(:blue)
         print "> "
@@ -139,9 +139,9 @@ class List
         sleep(2)
         puts
 
-        prompt = TTY::Prompt.new
-        option = ["Back to MAIN MENU", "Save & Exit"]
-        prompt.select("Select your next option: ", option)
+        # prompt = TTY::Prompt.new
+        # option = ["Back to MAIN MENU", "Save & Exit"]
+        # prompt.select("Select your next option: ", option)
 
         add_open = true
         while add_open
@@ -195,9 +195,9 @@ class List
         sleep(2)
         puts
 
-        prompt = TTY::Prompt.new
-        option = ["Back to MAIN MENU", "Save & Exit"]
-        prompt.select("Select your next option: ", option)
+        # prompt = TTY::Prompt.new
+        # option = ["Back to MAIN MENU", "Save & Exit"]
+        # prompt.select("Select your next option: ", option)
 
         remove_open = true
         while remove_open
diff --git a/movie_item.rb b/movie_item.rb
index cd97f8d..32ff4f5 100644
--- a/movie_item.rb
+++ b/movie_item.rb
@@ -23,7 +23,6 @@ class MovieItem
         soundofmetal_open = true
         while soundofmetal_open
             puts "1: > Save to To Watch List"
-            string2 << "Sound"
             puts "2: > Save to Favourite List"
             puts "3: > Back to Best Picture Menu"
             puts "4: > Exit App"

commit 94c4fd972fe73bf977621021a0a84b1292ca532d
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Tue May 25 18:43:10 2021 +1000

    went back and removed tty-promt as I broke my code. Input gem pastel, to reformat the title and add my 4th gem. App is working again.

diff --git a/Gemfile b/Gemfile
index d7d3fb6..70c92c0 100644
--- a/Gemfile
+++ b/Gemfile
@@ -7,7 +7,7 @@ git_source(:github) { |repo_name| "https://github.com/#{repo_name}" }
 # gem "rails"
 
 gem "rspec", "~> 3.10"
-gem "tty-prompt"
+gem 'pastel', '~> 0.7.1'
 gem 'colorize', '~> 0.8.1'
 gem 'tty-font', '~> 0.5.0'
 gem 'tty-link', '~> 0.1.1'
diff --git a/Gemfile.lock b/Gemfile.lock
index 7dbce1d..ad9e807 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -3,7 +3,9 @@ GEM
   specs:
     colorize (0.8.1)
     diff-lcs (1.4.4)
-    pastel (0.8.0)
+    equatable (0.7.0)
+    pastel (0.7.4)
+      equatable (~> 0.6)
       tty-color (~> 0.5)
     rspec (3.10.0)
       rspec-core (~> 3.10.0)
@@ -19,28 +21,18 @@ GEM
       rspec-support (~> 3.10.0)
     rspec-support (3.10.2)
     tty-color (0.6.0)
-    tty-cursor (0.7.1)
     tty-font (0.5.0)
     tty-link (0.1.1)
-    tty-prompt (0.23.1)
-      pastel (~> 0.8)
-      tty-reader (~> 0.8)
-    tty-reader (0.9.0)
-      tty-cursor (~> 0.7)
-      tty-screen (~> 0.8)
-      wisper (~> 2.0)
-    tty-screen (0.8.1)
-    wisper (2.0.1)
 
 PLATFORMS
   x86_64-darwin-20
 
 DEPENDENCIES
   colorize (~> 0.8.1)
+  pastel (~> 0.7.1)
   rspec (~> 3.10)
   tty-font (~> 0.5.0)
   tty-link (~> 0.1.1)
-  tty-prompt
 
 BUNDLED WITH
    2.2.17
diff --git a/index.rb b/index.rb
index 5368410..a12df03 100644
--- a/index.rb
+++ b/index.rb
@@ -14,18 +14,16 @@
 require_relative "./list"
 # require_relative "./awards"
 require 'colorize'
-require 'tty-prompt'
 require 'tty-link'
 require 'tty-font'
+require 'pastel'
 # require_relative "/.user_profile"
 
 
-
-
 def title 
     font = TTY::Font.new(:doom) # implementing font gem
-    pastel = Pastel.new
-    puts pastel.yellow(font.write("OSCARS JUDGE", letter_spacing: 1))
+    pastel = Pastel.new # implementing pastel gem
+    puts pastel.yellow(font.write("OSCARS JUDGE"))
     puts "Welcome to Oscars Judge Terminal App!".colorize(:red) # implementing colorize gem
     puts "Become your own movie critic!"
     puts
@@ -45,10 +43,9 @@ def instructions
 end
 
 def who_is_watching
-    prompt = TTY::Prompt.new
-    select_who_is_watching = "Who is watching?"
-    select_user = ["Bella", "New User"]
-    prompt.select(select_who_is_watching, select_user)
+    # prompt = TTY::Prompt.new
+
+    puts "Who is watching?"
     puts "> Bella"
     # I want to add names to this list
     # I want to loop through the file_path txt file names if they exist to be able to select them. 
@@ -60,32 +57,27 @@ def who_is_watching
 end
 
 def menu
-    prompt = TTY::Prompt.new
-    mainmenu_choice = {"Your Profile User List" => 1, "Add a movie to your User list" => 2, "Remove a movie from your User list" => 3, "The 2021 Best Picture Films" => 4, "View To Watch List" => 5, "View Favourite List" => 6, "Random Movie Selector" => 7, "Save & Exit" => 8}
-    choose_an_option = "Please choose an option.".colorize(:blue)
-    
     puts "***".colorize(:yellow)
     puts " * ".colorize(:light_yellow)
     puts "***".colorize(:yellow)
     puts "MAIN MENU"
-    prompt.select(choose_an_option, mainmenu_choice)
-
-    # puts
-    # puts "1: Your Profile User List"
-    # puts "2: Add a movie to your User list"
-    # puts "3: Remove a movie from your User list"
-    # puts
-    # puts "4: The 2021 Best Picture Films"
-    # puts "5: View To Watch List"
-    # puts "6: View Favourite List"
-    # puts
-    # puts "7: Random Movie Selector"
-    # puts
-    # puts
-    # puts "8: Exit App"
-    # puts "***".colorize(:yellow)
-    # puts " * ".colorize(:light_yellow)
-    # puts "***".colorize(:yellow)
+    puts "Please choose an option.".colorize(:blue)
+    puts
+    puts "1: Your Profile User List"
+    puts "2: Add a movie to your User list"
+    puts "3: Remove a movie from your User list"
+    puts
+    puts "4: The 2021 Best Picture Films"
+    puts "5: View To Watch List"
+    puts "6: View Favourite List"
+    puts
+    puts "7: Random Movie Selector"
+    puts
+    puts
+    puts "8: Exit App"
+    puts "***".colorize(:yellow)
+    puts " * ".colorize(:light_yellow)
+    puts "***".colorize(:yellow)
 end
 # ------------------------
 # main body
@@ -105,12 +97,11 @@ puts ">>>>> Thanks for joining us #{name}"
 mainmenu = List.new(name)
 sleep(2)
 
-
 loop do
     #start 
     
     menu
-    case prompt.select
+    case gets.to_i
     # view list first then create view best picture.
     # best picture just write file path
     when 1
@@ -126,7 +117,7 @@ loop do
     when 6 
         mainmenu.fave
     when 7
-        movie_array = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
+        group_instance = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
 
         puts
         puts "Random Movie Selector"
@@ -137,7 +128,7 @@ loop do
         sleep(1)
         puts "."
         sleep(1.5)
-        puts "> " + "#{movie_array.shuffle.sample}"
+        puts "> " + "#{group_instance.shuffle.sample}"
         puts
         sleep(3)
     when 8
diff --git a/lists/Bella.txt b/lists/Bella.txt
index fe54885..c201637 100644
--- a/lists/Bella.txt
+++ b/lists/Bella.txt
@@ -10,3 +10,7 @@ Spiderman
 When Harry Met Sally
 Anaconda
 Yellow
+*
+sound of metal
+*
+Drive
diff --git a/methods.rb b/methods.rb
new file mode 100644
index 0000000..6a7713b
--- /dev/null
+++ b/methods.rb
@@ -0,0 +1,11 @@
+
+class methods
+
+    def returninglist
+
+    end
+
+end
+
+# create a method for writing into a text file
+# create a method for reading that text file
diff --git a/movie_item.rb b/movie_item.rb
index 32ff4f5..cd97f8d 100644
--- a/movie_item.rb
+++ b/movie_item.rb
@@ -23,6 +23,7 @@ class MovieItem
         soundofmetal_open = true
         while soundofmetal_open
             puts "1: > Save to To Watch List"
+            string2 << "Sound"
             puts "2: > Save to Favourite List"
             puts "3: > Back to Best Picture Menu"
             puts "4: > Exit App"

commit 8eb34ddb2555f2745bd6529cffe081ae946acd85
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Tue May 25 15:19:17 2021 +1000

    added two more gems tty font and tty link, applying tty prompt poorly

diff --git a/Gemfile b/Gemfile
index d3900ef..d7d3fb6 100644
--- a/Gemfile
+++ b/Gemfile
@@ -7,8 +7,11 @@ git_source(:github) { |repo_name| "https://github.com/#{repo_name}" }
 # gem "rails"
 
 gem "rspec", "~> 3.10"
-gem "tty-reader"
+gem "tty-prompt"
 gem 'colorize', '~> 0.8.1'
+gem 'tty-font', '~> 0.5.0'
+gem 'tty-link', '~> 0.1.1'
+
 # gem 'launchy', '~> 2.4', '>= 2.4.3'
 # gem "whirly" # couldn't work on ruby 2+
 # gem "tty-spinner" # couldn't figure out how to work
diff --git a/Gemfile.lock b/Gemfile.lock
index d002da9..7dbce1d 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -3,6 +3,8 @@ GEM
   specs:
     colorize (0.8.1)
     diff-lcs (1.4.4)
+    pastel (0.8.0)
+      tty-color (~> 0.5)
     rspec (3.10.0)
       rspec-core (~> 3.10.0)
       rspec-expectations (~> 3.10.0)
@@ -16,7 +18,13 @@ GEM
       diff-lcs (>= 1.2.0, < 2.0)
       rspec-support (~> 3.10.0)
     rspec-support (3.10.2)
+    tty-color (0.6.0)
     tty-cursor (0.7.1)
+    tty-font (0.5.0)
+    tty-link (0.1.1)
+    tty-prompt (0.23.1)
+      pastel (~> 0.8)
+      tty-reader (~> 0.8)
     tty-reader (0.9.0)
       tty-cursor (~> 0.7)
       tty-screen (~> 0.8)
@@ -30,7 +38,9 @@ PLATFORMS
 DEPENDENCIES
   colorize (~> 0.8.1)
   rspec (~> 3.10)
-  tty-reader
+  tty-font (~> 0.5.0)
+  tty-link (~> 0.1.1)
+  tty-prompt
 
 BUNDLED WITH
    2.2.17
diff --git a/index.rb b/index.rb
index 5073a71..5368410 100644
--- a/index.rb
+++ b/index.rb
@@ -14,17 +14,19 @@
 require_relative "./list"
 # require_relative "./awards"
 require 'colorize'
+require 'tty-prompt'
+require 'tty-link'
+require 'tty-font'
 # require_relative "/.user_profile"
 
+
+
+
 def title 
-    puts "░█████╗░░██████╗░█████╗░░█████╗░██████╗░░██████╗  ░░░░░██╗██╗░░░██╗██████╗░░██████╗░███████╗"
-    puts "██╔══██╗██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝  ░░░░░██║██║░░░██║██╔══██╗██╔════╝░██╔════╝"
-    puts "██║░░██║╚█████╗░██║░░╚═╝███████║██████╔╝╚█████╗░  ░░░░░██║██║░░░██║██║░░██║██║░░██╗░█████╗░░"
-    puts "██║░░██║░╚═══██╗██║░░██╗██╔══██║██╔══██╗░╚═══██╗  ██╗░░██║██║░░░██║██║░░██║██║░░╚██╗██╔══╝░░"
-    puts "╚█████╔╝██████╔╝╚█████╔╝██║░░██║██║░░██║██████╔╝  ╚█████╔╝╚██████╔╝██████╔╝╚██████╔╝███████╗"
-    puts " ╚════╝ ╚═════╝  ╚════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝    ╚════╝  ╚═════╝ ╚═════╝  ╚═════╝ ╚══════╝"
-    puts 
-    puts "Welcome to Oscars Judge Terminal App!".colorize(:red)
+    font = TTY::Font.new(:doom) # implementing font gem
+    pastel = Pastel.new
+    puts pastel.yellow(font.write("OSCARS JUDGE", letter_spacing: 1))
+    puts "Welcome to Oscars Judge Terminal App!".colorize(:red) # implementing colorize gem
     puts "Become your own movie critic!"
     puts
     puts "***".colorize(:yellow)
@@ -43,38 +45,47 @@ def instructions
 end
 
 def who_is_watching
-    puts "Who is watching?"
+    prompt = TTY::Prompt.new
+    select_who_is_watching = "Who is watching?"
+    select_user = ["Bella", "New User"]
+    prompt.select(select_who_is_watching, select_user)
     puts "> Bella"
     # I want to add names to this list
     # I want to loop through the file_path txt file names if they exist to be able to select them. 
     puts "> New User"
     puts 
+    # prompt.ask("Type your name, using a-z characters.", required: true)
     puts "Type your name, using a-z characters.".colorize(:blue)
     puts
 end
 
 def menu
+    prompt = TTY::Prompt.new
+    mainmenu_choice = {"Your Profile User List" => 1, "Add a movie to your User list" => 2, "Remove a movie from your User list" => 3, "The 2021 Best Picture Films" => 4, "View To Watch List" => 5, "View Favourite List" => 6, "Random Movie Selector" => 7, "Save & Exit" => 8}
+    choose_an_option = "Please choose an option.".colorize(:blue)
+    
     puts "***".colorize(:yellow)
     puts " * ".colorize(:light_yellow)
     puts "***".colorize(:yellow)
     puts "MAIN MENU"
-    puts "Please choose an option.".colorize(:blue)
-    puts
-    puts "1: Your Profile User List"
-    puts "2: Add a movie to your User list"
-    puts "3: Remove a movie from your User list"
-    puts
-    puts "4: The 2021 Best Picture Films"
-    puts "5: View To Watch List"
-    puts "6: View Favourite List"
-    puts
-    puts "7: Random Movie Selector"
-    puts
-    puts
-    puts "8: Exit App"
-    puts "***".colorize(:yellow)
-    puts " * ".colorize(:light_yellow)
-    puts "***".colorize(:yellow)
+    prompt.select(choose_an_option, mainmenu_choice)
+
+    # puts
+    # puts "1: Your Profile User List"
+    # puts "2: Add a movie to your User list"
+    # puts "3: Remove a movie from your User list"
+    # puts
+    # puts "4: The 2021 Best Picture Films"
+    # puts "5: View To Watch List"
+    # puts "6: View Favourite List"
+    # puts
+    # puts "7: Random Movie Selector"
+    # puts
+    # puts
+    # puts "8: Exit App"
+    # puts "***".colorize(:yellow)
+    # puts " * ".colorize(:light_yellow)
+    # puts "***".colorize(:yellow)
 end
 # ------------------------
 # main body
@@ -94,11 +105,12 @@ puts ">>>>> Thanks for joining us #{name}"
 mainmenu = List.new(name)
 sleep(2)
 
+
 loop do
     #start 
     
     menu
-    case gets.to_i
+    case prompt.select
     # view list first then create view best picture.
     # best picture just write file path
     when 1
@@ -114,7 +126,7 @@ loop do
     when 6 
         mainmenu.fave
     when 7
-        group_instance = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
+        movie_array = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
 
         puts
         puts "Random Movie Selector"
@@ -125,7 +137,7 @@ loop do
         sleep(1)
         puts "."
         sleep(1.5)
-        puts "> " + "#{group_instance.shuffle.sample}"
+        puts "> " + "#{movie_array.shuffle.sample}"
         puts
         sleep(3)
     when 8
diff --git a/list.rb b/list.rb
index c65d1fa..9bfa7e1 100644
--- a/list.rb
+++ b/list.rb
@@ -1,7 +1,4 @@
 require_relative './movie_item'
-# require_relative './awards'
-require 'colorize'
-# require_relative './index'
 
 class List
     # do i need the initialise function?
@@ -45,6 +42,13 @@ class List
     def viewbestpicture
     system 'clear'
         def bestmenu
+            puts
+
+            prompt = TTY::Prompt.new
+            best_menu = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
+            choose_a_film_option = "Please choose a film option.".colorize(:blue)
+            prompt.multi_select(choose_a_film_option, best_menu)
+
             puts
             puts "2021 Best Picture Films:"
             puts "Please choose an option.".colorize(:blue)
@@ -109,6 +113,10 @@ class List
             # working with files we can call each line of file through each_line
         end
         puts
+        
+        prompt = TTY::Prompt.new
+        prompt.ask("Enter the movie name: ")
+
         puts "Enter the movie name: ".colorize(:blue)
         print "> "
         movie = gets.strip
@@ -130,19 +138,20 @@ class List
         end
         sleep(2)
         puts
+
+        prompt = TTY::Prompt.new
+        option = ["Back to MAIN MENU", "Save & Exit"]
+        prompt.select("Select your next option: ", option)
+
         add_open = true
         while add_open
             puts "Select your next option:".colorize(:light_blue)
-            puts "1: > Add another movie"
-            puts "2: > Back to MAIN MENU"
-            puts "3: > Exit App"
+            puts "1: > Back to MAIN MENU"
+            puts "2: > Exit App"
             choice = gets.chomp.to_i
             if choice == 1
-                # add = false
-                puts "Add another movie not working"
-            elsif choice == 2
-                add_open = false
-            else choice == 3
+                remove_open = false
+            else choice == 2
                 exit
                 #exits app
             end
@@ -186,19 +195,19 @@ class List
         sleep(2)
         puts
 
+        prompt = TTY::Prompt.new
+        option = ["Back to MAIN MENU", "Save & Exit"]
+        prompt.select("Select your next option: ", option)
+
         remove_open = true
         while remove_open
             puts "Select your next option:".colorize(:light_blue)
-            puts "1: > Remove another movie"
-            puts "2: > Back to MAIN MENU"
-            puts "3: > Exit App"
+            puts "1: > Back to MAIN MENU"
+            puts "2: > Exit App"
             choice = gets.chomp.to_i
             if choice == 1
-                # add = false
-                puts "Remove another movie not working"
-            elsif choice == 2
                 remove_open = false
-            else choice == 3
+            else choice == 2
                 exit
                 #exits app
             end
diff --git a/lists/Bella.txt b/lists/Bella.txt
index 39bb5c9..fe54885 100644
--- a/lists/Bella.txt
+++ b/lists/Bella.txt
@@ -9,3 +9,4 @@ Harry Potter
 Spiderman
 When Harry Met Sally
 Anaconda
+Yellow
diff --git a/movie_item.rb b/movie_item.rb
index cb76e94..32ff4f5 100644
--- a/movie_item.rb
+++ b/movie_item.rb
@@ -1,5 +1,4 @@
 # require_relative './list'
-require 'colorize'
 
 class MovieItem
 #     attr_accessor :watchlist
@@ -10,13 +9,13 @@ class MovieItem
         @favourite = []
     end
 
-# end
     def soundofmetal
     system 'clear'
         puts " Sound of Metal ".colorize(:red).on_white.underline
         puts "2021".colorize(:light_red) + "- Best Picture Nominee"
         puts "Director".colorize(:light_red) + "- Darius Marder"
         puts "Synopsis: ".colorize(:light_red) + "During a series of adrenaline-fueled one-night gigs, itinerant punk-metal drummer Ruben (Riz Ahmed) begins to experience intermittent hearing loss."
+        puts "Link: ".colorize(:light_red) + TTY::Link.link_to("Sound of Metal Movie Trailer", "https://youtu.be/VFOrGkAvjAE")
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
@@ -65,6 +64,7 @@ class MovieItem
         puts "Director".colorize(:light_red) + " - David Fincher"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + " - Mank is a 2020 American biographical drama film about screenwriter Herman J. Mankiewicz and his development of the screenplay for Citizen Kane (1941)."
+        puts "Link: ".colorize(:light_red) + TTY::Link.link_to("Mank Movie Trailer", "https://youtu.be/aSfX-nrg-lI")
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
@@ -113,6 +113,7 @@ class MovieItem
         puts "Director".colorize(:light_red) + " - Lee Isaac Chung"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + " - A tender and sweeping story about what roots us, Minari follows a Korean-American family that moves to a tiny Arkansas farm in search of their own American dream."
+        puts "Link: ".colorize(:light_red) + TTY::Link.link_to("Minari Movie Trailer", "https://youtu.be/KQ0gFidlro8")
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
@@ -161,6 +162,7 @@ class MovieItem
         puts "Director".colorize(:light_red) + " - Emerald Fennell"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + " - The film stars Carey Mulligan as a vigilante seeking to avenge the death of her best friend who was a rape victim."
+        puts "Link: ".colorize(:light_red) + TTY::Link.link_to("Promising Young Woman movie trailer", "https://youtu.be/KQ0gFidlro8")
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
@@ -209,6 +211,7 @@ class MovieItem
         puts "Director".colorize(:light_red) + " - Florian Zeller"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + " - Based on the acclaimed, award-winning play, The Father starts out as a deceptively simple drama hinged on a deceptively familiar dynamic."
+        puts "Link: ".colorize(:light_red) + TTY::Link.link_to("The Father movie trailer", "https://youtu.be/4TZb7YfK-JI")
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
@@ -257,6 +260,7 @@ class MovieItem
         puts "Director".colorize(:light_red) + " - Shaka King"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + " - FBI informant William O'Neal infiltrates the Illinois Black Panther Party and is tasked with keeping tabs on their charismatic leader, Chairman Fred Hampton."
+        puts "Link: ".colorize(:light_red) + TTY::Link.link_to("Judas and the Black Messiah movie trailer", "https://youtu.be/sSjtGqRXQ9Y")
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
@@ -305,6 +309,7 @@ class MovieItem
         puts "Director".colorize(:light_red) + " - Aaron Sorkin"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + " - In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago."
+        puts "Link: ".colorize(:light_red) + TTY::Link.link_to("The Trial of the Chicago 7 movie trailer", "https://youtu.be/FVb6EdKDBfU")
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
@@ -354,7 +359,7 @@ class MovieItem
         puts "Director".colorize(:light_red) + "- Chloe Zhao"
         puts "2021".colorize(:light_red) + "- Best Picture Winner" + " * * * ".colorize(:red)
         puts "Synopsis: ".colorize(:light_red) + " - Nomadland is a surprisingly balanced look at the van living, nomadic life within America."
-        puts
+        puts "Link: ".colorize(:light_red) + TTY::Link.link_to("Nomadland movie trailer", "https://youtu.be/6sxCFZ8_d84")
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)

commit 0b5c43a841a920955866a1faad0d6a2046b153c7
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Mon May 24 16:03:10 2021 +1000

    updated README.md file installation information

diff --git a/README.md b/README.md
index fccab3b..8a3b337 100644
--- a/README.md
+++ b/README.md
@@ -10,14 +10,14 @@ Create:
 
 [Git Hub Source Respository](https://github.com/leberSmeaton/portfolioT1A3)
 
-<br/>![Bong Joon-ho saying thankyou with Oscar in hand](https://media.giphy.com/media/l0Exilgks3XFeHErK/giphy.gif)
+<br/>![Michelle Obama annouces 'And the OScar goes to...' gif](https://media.giphy.com/media/l0Exilgks3XFeHErK/giphy.gif)
 
 ## Installation
 
 This Oscars Judge Terminal App requires,
 
 - Ruby 3.0.1 installed for operation.
-- Ruby Gems: Colorize, TTY-prompt.
+- Ruby Gem Bundler Install Ruby Gems: Colorize, TTY-reader.
 
 <br/> [**Ruby 3.0.1** install information here,](https://www.ruby-lang.org/en/documentation/installation/#rubyinstaller)
 
@@ -47,32 +47,13 @@ This Oscars Judge Terminal App requires,
   Debian GNU/Linux and Ubuntu use the apt package manager. You can use it like this:<br/>
   - `$ sudo apt-get install ruby-full`
 
-<br/> **Ruby Gem** dependencies to install before use: <br/>
+<br/> **Ruby Install Bundler** to manage the Oscars Judge Terminal App gem dependencies.
 
-- colorize ~> 0.8.1
-- tty-prompt ~> 0.23.1
-
-[**colorize** install information here,](https://rubygems.org/gems/colorize)<br/>
-
-- Add Colorize to your Gemfile:
-  - `gem 'colorize', '~> 0.8.1'`
-- Or install Colorize yourself:
-  - `$ gem install colorize`<br/>
-
-[**tty-prompt** install information here,](https://rubygems.org/gems/tty-prompt)<br/>
-
-- Add tty-prompt to your Gemfile:
-  - `gem 'tty-prompt', '~> 0.23.1'`<br/>
-- Or install tty-prompt yourself:
-  - `$ gem install tty-prompt`<br/>
-
-`$ bundle` and restart your terminal to ensure colorize and tty-prompt gems are fully loaded.
-Use `$ bundle info [gemname]` to see where a bundled gem is installed. Type `$ gem` for more info on RubyGem usage.
-
-<br/>
-<br/>
-<br/>
-<br/>
+- Bundler is an easy way to install all gem dependencies.
+- `$ bundler install`
+  <br/>
+  <br/>
+  <br/>
 
 # Oscars Judge Terminal App
 
@@ -80,8 +61,15 @@ Use `$ bundle info [gemname]` to see where a bundled gem is installed. Type `$ g
 
 ## Example imagery
 
-Insert example images of app
-
+![Welcome Interface](../docs/preview_screenshots/home.png)
+_
+![Who's Watching and Main Menu](../docs/preview_screenshots/whowatchingmenu.png)
+_
+![Random Movie Selector and menu](../docs/preview_screenshots/randommoviemenu.png)
+_
+![Random Movie Selector and menu](../docs/preview_screenshots/movieinfo.png)
+_
+![Adding a movie to list](../docs/preview_screenshots/addmovietolist.png)
 <br />
 <br />
 
diff --git a/awards.rb b/awards.rb
index a1aa866..2ec08f2 100644
--- a/awards.rb
+++ b/awards.rb
@@ -1,106 +1,114 @@
-awards = {soundofmetal: {year: 2021, 
-    category: "Best Picture",
-    name: "Sound of Metal", 
-    director: "Darius Marder", 
-    synopsis: "During a series of adrenaline-fueled one-night gigs, itinerant punk-metal drummer Ruben (Riz Ahmed) begins to experience intermittent hearing loss.",
-    favourite: nil,
-    towatch: nil}, 
-    
-    mank: {year: 2021, 
-    category: "Best Picture", 
-    name: "Mank", 
-    director: "David Fincher", 
-    synopsis: "Mank is a 2020 American biographical drama film about screenwriter Herman J. Mankiewicz and his development of the screenplay for Citizen Kane (1941).",
-    favourite: nil,
-    towatch: nil}, 
-    
-    minari: {year: 2021, 
-    category: "Best Picture", 
-    name: "Minari", 
-    director: "Lee Isaac Chung", 
-    synopsis: "A tender and sweeping story about what roots us, Minari follows a Korean-American family that moves to a tiny Arkansas farm in search of their own American dream.",
-    favourite: nil,
-    towatch: nil},
-
-    promising: {year: 2021, 
-    category: "Best Picture", 
-    name: "Promising Young Woman", 
-    director: "Emerald Fennell", 
-    synopsis: "The film stars Carey Mulligan as a vigilante seeking to avenge the death of her best friend who was a rape victim.",
-    favourite: nil,
-    towatch: nil},
-
-    thefather: {year: 2021, 
-    category: "Best Picture", 
-    name: "The Father", 
-    director: "Florian Zeller", 
-    synopsis: "Based on the acclaimed, award-winning play, The Father starts out as a deceptively simple drama hinged on a deceptively familiar dynamic.",
-    favourite: nil,
-    towatch: nil},
-
-    judas: {year: 2021, 
-    category: "Best Picture", 
-    name: "Judas and the Black Messiah", 
-    director: "Shaka King", 
-    synopsis: "FBI informant William O'Neal infiltrates the Illinois Black Panther Party and is tasked with keeping tabs on their charismatic leader, Chairman Fred Hampton.",
-    favourite: nil,
-    towatch: nil},
-
-    trial: {year: 2021, 
-    category: "Best Picture", 
-    name: "The Trial of the Chicago 7", 
-    director: "Aaron Sorkin", 
-    synopsis: "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago.",
-    favourite: true,
-    towatch: nil},
-
-    nomadland: {year: 2021, 
-    category: "Best Picture",
-    winner: "Winner", 
-    name: "Nomadland", 
-    director: "Chloe Zhao", 
-    synopsis: "Nomadland is a surprisingly balanced look at the van living, nomadic life within America.",
-    favourite: true,
-    towatch: nil}
-}
-
-favourite = []
-towatch = []
-
-puts awards[:nomadland][:year].to_s + " " + awards[:nomadland][:category] + " category:"
-# def bestpictureawards(award)
-    awards.each do |key, value|
-    #   puts key
-        puts value[:name]
+class Awards
+    awards = {soundofmetal: {year: 2021, 
+        category: "Best Picture",
+        name: "Sound of Metal", 
+        director: "Darius Marder", 
+        synopsis: "During a series of adrenaline-fueled one-night gigs, itinerant punk-metal drummer Ruben (Riz Ahmed) begins to experience intermittent hearing loss.",
+        favourite: nil,
+        towatch: nil}, 
+        
+        mank: {year: 2021, 
+        category: "Best Picture", 
+        name: "Mank", 
+        director: "David Fincher", 
+        synopsis: "Mank is a 2020 American biographical drama film about screenwriter Herman J. Mankiewicz and his development of the screenplay for Citizen Kane (1941).",
+        favourite: nil,
+        towatch: nil}, 
+        
+        minari: {year: 2021, 
+        category: "Best Picture", 
+        name: "Minari", 
+        director: "Lee Isaac Chung", 
+        synopsis: "A tender and sweeping story about what roots us, Minari follows a Korean-American family that moves to a tiny Arkansas farm in search of their own American dream.",
+        favourite: nil,
+        towatch: nil},
+
+        promising: {year: 2021, 
+        category: "Best Picture", 
+        name: "Promising Young Woman", 
+        director: "Emerald Fennell", 
+        synopsis: "The film stars Carey Mulligan as a vigilante seeking to avenge the death of her best friend who was a rape victim.",
+        favourite: nil,
+        towatch: nil},
+
+        thefather: {year: 2021, 
+        category: "Best Picture", 
+        name: "The Father", 
+        director: "Florian Zeller", 
+        synopsis: "Based on the acclaimed, award-winning play, The Father starts out as a deceptively simple drama hinged on a deceptively familiar dynamic.",
+        favourite: nil,
+        towatch: nil},
+
+        judas: {year: 2021, 
+        category: "Best Picture", 
+        name: "Judas and the Black Messiah", 
+        director: "Shaka King", 
+        synopsis: "FBI informant William O'Neal infiltrates the Illinois Black Panther Party and is tasked with keeping tabs on their charismatic leader, Chairman Fred Hampton.",
+        favourite: nil,
+        towatch: nil},
+
+        trial: {year: 2021, 
+        category: "Best Picture", 
+        name: "The Trial of the Chicago 7", 
+        director: "Aaron Sorkin", 
+        synopsis: "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago.",
+        favourite: true,
+        towatch: nil},
+
+        nomadland: {year: 2021, 
+        category: "Best Picture",
+        winner: "Winner", 
+        name: "Nomadland", 
+        director: "Chloe Zhao", 
+        synopsis: "Nomadland is a surprisingly balanced look at the van living, nomadic life within America.",
+        favourite: true,
+        towatch: nil}
+    }
+
+    def initialize
+
     end
-# end
-puts
 
-puts "NOMADLAND"
-# puts awards[:nomadland]
+    def awards_best_picture
+        # puts awards[:nomadland][:year].to_s + " " + awards[:nomadland][:category] + " category:"
+        # def bestpictureawards(award)
+        awards.each do |key, value|
+        #   puts key
+            puts value[:name]
+        end
+    end
+end
 
-awards[:nomadland][:favourite] = false
-awards[:nomadland][:towatch] = true
-favourite << awards[:nomadland][:favourite]
-towatch << awards[:nomadland][:towatch]
+# puts "NOMADLAND"
+# # puts awards[:nomadland]
 
-awards[:nomadland].each do |key, value|
-#   puts key
-    puts " > " + key.to_s + ": " + value.to_s
-end
-puts
+# favourite = []
+# towatch = []
 
-puts "Favourite List: " + favourite.to_s
-puts "To Watch List: " + towatch.to_s
-puts
+# awards[:nomadland][:favourite] = false
+# awards[:nomadland][:towatch] = true
+# favourite << awards[:nomadland][:favourite]
+# towatch << awards[:nomadland][:towatch]
 
-awards[key].each do |key, value|
-    while key[favourite] = true do
-        favourite << key
-        puts favourite
-    end
-end
+# awards[:nomadland].each do |key, value|
+# #   puts key
+#     puts " > " + key.to_s + ": " + value.to_s
+# end
+# puts
+
+# puts "Favourite List: " + favourite.to_s
+# puts "To Watch List: " + towatch.to_s
+# puts
+
+# awards[key].each do |key, value|
+#     while key[favourite] = true do
+#         favourite << key
+#         puts favourite
+#     end
+# end
 
+# # end good findings
+# 
 
 # --------------
 # Testing out iterating hashes
diff --git a/index.rb b/index.rb
index d260b56..5073a71 100644
--- a/index.rb
+++ b/index.rb
@@ -8,10 +8,11 @@
 #4. View to Watch List
 #5. View Favourite List
 #6. Randomise
-#7. Exit
+#7. Save & Exit
 
 
 require_relative "./list"
+# require_relative "./awards"
 require 'colorize'
 # require_relative "/.user_profile"
 
@@ -88,7 +89,7 @@ sleep(2)
 who_is_watching
 
 name = gets.strip.downcase.capitalize
-puts ">>>>> Thanks for joining us #{name}".colorize(:light_blue)
+puts ">>>>> Thanks for joining us #{name}"
 # wait 2 seconds
 mainmenu = List.new(name)
 sleep(2)
@@ -129,6 +130,7 @@ loop do
         sleep(3)
     when 8
         exit
+        # quit_program
     end
 end
 system 'clear'
diff --git a/list.rb b/list.rb
index 59994c1..c65d1fa 100644
--- a/list.rb
+++ b/list.rb
@@ -39,13 +39,13 @@ class List
         puts
         puts "Great list!".colorize(:blue)
         puts
-        puts
         sleep(3)
     end
 
     def viewbestpicture
     system 'clear'
         def bestmenu
+            puts
             puts "2021 Best Picture Films:"
             puts "Please choose an option.".colorize(:blue)
             puts "***".colorize(:yellow)
@@ -71,7 +71,7 @@ class List
         viewbestpicture_open = true
         while viewbestpicture_open
             bestmenu
-            case gets.to_i
+                case gets.to_i
                 when 1
                     movieitemselection.soundofmetal
                 when 2
@@ -235,6 +235,7 @@ class List
         puts
     end
 
+    #
     # You can have these in the public section but makes it easier to read
     # methods that arern't called outside of class should be in private. 
     # methods called outside of class should be easily visble in public section.
diff --git a/lists/Bella.txt b/lists/Bella.txt
index 88ec72b..39bb5c9 100644
--- a/lists/Bella.txt
+++ b/lists/Bella.txt
@@ -5,3 +5,7 @@ Minority Report
 Perfect Blue
 Drive
 Between the Pines
+Harry Potter
+Spiderman
+When Harry Met Sally
+Anaconda
diff --git a/movie_item.rb b/movie_item.rb
index 3c37150..cb76e94 100644
--- a/movie_item.rb
+++ b/movie_item.rb
@@ -64,7 +64,7 @@ class MovieItem
         puts " Mank ".colorize(:red).on_white.underline
         puts "Director".colorize(:light_red) + " - David Fincher"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
-        puts "Synopsis".colorize(:light_red) + "Mank is a 2020 American biographical drama film about screenwriter Herman J. Mankiewicz and his development of the screenplay for Citizen Kane (1941)."
+        puts "Synopsis".colorize(:light_red) + " - Mank is a 2020 American biographical drama film about screenwriter Herman J. Mankiewicz and his development of the screenplay for Citizen Kane (1941)."
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
@@ -112,7 +112,7 @@ class MovieItem
         puts " Minari ".colorize(:red).on_white.underline
         puts "Director".colorize(:light_red) + " - Lee Isaac Chung"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
-        puts "Synopsis".colorize(:light_red) + "A tender and sweeping story about what roots us, Minari follows a Korean-American family that moves to a tiny Arkansas farm in search of their own American dream."
+        puts "Synopsis".colorize(:light_red) + " - A tender and sweeping story about what roots us, Minari follows a Korean-American family that moves to a tiny Arkansas farm in search of their own American dream."
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
@@ -160,7 +160,7 @@ class MovieItem
         puts " Promising Young Woman ".colorize(:red).on_white.underline
         puts "Director".colorize(:light_red) + " - Emerald Fennell"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
-        puts "Synopsis".colorize(:light_red) + "The film stars Carey Mulligan as a vigilante seeking to avenge the death of her best friend who was a rape victim."
+        puts "Synopsis".colorize(:light_red) + " - The film stars Carey Mulligan as a vigilante seeking to avenge the death of her best friend who was a rape victim."
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
@@ -208,7 +208,7 @@ class MovieItem
         puts " The Father ".colorize(:red).on_white.underline
         puts "Director".colorize(:light_red) + " - Florian Zeller"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
-        puts "Synopsis".colorize(:light_red) + "Based on the acclaimed, award-winning play, The Father starts out as a deceptively simple drama hinged on a deceptively familiar dynamic."
+        puts "Synopsis".colorize(:light_red) + " - Based on the acclaimed, award-winning play, The Father starts out as a deceptively simple drama hinged on a deceptively familiar dynamic."
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
@@ -256,7 +256,7 @@ class MovieItem
         puts " Judas and the Black Messiah ".colorize(:red).on_white.underline
         puts "Director".colorize(:light_red) + " - Shaka King"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
-        puts "Synopsis".colorize(:light_red) + "FBI informant William O'Neal infiltrates the Illinois Black Panther Party and is tasked with keeping tabs on their charismatic leader, Chairman Fred Hampton."
+        puts "Synopsis".colorize(:light_red) + " - FBI informant William O'Neal infiltrates the Illinois Black Panther Party and is tasked with keeping tabs on their charismatic leader, Chairman Fred Hampton."
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
@@ -304,7 +304,7 @@ class MovieItem
         puts " The Trial of the Chicago 7 ".colorize(:red).on_white.underline
         puts "Director".colorize(:light_red) + " - Aaron Sorkin"
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
-        puts "Synopsis".colorize(:light_red) + "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago."
+        puts "Synopsis".colorize(:light_red) + " - In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago."
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
@@ -349,13 +349,16 @@ class MovieItem
 
     def nomadland
     system 'clear'
+        puts
         puts " Nomadland ".colorize(:black).on_red.underline
         puts "Director".colorize(:light_red) + "- Chloe Zhao"
         puts "2021".colorize(:light_red) + "- Best Picture Winner" + " * * * ".colorize(:red)
-        puts "Synopsis: ".colorize(:light_red) + "Nomadland is a surprisingly balanced look at the van living, nomadic life within America."
+        puts "Synopsis: ".colorize(:light_red) + " - Nomadland is a surprisingly balanced look at the van living, nomadic life within America."
+        puts
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
+        puts
         puts "Please choose an option.".colorize(:blue)
         nomadland_open = true
         while nomadland_open

commit 781f54f6f9d5c4f46c4c9ab1f8cf9bb44539dd9d
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Sun May 23 15:44:17 2021 +1000

    created a new hash and iterated through in awards.rb, trying to find the way to connect this to other pages.

diff --git a/Gemfile b/Gemfile
index e27352f..d3900ef 100644
--- a/Gemfile
+++ b/Gemfile
@@ -7,7 +7,7 @@ git_source(:github) { |repo_name| "https://github.com/#{repo_name}" }
 # gem "rails"
 
 gem "rspec", "~> 3.10"
-gem 'tty-prompt', '~> 0.23.1'
+gem "tty-reader"
 gem 'colorize', '~> 0.8.1'
 # gem 'launchy', '~> 2.4', '>= 2.4.3'
 # gem "whirly" # couldn't work on ruby 2+
diff --git a/Gemfile.lock b/Gemfile.lock
index 06406fe..d002da9 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -1,15 +1,8 @@
 GEM
   remote: https://rubygems.org/
   specs:
-    addressable (2.7.0)
-      public_suffix (>= 2.0.2, < 5.0)
     colorize (0.8.1)
     diff-lcs (1.4.4)
-    launchy (2.5.0)
-      addressable (~> 2.7)
-    pastel (0.8.0)
-      tty-color (~> 0.5)
-    public_suffix (4.0.6)
     rspec (3.10.0)
       rspec-core (~> 3.10.0)
       rspec-expectations (~> 3.10.0)
@@ -23,18 +16,12 @@ GEM
       diff-lcs (>= 1.2.0, < 2.0)
       rspec-support (~> 3.10.0)
     rspec-support (3.10.2)
-    tty-color (0.6.0)
     tty-cursor (0.7.1)
-    tty-prompt (0.23.1)
-      pastel (~> 0.8)
-      tty-reader (~> 0.8)
     tty-reader (0.9.0)
       tty-cursor (~> 0.7)
       tty-screen (~> 0.8)
       wisper (~> 2.0)
     tty-screen (0.8.1)
-    tty-spinner (0.9.3)
-      tty-cursor (~> 0.7)
     wisper (2.0.1)
 
 PLATFORMS
@@ -42,10 +29,8 @@ PLATFORMS
 
 DEPENDENCIES
   colorize (~> 0.8.1)
-  launchy (~> 2.4, >= 2.4.3)
   rspec (~> 3.10)
-  tty-prompt (~> 0.23.1)
-  tty-spinner
+  tty-reader
 
 BUNDLED WITH
    2.2.17
diff --git a/awards.rb b/awards.rb
index e81b022..a1aa866 100644
--- a/awards.rb
+++ b/awards.rb
@@ -1,5 +1,4 @@
-awards = [
-    {year: 2021, 
+awards = {soundofmetal: {year: 2021, 
     category: "Best Picture",
     name: "Sound of Metal", 
     director: "Darius Marder", 
@@ -7,7 +6,7 @@ awards = [
     favourite: nil,
     towatch: nil}, 
     
-    {year: 2021, 
+    mank: {year: 2021, 
     category: "Best Picture", 
     name: "Mank", 
     director: "David Fincher", 
@@ -15,7 +14,7 @@ awards = [
     favourite: nil,
     towatch: nil}, 
     
-    {year: 2021, 
+    minari: {year: 2021, 
     category: "Best Picture", 
     name: "Minari", 
     director: "Lee Isaac Chung", 
@@ -23,7 +22,7 @@ awards = [
     favourite: nil,
     towatch: nil},
 
-    {year: 2021, 
+    promising: {year: 2021, 
     category: "Best Picture", 
     name: "Promising Young Woman", 
     director: "Emerald Fennell", 
@@ -31,7 +30,7 @@ awards = [
     favourite: nil,
     towatch: nil},
 
-    {year: 2021, 
+    thefather: {year: 2021, 
     category: "Best Picture", 
     name: "The Father", 
     director: "Florian Zeller", 
@@ -39,7 +38,7 @@ awards = [
     favourite: nil,
     towatch: nil},
 
-    {year: 2021, 
+    judas: {year: 2021, 
     category: "Best Picture", 
     name: "Judas and the Black Messiah", 
     director: "Shaka King", 
@@ -47,31 +46,66 @@ awards = [
     favourite: nil,
     towatch: nil},
 
-    {year: 2021, 
+    trial: {year: 2021, 
     category: "Best Picture", 
     name: "The Trial of the Chicago 7", 
     director: "Aaron Sorkin", 
     synopsis: "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago.",
-    favourite: nil,
+    favourite: true,
     towatch: nil},
 
-    {year: 2021, 
+    nomadland: {year: 2021, 
     category: "Best Picture",
     winner: "Winner", 
     name: "Nomadland", 
     director: "Chloe Zhao", 
     synopsis: "Nomadland is a surprisingly balanced look at the van living, nomadic life within America.",
-    favourite: nil,
+    favourite: true,
     towatch: nil}
-]
+}
+
+favourite = []
+towatch = []
+
+puts awards[:nomadland][:year].to_s + " " + awards[:nomadland][:category] + " category:"
+# def bestpictureawards(award)
+    awards.each do |key, value|
+    #   puts key
+        puts value[:name]
+    end
+# end
+puts
+
+puts "NOMADLAND"
+# puts awards[:nomadland]
+
+awards[:nomadland][:favourite] = false
+awards[:nomadland][:towatch] = true
+favourite << awards[:nomadland][:favourite]
+towatch << awards[:nomadland][:towatch]
+
+awards[:nomadland].each do |key, value|
+#   puts key
+    puts " > " + key.to_s + ": " + value.to_s
+end
+puts
+
+puts "Favourite List: " + favourite.to_s
+puts "To Watch List: " + towatch.to_s
+puts
+
+awards[key].each do |key, value|
+    while key[favourite] = true do
+        favourite << key
+        puts favourite
+    end
+end
+
+
+# --------------
+# Testing out iterating hashes
+# --------------
 
-# {year: 2021, 
-# category: "Best Picture",
-# name: "Sound of Metal", 
-# director: "Darius Marder", 
-# synopsis: "During a series of adrenaline-fueled one-night gigs, itinerant punk-metal drummer Ruben (Riz Ahmed) begins to experience intermittent hearing loss.",
-# favourite: nil,
-# towatch: nil}
 
 # get only info of all strings
 # awards.each do |hash|
@@ -84,15 +118,55 @@ awards = [
 # getting key value info from every array
 # how do I access only the first item of each hash
 # awards.each do |hash|
-#     puts "these are the names of the movies"
-#     hash.each do |key,value|
-#         puts (key.to_s + ": " + value.to_s)
+#     # puts "these are the names of the movies"
+#     puts
+#     hash.each do |value|
+#         puts value.to_s + ", "
+#         puts
+#     end
+# end
+
+
+
+# awards.each do |hash|
+#     # puts "these are the names of the movies"
+#     hash.each do |key|
+#         puts awards[:name].to_s
+#         puts
 #     end
 # end
 
+
+# awards[0].each_value do |key|
+#   print key.to_s + ", "
+# end
+
 # only getting info from single arrays
-# puts awards[0][:name]
-# puts awards[0][:year]
-# puts awards[0][:director]
-# puts awards[0][:synopsis]
+# puts awards[0][:year].to_s + awards[0][:category] + " category: ", awards[0][:name], awards[1][:name], awards[2][:name], awards[3][:name]
+
+
+# def soundofmetal_method
+#     year = [:year, 2021]
+#     name = [:name, "Sound of Metal"]
+#     director = [:director, "directorname"]
+#     synopsis = [:synopsis, "synopsis"]
+#     favourite = [:favourite, nil]
+#     towatch = [:towatch, nil]
+
+#     return name[1]
+# end
+
+# def mank_method
+#     year = [:year, 2021]
+#     name = [:name, "Mank"]
+#     director = [:director, "directorname"]
+#     synopsis = [:synopsis, "synopsis"]
+#     favourite = [:favourite, nil]
+#     towatch = [:towatch, nil]
+
+#     name_key_value_pairs = [year, name, director]
+#     Hash[name_key_value_pairs]
+# end
 
+# p soundofmetal_method
+# p mank_method
diff --git a/index.rb b/index.rb
index 4520ee9..d260b56 100644
--- a/index.rb
+++ b/index.rb
@@ -32,6 +32,7 @@ def title
 end
 
 def instructions
+    # need to implement tty-reader
     puts "INSTRUCTIONS".colorize(:blue)
     puts "Use the UP and DOWN arrows to move to an option, ENTER to select."
     puts "***".colorize(:yellow)
diff --git a/list.rb b/list.rb
index 897b058..59994c1 100644
--- a/list.rb
+++ b/list.rb
@@ -248,7 +248,7 @@ class List
     end
 
     def create
-        puts "New Empty Profile for #{@name}"
+        puts "#{@name}, an empty user profile has been created."
             file = File.new(@file_path, 'w')
             file.puts "" # you can add additional text here when file is created
             file.close #always close your file

commit 7f9cb934fd48ede2027fbeb3b7ea949a31274788
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Sun May 23 11:31:03 2021 +1000

    Added a dividers.rb as to try call the dividing stars as a instance. Haven't worked that out yet. Updated Movie_items.rb selections and copied the menu options across all items.

diff --git a/dividers.rb b/dividers.rb
new file mode 100644
index 0000000..a2f7f06
--- /dev/null
+++ b/dividers.rb
@@ -0,0 +1,19 @@
+# class Dividers
+#     attr_reader :stardivider
+
+#     def initialize
+#         @stardivider = stardivider
+#     end
+
+#     def stardivider
+#         @stardivider << "***"
+#         # , " * ", "***"
+#     end
+# end
+
+# # puts @stardivider
+# # puts stardivider
+# # puts Dividers
+# # Dividers
+# # @stardivider
+# stardivider
diff --git a/index.rb b/index.rb
index 6f1ad08..4520ee9 100644
--- a/index.rb
+++ b/index.rb
@@ -23,15 +23,16 @@ def title
     puts "╚█████╔╝██████╔╝╚█████╔╝██║░░██║██║░░██║██████╔╝  ╚█████╔╝╚██████╔╝██████╔╝╚██████╔╝███████╗"
     puts " ╚════╝ ╚═════╝  ╚════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝    ╚════╝  ╚═════╝ ╚═════╝  ╚═════╝ ╚══════╝"
     puts 
-    puts "Welcome to Oscars Judge Terminal App!" 
+    puts "Welcome to Oscars Judge Terminal App!".colorize(:red)
     puts "Become your own movie critic!"
+    puts
     puts "***".colorize(:yellow)
     puts " * ".colorize(:light_yellow)
     puts "***".colorize(:yellow)
 end
 
 def instructions
-    puts "INSTRUCTIONS"
+    puts "INSTRUCTIONS".colorize(:blue)
     puts "Use the UP and DOWN arrows to move to an option, ENTER to select."
     puts "***".colorize(:yellow)
     puts " * ".colorize(:light_yellow)
@@ -43,6 +44,7 @@ def who_is_watching
     puts "Who is watching?"
     puts "> Bella"
     # I want to add names to this list
+    # I want to loop through the file_path txt file names if they exist to be able to select them. 
     puts "> New User"
     puts 
     puts "Type your name, using a-z characters.".colorize(:blue)
@@ -53,7 +55,6 @@ def menu
     puts "***".colorize(:yellow)
     puts " * ".colorize(:light_yellow)
     puts "***".colorize(:yellow)
-    puts
     puts "MAIN MENU"
     puts "Please choose an option.".colorize(:blue)
     puts
diff --git a/list.rb b/list.rb
index 69ce832..897b058 100644
--- a/list.rb
+++ b/list.rb
@@ -25,7 +25,7 @@ class List
             unless file_empty? #if not empty open it
                 File.open(@file_path, 'r') do |file|
                     file.each_line do |line|
-                        puts "#{file.lineno}. #{line}"
+                        puts "#{file.lineno} - #{line}"
                     end
                     # working with files we can call each line of file through each_line
                 end
@@ -59,7 +59,7 @@ class List
             puts "7: The Trial of the Chicago 7"
             puts "8: Nomadland - Winner".colorize(:cyan)
             puts
-            puts "***".colorize(:yellow)
+            puts
             puts "9: Back to MAIN MENU"
             puts "***".colorize(:yellow)
             puts " * ".colorize(:light_yellow)
diff --git a/movie_item.rb b/movie_item.rb
index 8f38bb4..3c37150 100644
--- a/movie_item.rb
+++ b/movie_item.rb
@@ -30,13 +30,21 @@ class MovieItem
             choice = gets.chomp.to_i
             if choice == 1
                 @watchlist << "Sound of Metal"
-                puts
-                puts "Saved to To Watch List"
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
+                puts "Saved to To Watch List".colorize(:light_blue)
                 puts @watchlist
             elsif choice == 2
                 @favourite << "Sound of Metal"
-                puts
-                puts "Saved to Favourite List"
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
+                puts "Saved to Favourite List".colorize(:light_blue)
                 puts @favourite
             elsif choice == 3
                 #Back to Best Picture Menu
@@ -65,21 +73,33 @@ class MovieItem
         while mank_open
             puts "1: > Save to To Watch List"
             puts "2: > Save to Favourite List"
-            puts "3: > Exit"
+            puts "3: > Back to Best Picture Menu"
+            puts "4: > Exit App"
             choice = gets.chomp.to_i
             if choice == 1
                 @watchlist << "Mank"
-                puts
-                puts "Saved to To Watch List"
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
+                puts "Saved to To Watch List".colorize(:light_blue)
                 puts @watchlist
             elsif choice == 2
                 @favourite << "Mank"
-                puts
-                puts "Saved to Favourite List"
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
+                puts "Saved to Favourite List".colorize(:light_blue)
                 puts @favourite
             elsif choice == 3
+                #Back to Best Picture Menu
+                mank_open = false
+            elsif choice == 4
                 exit
-                #does this mean back to previous menu?
+                #exits app
             end
             puts "***".colorize(:yellow)
             puts " * ".colorize(:light_yellow)
@@ -97,24 +117,37 @@ class MovieItem
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
+        minari_open = true
         while minari_open
             puts "1: > Save to To Watch List"
             puts "2: > Save to Favourite List"
-            puts "3: > Exit"
+            puts "3: > Back to Best Picture Menu"
+            puts "4: > Exit App"
             choice = gets.chomp.to_i
             if choice == 1
                 @watchlist << "Minari"
-                puts
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
                 puts "Saved to To Watch List"
                 puts @watchlist
             elsif choice == 2
                 @favourite << "Minari"
-                puts
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
                 puts "Saved to Favourite List"
                 puts @favourite
             elsif choice == 3
+                #Back to Best Picture Menu
+                minari_open = false
+            elsif choice == 4
                 exit
-                #does this mean back to previous menu?
+                #exits app
             end
             puts "***".colorize(:yellow)
             puts " * ".colorize(:light_yellow)
@@ -132,9 +165,42 @@ class MovieItem
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
-        puts "1. > Save to To Watch List"
-        puts "2. > Save to Favourite List"
-        puts "3. > Back to Main Menu"
+        promising_open = true
+        while promising_open
+            puts "1: > Save to To Watch List"
+            puts "2: > Save to Favourite List"
+            puts "3: > Back to Best Picture Menu"
+            puts "4: > Exit App"
+            choice = gets.chomp.to_i
+            if choice == 1
+                @watchlist << "Promising Young Woman"
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
+                puts "Saved to To Watch List".colorize(:light_blue)
+                puts @watchlist
+            elsif choice == 2
+                @favourite << "Promising Young Woman"
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
+                puts "Saved to Favourite List".colorize(:light_blue)
+                puts @favourite
+            elsif choice == 3
+                #Back to Best Picture Menu
+                promising_open = false
+            elsif choice == 4
+                exit
+                #exits app
+            end
+            puts "***".colorize(:yellow)
+            puts " * ".colorize(:light_yellow)
+            puts "***".colorize(:yellow)
+        end
     end
 
     def thefather
@@ -147,9 +213,42 @@ class MovieItem
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
-        puts "1. > Save to To Watch List"
-        puts "2. > Save to Favourite List"
-        puts "3. > Back to Main Menu"
+        thefather_open = true
+        while thefather_open
+            puts "1: > Save to To Watch List"
+            puts "2: > Save to Favourite List"
+            puts "3: > Back to Best Picture Menu"
+            puts "4: > Exit App"
+            choice = gets.chomp.to_i
+            if choice == 1
+                @watchlist << "The Father"
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
+                puts "Saved to To Watch List".colorize(:light_blue)
+                puts @watchlist
+            elsif choice == 2
+                @favourite << "The Father"
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
+                puts "Saved to Favourite List".colorize(:light_blue)
+                puts @favourite
+            elsif choice == 3
+                #Back to Best Picture Menu
+                thefather_open = false
+            elsif choice == 4
+                exit
+                #exits app
+            end
+            puts "***".colorize(:yellow)
+            puts " * ".colorize(:light_yellow)
+            puts "***".colorize(:yellow)
+        end
     end
 
     def judas
@@ -162,9 +261,42 @@ class MovieItem
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
-        puts "1. > Save to To Watch List"
-        puts "2. > Save to Favourite List"
-        puts "3. > Back to Main Menu"
+        judas_open = true
+        while judas_open
+            puts "1: > Save to To Watch List"
+            puts "2: > Save to Favourite List"
+            puts "3: > Back to Best Picture Menu"
+            puts "4: > Exit App"
+            choice = gets.chomp.to_i
+            if choice == 1
+                @watchlist << "Judas and the Black Messiah"
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
+                puts "Saved to To Watch List".colorize(:light_blue)
+                puts @watchlist
+            elsif choice == 2
+                @favourite << "Judas and the Black Messiah"
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
+                puts "Saved to Favourite List".colorize(:light_blue)
+                puts @favourite
+            elsif choice == 3
+                #Back to Best Picture Menu
+                judas_open = false
+            elsif choice == 4
+                exit
+                #exits app
+            end
+            puts "***".colorize(:yellow)
+            puts " * ".colorize(:light_yellow)
+            puts "***".colorize(:yellow)
+        end
     end
 
     def trial
@@ -177,23 +309,89 @@ class MovieItem
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
-        puts "1. > Save to To Watch List"
-        puts "2. > Save to Favourite List"
-        puts "3. > Back to Main Menu"
+        trial_open = true
+        while trial_open
+            puts "1: > Save to To Watch List"
+            puts "2: > Save to Favourite List"
+            puts "3: > Back to Best Picture Menu"
+            puts "4: > Exit App"
+            choice = gets.chomp.to_i
+            if choice == 1
+                @watchlist << "The Trial of the Chicago 7"
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
+                puts "Saved to To Watch List".colorize(:light_blue)
+                puts @watchlist
+            elsif choice == 2
+                @favourite << "The Trial of the Chicago 7"
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
+                puts "Saved to Favourite List".colorize(:light_blue)
+                puts @favourite
+            elsif choice == 3
+                #Back to Best Picture Menu
+                trial_open = false
+            elsif choice == 4
+                exit
+                #exits app
+            end
+            puts "***".colorize(:yellow)
+            puts " * ".colorize(:light_yellow)
+            puts "***".colorize(:yellow)
+        end
     end
 
     def nomadland
     system 'clear'
         puts " Nomadland ".colorize(:black).on_red.underline
         puts "Director".colorize(:light_red) + "- Chloe Zhao"
-        puts "2021".colorize(:light_red) + "- Best Picture Winner"
+        puts "2021".colorize(:light_red) + "- Best Picture Winner" + " * * * ".colorize(:red)
         puts "Synopsis: ".colorize(:light_red) + "Nomadland is a surprisingly balanced look at the van living, nomadic life within America."
         puts "***".colorize(:yellow)
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
-        puts "1. > Save to To Watch List"
-        puts "2. > Save to Favourite List"
-        puts "3. > Back to Main Menu"
+        nomadland_open = true
+        while nomadland_open
+            puts "1: > Save to To Watch List"
+            puts "2: > Save to Favourite List"
+            puts "3: > Back to Best Picture Menu"
+            puts "4: > Exit App"
+            choice = gets.chomp.to_i
+            if choice == 1
+                @watchlist << "Nomadland"
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
+                puts "Saved to To Watch List".colorize(:light_blue)
+                puts @watchlist
+            elsif choice == 2
+                @favourite << "Nomadland"
+                sleep(1)
+                puts "."
+                sleep(1)
+                puts "."
+                sleep(1.5)
+                puts "Saved to Favourite List".colorize(:light_blue)
+                puts @favourite
+            elsif choice == 3
+                #Back to Best Picture Menu
+                nomadland_open = false
+            elsif choice == 4
+                exit
+                #exits app
+            end
+            puts "***".colorize(:yellow)
+            puts " * ".colorize(:light_yellow)
+            puts "***".colorize(:yellow)
+        end
     end
 end
\ No newline at end of file

commit 9d0ab87b3835d80516bc7bb10f35da4603539d64
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Sun May 23 10:30:49 2021 +1000

    removed rb files that weren't being used, to clean up. Will create again when needed. Updated menu items as to go back to previous menus. Updated randomiser layout and wait time.

diff --git a/index.rb b/index.rb
index 230f602..6f1ad08 100644
--- a/index.rb
+++ b/index.rb
@@ -45,7 +45,7 @@ def who_is_watching
     # I want to add names to this list
     puts "> New User"
     puts 
-    puts "Type your name, using a-z characters."
+    puts "Type your name, using a-z characters.".colorize(:blue)
     puts
 end
 
@@ -53,16 +53,22 @@ def menu
     puts "***".colorize(:yellow)
     puts " * ".colorize(:light_yellow)
     puts "***".colorize(:yellow)
+    puts
+    puts "MAIN MENU"
     puts "Please choose an option.".colorize(:blue)
     puts
     puts "1: Your Profile User List"
-    puts "2: View 2021 Best Picture Films"
-    puts "3: Add a movie to the list"
-    puts "4: Remove a movie from the list"
+    puts "2: Add a movie to your User list"
+    puts "3: Remove a movie from your User list"
+    puts
+    puts "4: The 2021 Best Picture Films"
     puts "5: View To Watch List"
     puts "6: View Favourite List"
+    puts
     puts "7: Random Movie Selector"
-    puts "8: Exit"
+    puts
+    puts
+    puts "8: Exit App"
     puts "***".colorize(:yellow)
     puts " * ".colorize(:light_yellow)
     puts "***".colorize(:yellow)
@@ -80,7 +86,7 @@ sleep(2)
 who_is_watching
 
 name = gets.strip.downcase.capitalize
-puts ">>>>> Thanks for joining us #{name}"
+puts ">>>>> Thanks for joining us #{name}".colorize(:light_blue)
 # wait 2 seconds
 mainmenu = List.new(name)
 sleep(2)
@@ -94,12 +100,12 @@ loop do
     # best picture just write file path
     when 1
         mainmenu.userlist
-    when 2
-        mainmenu.viewbestpicture
-    when 3 
+    when 2 
         mainmenu.add
-    when 4
+    when 3
         mainmenu.remove
+    when 4
+        mainmenu.viewbestpicture
     when 5
         mainmenu.watch
     when 6 
@@ -111,18 +117,14 @@ loop do
         puts "Random Movie Selector"
         puts
         puts "The random movie to watch tonight is... " 
-        sleep(2)
-        puts
+        sleep(1)
+        puts "."
+        sleep(1)
+        puts "."
+        sleep(1.5)
         puts "> " + "#{group_instance.shuffle.sample}"
         puts
-        # puts "Watch now? 'Yes' or 'No'"
-        # watchnow = gets.strip.downcase
-        # if watch == 'yes'
-        #     puts "watch now" 
-        # else
-        #     #go back to main menu
-        #     menu
-        # end
+        sleep(3)
     when 8
         exit
     end
diff --git a/list.rb b/list.rb
index a62c6d1..69ce832 100644
--- a/list.rb
+++ b/list.rb
@@ -10,13 +10,16 @@ class List
         @name = name
         @file_path = "./lists/#{name}.txt" 
         @list = file_to_array(@file_path)
+        @watchlist = ['empty']
+        @favourite = ['empty']
         # passing in name as arguement or instance variable@ 
     end
 
     def userlist
         puts
-        puts "#{@name}'s full list:"
-        
+        puts "#{@name}'s full list:".colorize(:blue)
+        puts
+
         #reading from a file instead of array
         if file_exist? 
             unless file_empty? #if not empty open it
@@ -27,14 +30,17 @@ class List
                     # working with files we can call each line of file through each_line
                 end
             else
-                puts "Your list is empty."
+                puts "Your list is empty.".colorize(:blue)
             end
         else #if file does not exist
             #refactoring by moving code down in private
             create
         end # if exist
         puts
-        puts "Great list!"
+        puts "Great list!".colorize(:blue)
+        puts
+        puts
+        sleep(3)
     end
 
     def viewbestpicture
@@ -54,16 +60,17 @@ class List
             puts "8: Nomadland - Winner".colorize(:cyan)
             puts
             puts "***".colorize(:yellow)
-            puts "9: Back to Main Menu"
+            puts "9: Back to MAIN MENU"
             puts "***".colorize(:yellow)
             puts " * ".colorize(:light_yellow)
             puts "***".colorize(:yellow)
         end
         
         movieitemselection = MovieItem.new
-        loop do
+        
+        viewbestpicture_open = true
+        while viewbestpicture_open
             bestmenu
-
             case gets.to_i
                 when 1
                     movieitemselection.soundofmetal
@@ -82,8 +89,7 @@ class List
                 when 8
                     movieitemselection.nomadland
                 when 9
-                    puts "back to main menu"
-                    puts "how do I do this"
+                    viewbestpicture_open = false
                 end
                 # stop loop?
                 # system 'clear'
@@ -93,92 +99,142 @@ class List
 
     def add
         # check whether the file exists and read  into array, otherwise create a new file
-    system 'clear'
-        puts "Add a movie to the list"    
-        puts 
-        print ">"
+        puts "Add a movie to the list".colorize(:blue)    
+        puts
+
+        File.open(@file_path, 'r') do |file|
+            file.each_line do |line|
+                puts "#{file.lineno} - #{line}"
+            end
+            # working with files we can call each line of file through each_line
+        end
+        puts
+        puts "Enter the movie name: ".colorize(:blue)
+        print "> "
         movie = gets.strip
+        puts
         # add movie to array
         @list << movie
+
         # write contents of array into file
         # @list = file_to_array(@file_path)
         array_to_file(@list)
-        puts "Success!"
-        puts "***".colorize(:yellow)
+        puts "Success! Movie added to User List".colorize(:blue)
+        puts
+
+        File.open(@file_path, 'r') do |file|
+            file.each_line do |line|
+                puts "#{file.lineno} - #{line}"
+            end
+            # working with files we can call each line of file through each_line
+        end
+        sleep(2)
+        puts
+        add_open = true
+        while add_open
+            puts "Select your next option:".colorize(:light_blue)
+            puts "1: > Add another movie"
+            puts "2: > Back to MAIN MENU"
+            puts "3: > Exit App"
+            choice = gets.chomp.to_i
+            if choice == 1
+                # add = false
+                puts "Add another movie not working"
+            elsif choice == 2
+                add_open = false
+            else choice == 3
+                exit
+                #exits app
+            end
+        end
+        # sleep(1)
+        puts
     end
 
     def remove
     system 'clear'
-        puts "Remove a movie from the list"
+        puts "Remove a movie from the list".colorize(:blue)
         @list = file_to_array(@file_path)
         # view
-        puts "Enter the movie number: "
-        print ">"
+        puts
+
+        File.open(@file_path, 'r') do |file|
+            file.each_line do |line|
+                puts "#{file.lineno}. #{line}"
+            end
+            # working with files we can call each line of file through each_line
+        end
+        puts
+
+        puts "Enter the movie number: ".colorize(:blue)
+        print "> "
         movie_no = gets.to_i - 1
         # the file starts at 1 but array starts at 0 does so need to -1 to start.
         @list.delete_at movie_no 
-        puts "Success! Deleted"
+
+        puts
+        puts "Success! Deleted".colorize(:blue)
         array_to_file(@list)
-        puts "***".colorize(:yellow)
+        puts
+        
+        File.open(@file_path, 'r') do |file|
+            file.each_line do |line|
+                puts "#{file.lineno}. #{line}"
+            end
+            # working with files we can call each line of file through each_line
+        end
+        sleep(2)
+        puts
+
+        remove_open = true
+        while remove_open
+            puts "Select your next option:".colorize(:light_blue)
+            puts "1: > Remove another movie"
+            puts "2: > Back to MAIN MENU"
+            puts "3: > Exit App"
+            choice = gets.chomp.to_i
+            if choice == 1
+                # add = false
+                puts "Remove another movie not working"
+            elsif choice == 2
+                remove_open = false
+            else choice == 3
+                exit
+                #exits app
+            end
+        end
+        # sleep(1)
+        puts
     end
 
     def watch
+    system 'clear'
         puts "#{@name}'s To Watch List"
         puts
-        # puts "You don't have any items to list"
-        puts @watchlist
-        # if @watchlist > 0
-        #     puts "#{@name}'s Watch List"
-        #     puts @watchlist
-        #     puts "***"
-        # else
-        #     puts "You don't have any items to list"
-        #     puts "***"
-        #     puts "> Back to Main Menu"
-        #     puts "> Exit"
-        # end
+        if @watchlist = ['empty']
+            puts "You don't have any items to list"
+        else
+            puts @watchlist
+        end
+        sleep(3)
+        puts
+        puts
     end
 
     def fave
-        puts "#{@name}'s Favourite List"
-        puts
-        # puts "You don't have any items to list"
-        puts @favourite
-        # if @favourite > 0
-        #     puts "#{@name}'s Favourite List"
-        #     puts @favourite
-        #     puts "***"
-        # else
-        #     puts "You don't have any items to list"
-        #     puts "***"
-        #     puts "> Back to Main Menu"
-        #     puts "> Exit"
-        # end
-    end
-
-    def random
     system 'clear'
-        group_instance = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
-
-        puts
-        puts "Random Movie Selector"
+        puts "#{@name}'s To Watch List"
         puts
-        puts "The random movie to watch tonight is... " 
-        sleep(2)
+        if @favourite = ['empty']
+            puts "You don't have any items to list"
+        else
+            puts @favourite
+        end
+        sleep(3)
         puts
-        puts "> " + "#{group_instance.shuffle.sample}"
         puts
-        # puts "Watch now? 'Yes' or 'No'"
-        # watchnow = gets.strip.downcase
-        # if watch == 'yes'
-        #     puts "watch now" 
-        # else
-        #     #go back to main menu
-        #     menu
-        # end
     end
 
-
     # You can have these in the public section but makes it easier to read
     # methods that arern't called outside of class should be in private. 
     # methods called outside of class should be easily visble in public section.
diff --git a/lists/Bella.txt b/lists/Bella.txt
index dc21123..88ec72b 100644
--- a/lists/Bella.txt
+++ b/lists/Bella.txt
@@ -1,5 +1,7 @@
 Sound of Metal
 Mank
 Minari
-Snoo Snoo
-
+Minority Report
+Perfect Blue
+Drive
+Between the Pines
diff --git a/main_menu.rb b/main_menu.rb
deleted file mode 100644
index e69de29..0000000
diff --git a/movie_item.rb b/movie_item.rb
index 0a7e9a2..8f38bb4 100644
--- a/movie_item.rb
+++ b/movie_item.rb
@@ -25,7 +25,7 @@ class MovieItem
         while soundofmetal_open
             puts "1: > Save to To Watch List"
             puts "2: > Save to Favourite List"
-            puts "3: > Back to Menu"
+            puts "3: > Back to Best Picture Menu"
             puts "4: > Exit App"
             choice = gets.chomp.to_i
             if choice == 1
@@ -39,10 +39,11 @@ class MovieItem
                 puts "Saved to Favourite List"
                 puts @favourite
             elsif choice == 3
-                # back to main menu
+                #Back to Best Picture Menu
+                soundofmetal_open = false
             elsif choice == 4
                 exit
-                #does this mean back to previous menu?
+                #exits app
             end
             puts "***".colorize(:yellow)
             puts " * ".colorize(:light_yellow)
diff --git a/oscars_app.rb b/oscars_app.rb
deleted file mode 100644
index e69de29..0000000
diff --git a/randomiser.rb b/randomiser.rb
deleted file mode 100644
index e69de29..0000000
diff --git a/saving_session.rb b/saving_session.rb
deleted file mode 100644
index e69de29..0000000

commit bf7fd2c57a67489367cdb19b45ae04b10fe2e0a0
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Fri May 21 18:24:04 2021 +1000

    attempting to update menu choices and execute returns to main menu. Moved Randomiser from list.rb into index.rb

diff --git a/awards.rb b/awards.rb
index 3eff6f6..e81b022 100644
--- a/awards.rb
+++ b/awards.rb
@@ -83,12 +83,12 @@ awards = [
 
 # getting key value info from every array
 # how do I access only the first item of each hash
-awards.each do |hash|
-    puts "these are the names of the movies"
-    hash.each do |key,value|
-        puts (key.to_s + ": " + value.to_s)
-    end
-end
+# awards.each do |hash|
+#     puts "these are the names of the movies"
+#     hash.each do |key,value|
+#         puts (key.to_s + ": " + value.to_s)
+#     end
+# end
 
 # only getting info from single arrays
 # puts awards[0][:name]
diff --git a/index.rb b/index.rb
index 1d6cf34..230f602 100644
--- a/index.rb
+++ b/index.rb
@@ -21,24 +21,18 @@ def title
     puts "██║░░██║╚█████╗░██║░░╚═╝███████║██████╔╝╚█████╗░  ░░░░░██║██║░░░██║██║░░██║██║░░██╗░█████╗░░"
     puts "██║░░██║░╚═══██╗██║░░██╗██╔══██║██╔══██╗░╚═══██╗  ██╗░░██║██║░░░██║██║░░██║██║░░╚██╗██╔══╝░░"
     puts "╚█████╔╝██████╔╝╚█████╔╝██║░░██║██║░░██║██████╔╝  ╚█████╔╝╚██████╔╝██████╔╝╚██████╔╝███████╗"
-    puts "░╚════╝░╚═════╝░░╚════╝░╚═╝░░╚═╝╚═╝░░╚═╝╚═════╝░  ░╚════╝░░╚═════╝░╚═════╝░░╚═════╝░╚══════╝"
+    puts " ╚════╝ ╚═════╝  ╚════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝    ╚════╝  ╚═════╝ ╚═════╝  ╚═════╝ ╚══════╝"
     puts 
-    puts "Be your own movie critic!"
+    puts "Welcome to Oscars Judge Terminal App!" 
+    puts "Become your own movie critic!"
     puts "***".colorize(:yellow)
     puts " * ".colorize(:light_yellow)
     puts "***".colorize(:yellow)
 end
 
-def greeting    
-    puts "Welcome to Oscars Judge Terminal App!" 
-    puts "Favourite, watch, and rate Oscars movies."
-    puts
-    puts
-end
-
 def instructions
-    puts "***".colorize(:yellow) + "INSTRUCTIONS"
-    puts ">> Use the UP and DOWN arrows to move to an option, ENTER to select."
+    puts "INSTRUCTIONS"
+    puts "Use the UP and DOWN arrows to move to an option, ENTER to select."
     puts "***".colorize(:yellow)
     puts " * ".colorize(:light_yellow)
     puts "***".colorize(:yellow)
@@ -46,9 +40,12 @@ def instructions
 end
 
 def who_is_watching
+    puts "Who is watching?"
     puts "> Bella"
+    # I want to add names to this list
     puts "> New User"
-    puts "Who is watching?"
+    puts 
+    puts "Type your name, using a-z characters."
     puts
 end
 
@@ -56,8 +53,8 @@ def menu
     puts "***".colorize(:yellow)
     puts " * ".colorize(:light_yellow)
     puts "***".colorize(:yellow)
-    puts 
     puts "Please choose an option.".colorize(:blue)
+    puts
     puts "1: Your Profile User List"
     puts "2: View 2021 Best Picture Films"
     puts "3: Add a movie to the list"
@@ -66,7 +63,6 @@ def menu
     puts "6: View Favourite List"
     puts "7: Random Movie Selector"
     puts "8: Exit"
-    puts
     puts "***".colorize(:yellow)
     puts " * ".colorize(:light_yellow)
     puts "***".colorize(:yellow)
@@ -78,10 +74,8 @@ end
 system 'clear'
 title
 sleep(1)
-greeting
-sleep(1)
 instructions
-sleep(1)
+sleep(2)
 # wait 3 seconds
 who_is_watching
 
@@ -89,11 +83,12 @@ name = gets.strip.downcase.capitalize
 puts ">>>>> Thanks for joining us #{name}"
 # wait 2 seconds
 mainmenu = List.new(name)
-sleep(1)
+sleep(2)
+
 loop do
     #start 
+    
     menu
-
     case gets.to_i
     # view list first then create view best picture.
     # best picture just write file path
@@ -110,9 +105,26 @@ loop do
     when 6 
         mainmenu.fave
     when 7
-        mainmenu.random
+        group_instance = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
+
+        puts
+        puts "Random Movie Selector"
+        puts
+        puts "The random movie to watch tonight is... " 
+        sleep(2)
+        puts
+        puts "> " + "#{group_instance.shuffle.sample}"
+        puts
+        # puts "Watch now? 'Yes' or 'No'"
+        # watchnow = gets.strip.downcase
+        # if watch == 'yes'
+        #     puts "watch now" 
+        # else
+        #     #go back to main menu
+        #     menu
+        # end
     when 8
         exit
     end
 end
-
+system 'clear'
diff --git a/list.rb b/list.rb
index bf9020a..a62c6d1 100644
--- a/list.rb
+++ b/list.rb
@@ -1,5 +1,5 @@
 require_relative './movie_item'
-require_relative './awards'
+# require_relative './awards'
 require 'colorize'
 # require_relative './index'
 
@@ -12,9 +12,9 @@ class List
         @list = file_to_array(@file_path)
         # passing in name as arguement or instance variable@ 
     end
-    
-    def userlist
 
+    def userlist
+        puts
         puts "#{@name}'s full list:"
         
         #reading from a file instead of array
@@ -33,6 +33,8 @@ class List
             #refactoring by moving code down in private
             create
         end # if exist
+        puts
+        puts "Great list!"
     end
 
     def viewbestpicture
@@ -40,7 +42,8 @@ class List
         def bestmenu
             puts "2021 Best Picture Films:"
             puts "Please choose an option.".colorize(:blue)
-            puts "*******************************************".colorize(:yellow)
+            puts "***".colorize(:yellow)
+            puts
             puts "1: Sound of Metal"
             puts "2: Mank"
             puts "3: Minari"
@@ -49,7 +52,12 @@ class List
             puts "6: Judas and the Black Messiah"
             puts "7: The Trial of the Chicago 7"
             puts "8: Nomadland - Winner".colorize(:cyan)
-            puts "*******************************************".colorize(:yellow)
+            puts
+            puts "***".colorize(:yellow)
+            puts "9: Back to Main Menu"
+            puts "***".colorize(:yellow)
+            puts " * ".colorize(:light_yellow)
+            puts "***".colorize(:yellow)
         end
         
         movieitemselection = MovieItem.new
@@ -73,6 +81,9 @@ class List
                     movieitemselection.trial
                 when 8
                     movieitemselection.nomadland
+                when 9
+                    puts "back to main menu"
+                    puts "how do I do this"
                 end
                 # stop loop?
                 # system 'clear'
@@ -112,10 +123,10 @@ class List
     end
 
     def watch
-    system 'clear'
         puts "#{@name}'s To Watch List"
-        puts "You don't have any items to list"
-        puts "***".colorize(:yellow)
+        puts
+        # puts "You don't have any items to list"
+        puts @watchlist
         # if @watchlist > 0
         #     puts "#{@name}'s Watch List"
         #     puts @watchlist
@@ -129,10 +140,10 @@ class List
     end
 
     def fave
-    system 'clear'
         puts "#{@name}'s Favourite List"
-        puts "You don't have any items to list"
-        puts "***".colorize(:yellow)
+        puts
+        # puts "You don't have any items to list"
+        puts @favourite
         # if @favourite > 0
         #     puts "#{@name}'s Favourite List"
         #     puts @favourite
diff --git a/lists/Bella.txt b/lists/Bella.txt
index ede41db..dc21123 100644
--- a/lists/Bella.txt
+++ b/lists/Bella.txt
@@ -1,9 +1,5 @@
 Sound of Metal
 Mank
 Minari
-Promising Young Woman
-The Father
-Judas and the Black Messiah
-The Trial of the Chicago 7
-Nomadland
 Snoo Snoo
+
diff --git a/lists/Clear.txt b/lists/Clear.txt
deleted file mode 100644
index 8b13789..0000000
--- a/lists/Clear.txt
+++ /dev/null
@@ -1 +0,0 @@
-
diff --git a/movie_item.rb b/movie_item.rb
index 1118486..0a7e9a2 100644
--- a/movie_item.rb
+++ b/movie_item.rb
@@ -1,18 +1,16 @@
+# require_relative './list'
 require 'colorize'
 
 class MovieItem
-    attr_reader :moviename
-
+#     attr_accessor :watchlist
+    
     def initialize
-        #could pass in movie name, not sure how yet.
-        # I think it could be an array, and loop through information, but not sure how to do it.
-        @moviename = moviename
+#         # @moviename = moviename
+        @watchlist = []    
+        @favourite = []
     end
-    # removed to refactor through attr_accessor
-    # def name
-    #     return @name
-    # end
 
+# end
     def soundofmetal
     system 'clear'
         puts " Sound of Metal ".colorize(:red).on_white.underline
@@ -23,9 +21,33 @@ class MovieItem
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
-        puts "1. > Save to To Watch List"
-        puts "2. > Save to Favourite List"
-        puts "3. > Back to Main Menu"
+        soundofmetal_open = true
+        while soundofmetal_open
+            puts "1: > Save to To Watch List"
+            puts "2: > Save to Favourite List"
+            puts "3: > Back to Menu"
+            puts "4: > Exit App"
+            choice = gets.chomp.to_i
+            if choice == 1
+                @watchlist << "Sound of Metal"
+                puts
+                puts "Saved to To Watch List"
+                puts @watchlist
+            elsif choice == 2
+                @favourite << "Sound of Metal"
+                puts
+                puts "Saved to Favourite List"
+                puts @favourite
+            elsif choice == 3
+                # back to main menu
+            elsif choice == 4
+                exit
+                #does this mean back to previous menu?
+            end
+            puts "***".colorize(:yellow)
+            puts " * ".colorize(:light_yellow)
+            puts "***".colorize(:yellow)
+        end
     end
 
     def mank
@@ -38,9 +60,30 @@ class MovieItem
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
-        puts "1. > Save to To Watch List"
-        puts "2. > Save to Favourite List"
-        puts "3. > Back to Main Menu"
+        mank_open = true
+        while mank_open
+            puts "1: > Save to To Watch List"
+            puts "2: > Save to Favourite List"
+            puts "3: > Exit"
+            choice = gets.chomp.to_i
+            if choice == 1
+                @watchlist << "Mank"
+                puts
+                puts "Saved to To Watch List"
+                puts @watchlist
+            elsif choice == 2
+                @favourite << "Mank"
+                puts
+                puts "Saved to Favourite List"
+                puts @favourite
+            elsif choice == 3
+                exit
+                #does this mean back to previous menu?
+            end
+            puts "***".colorize(:yellow)
+            puts " * ".colorize(:light_yellow)
+            puts "***".colorize(:yellow)
+        end
     end
 
     def minari
@@ -53,9 +96,29 @@ class MovieItem
         puts " * ".colorize(:light_yellow)
         puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
-        puts "1. > Save to To Watch List"
-        puts "2. > Save to Favourite List"
-        puts "3. > Back to Main Menu"
+        while minari_open
+            puts "1: > Save to To Watch List"
+            puts "2: > Save to Favourite List"
+            puts "3: > Exit"
+            choice = gets.chomp.to_i
+            if choice == 1
+                @watchlist << "Minari"
+                puts
+                puts "Saved to To Watch List"
+                puts @watchlist
+            elsif choice == 2
+                @favourite << "Minari"
+                puts
+                puts "Saved to Favourite List"
+                puts @favourite
+            elsif choice == 3
+                exit
+                #does this mean back to previous menu?
+            end
+            puts "***".colorize(:yellow)
+            puts " * ".colorize(:light_yellow)
+            puts "***".colorize(:yellow)
+        end
     end
 
     def promising

commit 135a03ed3f65b09e8dd351ea85e766c32a57eb48
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Fri May 21 14:00:46 2021 +1000

    trying to create accessible hashes within an array to access across multiple files

diff --git a/Gemfile b/Gemfile
index da56d8c..e27352f 100644
--- a/Gemfile
+++ b/Gemfile
@@ -9,4 +9,6 @@ git_source(:github) { |repo_name| "https://github.com/#{repo_name}" }
 gem "rspec", "~> 3.10"
 gem 'tty-prompt', '~> 0.23.1'
 gem 'colorize', '~> 0.8.1'
-gem 'launchy', '~> 2.4', '>= 2.4.3'
+# gem 'launchy', '~> 2.4', '>= 2.4.3'
+# gem "whirly" # couldn't work on ruby 2+
+# gem "tty-spinner" # couldn't figure out how to work
diff --git a/Gemfile.lock b/Gemfile.lock
index 592e1ee..06406fe 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -1,10 +1,15 @@
 GEM
   remote: https://rubygems.org/
   specs:
+    addressable (2.7.0)
+      public_suffix (>= 2.0.2, < 5.0)
     colorize (0.8.1)
     diff-lcs (1.4.4)
+    launchy (2.5.0)
+      addressable (~> 2.7)
     pastel (0.8.0)
       tty-color (~> 0.5)
+    public_suffix (4.0.6)
     rspec (3.10.0)
       rspec-core (~> 3.10.0)
       rspec-expectations (~> 3.10.0)
@@ -28,6 +33,8 @@ GEM
       tty-screen (~> 0.8)
       wisper (~> 2.0)
     tty-screen (0.8.1)
+    tty-spinner (0.9.3)
+      tty-cursor (~> 0.7)
     wisper (2.0.1)
 
 PLATFORMS
@@ -35,8 +42,10 @@ PLATFORMS
 
 DEPENDENCIES
   colorize (~> 0.8.1)
+  launchy (~> 2.4, >= 2.4.3)
   rspec (~> 3.10)
   tty-prompt (~> 0.23.1)
+  tty-spinner
 
 BUNDLED WITH
    2.2.17
diff --git a/awards.rb b/awards.rb
index b60408f..3eff6f6 100644
--- a/awards.rb
+++ b/awards.rb
@@ -63,4 +63,36 @@ awards = [
     synopsis: "Nomadland is a surprisingly balanced look at the van living, nomadic life within America.",
     favourite: nil,
     towatch: nil}
-]
\ No newline at end of file
+]
+
+# {year: 2021, 
+# category: "Best Picture",
+# name: "Sound of Metal", 
+# director: "Darius Marder", 
+# synopsis: "During a series of adrenaline-fueled one-night gigs, itinerant punk-metal drummer Ruben (Riz Ahmed) begins to experience intermittent hearing loss.",
+# favourite: nil,
+# towatch: nil}
+
+# get only info of all strings
+# awards.each do |hash|
+#     puts "these are the names of the movies"
+#     hash.each do |key,value|
+#         puts (value.to_s)
+#     end
+# end
+
+# getting key value info from every array
+# how do I access only the first item of each hash
+awards.each do |hash|
+    puts "these are the names of the movies"
+    hash.each do |key,value|
+        puts (key.to_s + ": " + value.to_s)
+    end
+end
+
+# only getting info from single arrays
+# puts awards[0][:name]
+# puts awards[0][:year]
+# puts awards[0][:director]
+# puts awards[0][:synopsis]
+
diff --git a/index.rb b/index.rb
index c54bfc0..1d6cf34 100644
--- a/index.rb
+++ b/index.rb
@@ -15,29 +15,48 @@ require_relative "./list"
 require 'colorize'
 # require_relative "/.user_profile"
 
-def greeting 
-    puts "Oscars Judge"
+def title 
+    puts "░█████╗░░██████╗░█████╗░░█████╗░██████╗░░██████╗  ░░░░░██╗██╗░░░██╗██████╗░░██████╗░███████╗"
+    puts "██╔══██╗██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝  ░░░░░██║██║░░░██║██╔══██╗██╔════╝░██╔════╝"
+    puts "██║░░██║╚█████╗░██║░░╚═╝███████║██████╔╝╚█████╗░  ░░░░░██║██║░░░██║██║░░██║██║░░██╗░█████╗░░"
+    puts "██║░░██║░╚═══██╗██║░░██╗██╔══██║██╔══██╗░╚═══██╗  ██╗░░██║██║░░░██║██║░░██║██║░░╚██╗██╔══╝░░"
+    puts "╚█████╔╝██████╔╝╚█████╔╝██║░░██║██║░░██║██████╔╝  ╚█████╔╝╚██████╔╝██████╔╝╚██████╔╝███████╗"
+    puts "░╚════╝░╚═════╝░░╚════╝░╚═╝░░╚═╝╚═╝░░╚═╝╚═════╝░  ░╚════╝░░╚═════╝░╚═════╝░░╚═════╝░╚══════╝"
+    puts 
     puts "Be your own movie critic!"
+    puts "***".colorize(:yellow)
+    puts " * ".colorize(:light_yellow)
+    puts "***".colorize(:yellow)
+end
+
+def greeting    
+    puts "Welcome to Oscars Judge Terminal App!" 
+    puts "Favourite, watch, and rate Oscars movies."
     puts
-    puts "*******************************************".colorize(:yellow)
-    puts
-    puts "Welcome to the app that helps you favourite, watch, and rate Oscars movies."
     puts
-    puts "*******************************************".colorize(:yellow)
-    puts "Use the UP and DOWN arrows to move to an option, ENTER to select."
+end
+
+def instructions
+    puts "***".colorize(:yellow) + "INSTRUCTIONS"
+    puts ">> Use the UP and DOWN arrows to move to an option, ENTER to select."
+    puts "***".colorize(:yellow)
+    puts " * ".colorize(:light_yellow)
+    puts "***".colorize(:yellow)
     # wait 3 seconds
 end
 
 def who_is_watching
-    puts "Oscars Judge"
-    puts "*******************************************".colorize(:yellow)
     puts "> Bella"
     puts "> New User"
     puts "Who is watching?"
+    puts
 end
 
 def menu
-    puts "*******************************************".colorize(:yellow)
+    puts "***".colorize(:yellow)
+    puts " * ".colorize(:light_yellow)
+    puts "***".colorize(:yellow)
+    puts 
     puts "Please choose an option.".colorize(:blue)
     puts "1: Your Profile User List"
     puts "2: View 2021 Best Picture Films"
@@ -47,14 +66,22 @@ def menu
     puts "6: View Favourite List"
     puts "7: Random Movie Selector"
     puts "8: Exit"
-    puts "*******************************************".colorize(:yellow)
+    puts
+    puts "***".colorize(:yellow)
+    puts " * ".colorize(:light_yellow)
+    puts "***".colorize(:yellow)
 end
 # ------------------------
 # main body
 # ------------------------
 
 system 'clear'
+title
+sleep(1)
 greeting
+sleep(1)
+instructions
+sleep(1)
 # wait 3 seconds
 who_is_watching
 
@@ -62,7 +89,7 @@ name = gets.strip.downcase.capitalize
 puts ">>>>> Thanks for joining us #{name}"
 # wait 2 seconds
 mainmenu = List.new(name)
-
+sleep(1)
 loop do
     #start 
     menu
diff --git a/list.rb b/list.rb
index 4cbb448..bf9020a 100644
--- a/list.rb
+++ b/list.rb
@@ -1,4 +1,5 @@
 require_relative './movie_item'
+require_relative './awards'
 require 'colorize'
 # require_relative './index'
 
@@ -35,6 +36,7 @@ class List
     end
 
     def viewbestpicture
+    system 'clear'
         def bestmenu
             puts "2021 Best Picture Films:"
             puts "Please choose an option.".colorize(:blue)
@@ -72,8 +74,10 @@ class List
                 when 8
                     movieitemselection.nomadland
                 end
+                # stop loop?
+                # system 'clear'
             end
-        #end getting an error, I'm not sure why I can't close this?
+        #end #getting an error, I'm not sure why I can't close this loop ?
     end
 
     def add
@@ -145,9 +149,14 @@ class List
     system 'clear'
         group_instance = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
 
+        puts
         puts "Random Movie Selector"
-        puts "***".colorize(:yellow)
-        puts "The random movie to watch tonight is #{group_instance.shuffle.sample}"
+        puts
+        puts "The random movie to watch tonight is... " 
+        sleep(2)
+        puts
+        puts "> " + "#{group_instance.shuffle.sample}"
+        puts
         # puts "Watch now? 'Yes' or 'No'"
         # watchnow = gets.strip.downcase
         # if watch == 'yes'
diff --git a/lists/Clear.txt b/lists/Clear.txt
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/lists/Clear.txt
@@ -0,0 +1 @@
+
diff --git a/movie_item.rb b/movie_item.rb
index 60b9098..1118486 100644
--- a/movie_item.rb
+++ b/movie_item.rb
@@ -20,6 +20,8 @@ class MovieItem
         puts "Director".colorize(:light_red) + "- Darius Marder"
         puts "Synopsis: ".colorize(:light_red) + "During a series of adrenaline-fueled one-night gigs, itinerant punk-metal drummer Ruben (Riz Ahmed) begins to experience intermittent hearing loss."
         puts "***".colorize(:yellow)
+        puts " * ".colorize(:light_yellow)
+        puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         puts "1. > Save to To Watch List"
         puts "2. > Save to Favourite List"
@@ -33,6 +35,8 @@ class MovieItem
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + "Mank is a 2020 American biographical drama film about screenwriter Herman J. Mankiewicz and his development of the screenplay for Citizen Kane (1941)."
         puts "***".colorize(:yellow)
+        puts " * ".colorize(:light_yellow)
+        puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         puts "1. > Save to To Watch List"
         puts "2. > Save to Favourite List"
@@ -46,6 +50,8 @@ class MovieItem
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + "A tender and sweeping story about what roots us, Minari follows a Korean-American family that moves to a tiny Arkansas farm in search of their own American dream."
         puts "***".colorize(:yellow)
+        puts " * ".colorize(:light_yellow)
+        puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         puts "1. > Save to To Watch List"
         puts "2. > Save to Favourite List"
@@ -59,6 +65,8 @@ class MovieItem
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + "The film stars Carey Mulligan as a vigilante seeking to avenge the death of her best friend who was a rape victim."
         puts "***".colorize(:yellow)
+        puts " * ".colorize(:light_yellow)
+        puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         puts "1. > Save to To Watch List"
         puts "2. > Save to Favourite List"
@@ -72,6 +80,8 @@ class MovieItem
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + "Based on the acclaimed, award-winning play, The Father starts out as a deceptively simple drama hinged on a deceptively familiar dynamic."
         puts "***".colorize(:yellow)
+        puts " * ".colorize(:light_yellow)
+        puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         puts "1. > Save to To Watch List"
         puts "2. > Save to Favourite List"
@@ -85,6 +95,8 @@ class MovieItem
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + "FBI informant William O'Neal infiltrates the Illinois Black Panther Party and is tasked with keeping tabs on their charismatic leader, Chairman Fred Hampton."
         puts "***".colorize(:yellow)
+        puts " * ".colorize(:light_yellow)
+        puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         puts "1. > Save to To Watch List"
         puts "2. > Save to Favourite List"
@@ -98,6 +110,8 @@ class MovieItem
         puts "2021".colorize(:light_red) + " - Best Picture Nominee"
         puts "Synopsis".colorize(:light_red) + "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago."
         puts "***".colorize(:yellow)
+        puts " * ".colorize(:light_yellow)
+        puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         puts "1. > Save to To Watch List"
         puts "2. > Save to Favourite List"
@@ -111,6 +125,8 @@ class MovieItem
         puts "2021".colorize(:light_red) + "- Best Picture Winner"
         puts "Synopsis: ".colorize(:light_red) + "Nomadland is a surprisingly balanced look at the van living, nomadic life within America."
         puts "***".colorize(:yellow)
+        puts " * ".colorize(:light_yellow)
+        puts "***".colorize(:yellow)
         puts "Please choose an option.".colorize(:blue)
         puts "1. > Save to To Watch List"
         puts "2. > Save to Favourite List"

commit f275883e4a1b99e112cab65e8f4a933244ac1f1a
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Fri May 21 10:40:04 2021 +1000

    applied colorize gem to heading and divder interface features.

diff --git a/Gemfile b/Gemfile
index b65c667..da56d8c 100644
--- a/Gemfile
+++ b/Gemfile
@@ -9,3 +9,4 @@ git_source(:github) { |repo_name| "https://github.com/#{repo_name}" }
 gem "rspec", "~> 3.10"
 gem 'tty-prompt', '~> 0.23.1'
 gem 'colorize', '~> 0.8.1'
+gem 'launchy', '~> 2.4', '>= 2.4.3'
diff --git a/awards.rb b/awards.rb
index b901998..b60408f 100644
--- a/awards.rb
+++ b/awards.rb
@@ -60,7 +60,7 @@ awards = [
     winner: "Winner", 
     name: "Nomadland", 
     director: "Chloe Zhao", 
-    synopsis: "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago.",
+    synopsis: "Nomadland is a surprisingly balanced look at the van living, nomadic life within America.",
     favourite: nil,
     towatch: nil}
 ]
\ No newline at end of file
diff --git a/index.rb b/index.rb
index d5b1d30..c54bfc0 100644
--- a/index.rb
+++ b/index.rb
@@ -2,31 +2,52 @@
 # create a new list for a new user
 #when a new list is created it is called by the name of the user
 
-#1. View existing list
-#2. Create a new list for a new user
-#3. Add a new task to the list
-#4. Remove a tast from the list
+#1. View 2021 Best Picture Films
+#2. Add a new task to the list
+#3. Remove a tast from the list
+#4. View to Watch List
+#5. View Favourite List
+#6. Randomise
+#7. Exit
+
 
 require_relative "./list"
+require 'colorize'
+# require_relative "/.user_profile"
 
 def greeting 
-    puts "Hi!"
-    puts "Welcome to Oscars Judge Terminal App"
-    puts "What is your name?"
-    puts "*******************************************"
+    puts "Oscars Judge"
+    puts "Be your own movie critic!"
+    puts
+    puts "*******************************************".colorize(:yellow)
+    puts
+    puts "Welcome to the app that helps you favourite, watch, and rate Oscars movies."
+    puts
+    puts "*******************************************".colorize(:yellow)
+    puts "Use the UP and DOWN arrows to move to an option, ENTER to select."
+    # wait 3 seconds
+end
+
+def who_is_watching
+    puts "Oscars Judge"
+    puts "*******************************************".colorize(:yellow)
+    puts "> Bella"
+    puts "> New User"
+    puts "Who is watching?"
 end
 
 def menu
-    puts "*******************************************"
-    puts "Please choose an option."
-    puts "1: View 2021 Best Picture Films"
-    puts "2: Add a movie to the list"
-    puts "3: Remove a movie from the list"
-    puts "4: View To Watch List"
-    puts "5: View Favourite List"
-    puts "6: Random Movie Selector"
-    puts "7: Exit"
-    puts "*******************************************"
+    puts "*******************************************".colorize(:yellow)
+    puts "Please choose an option.".colorize(:blue)
+    puts "1: Your Profile User List"
+    puts "2: View 2021 Best Picture Films"
+    puts "3: Add a movie to the list"
+    puts "4: Remove a movie from the list"
+    puts "5: View To Watch List"
+    puts "6: View Favourite List"
+    puts "7: Random Movie Selector"
+    puts "8: Exit"
+    puts "*******************************************".colorize(:yellow)
 end
 # ------------------------
 # main body
@@ -34,10 +55,12 @@ end
 
 system 'clear'
 greeting
+# wait 3 seconds
+who_is_watching
 
 name = gets.strip.downcase.capitalize
 puts ">>>>> Thanks for joining us #{name}"
-
+# wait 2 seconds
 mainmenu = List.new(name)
 
 loop do
@@ -48,18 +71,20 @@ loop do
     # view list first then create view best picture.
     # best picture just write file path
     when 1
+        mainmenu.userlist
+    when 2
         mainmenu.viewbestpicture
-    when 2 
+    when 3 
         mainmenu.add
-    when 3
-        mainmenu.remove
     when 4
+        mainmenu.remove
+    when 5
         mainmenu.watch
-    when 5 
+    when 6 
         mainmenu.fave
-    when 6
-        mainmenu.random
     when 7
+        mainmenu.random
+    when 8
         exit
     end
 end
diff --git a/list.rb b/list.rb
index c1a5ccb..4cbb448 100644
--- a/list.rb
+++ b/list.rb
@@ -1,16 +1,21 @@
+require_relative './movie_item'
+require 'colorize'
+# require_relative './index'
+
 class List
     # do i need the initialise function?
     # yes because each user needs a new one
     def initialize(name)
         @name = name
         @file_path = "./lists/#{name}.txt" 
+        @list = file_to_array(@file_path)
         # passing in name as arguement or instance variable@ 
     end
     
-    def viewbestpicture
-        # bestpicture = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
+    def userlist
 
-        puts "2021 Best Picture Films: #{@name}"
+        puts "#{@name}'s full list:"
+        
         #reading from a file instead of array
         if file_exist? 
             unless file_empty? #if not empty open it
@@ -29,6 +34,48 @@ class List
         end # if exist
     end
 
+    def viewbestpicture
+        def bestmenu
+            puts "2021 Best Picture Films:"
+            puts "Please choose an option.".colorize(:blue)
+            puts "*******************************************".colorize(:yellow)
+            puts "1: Sound of Metal"
+            puts "2: Mank"
+            puts "3: Minari"
+            puts "4: Promising Young Woman"
+            puts "5: The Father"
+            puts "6: Judas and the Black Messiah"
+            puts "7: The Trial of the Chicago 7"
+            puts "8: Nomadland - Winner".colorize(:cyan)
+            puts "*******************************************".colorize(:yellow)
+        end
+        
+        movieitemselection = MovieItem.new
+        loop do
+            bestmenu
+
+            case gets.to_i
+                when 1
+                    movieitemselection.soundofmetal
+                when 2
+                    movieitemselection.mank
+                when 3
+                    movieitemselection.minari
+                when 4
+                    movieitemselection.promising
+                when 5
+                    movieitemselection.thefather
+                when 6
+                    movieitemselection.judas
+                when 7
+                    movieitemselection.trial
+                when 8
+                    movieitemselection.nomadland
+                end
+            end
+        #end getting an error, I'm not sure why I can't close this?
+    end
+
     def add
         # check whether the file exists and read  into array, otherwise create a new file
     system 'clear'
@@ -36,13 +83,13 @@ class List
         puts 
         print ">"
         movie = gets.strip
-        @list = file_to_array(@file_path)
         # add movie to array
         @list << movie
         # write contents of array into file
+        # @list = file_to_array(@file_path)
         array_to_file(@list)
         puts "Success!"
-        puts "*******************************************"
+        puts "***".colorize(:yellow)
     end
 
     def remove
@@ -57,22 +104,58 @@ class List
         @list.delete_at movie_no 
         puts "Success! Deleted"
         array_to_file(@list)
-        puts "*******************************************"
+        puts "***".colorize(:yellow)
     end
 
     def watch
-        puts "View to Watch List"
-        puts "*******************************************"
+    system 'clear'
+        puts "#{@name}'s To Watch List"
+        puts "You don't have any items to list"
+        puts "***".colorize(:yellow)
+        # if @watchlist > 0
+        #     puts "#{@name}'s Watch List"
+        #     puts @watchlist
+        #     puts "***"
+        # else
+        #     puts "You don't have any items to list"
+        #     puts "***"
+        #     puts "> Back to Main Menu"
+        #     puts "> Exit"
+        # end
     end
 
     def fave
-        puts "View Favourite List"
-        puts "*******************************************"
+    system 'clear'
+        puts "#{@name}'s Favourite List"
+        puts "You don't have any items to list"
+        puts "***".colorize(:yellow)
+        # if @favourite > 0
+        #     puts "#{@name}'s Favourite List"
+        #     puts @favourite
+        #     puts "***"
+        # else
+        #     puts "You don't have any items to list"
+        #     puts "***"
+        #     puts "> Back to Main Menu"
+        #     puts "> Exit"
+        # end
     end
 
     def random
+    system 'clear'
+        group_instance = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
+
         puts "Random Movie Selector"
-        puts "*******************************************"
+        puts "***".colorize(:yellow)
+        puts "The random movie to watch tonight is #{group_instance.shuffle.sample}"
+        # puts "Watch now? 'Yes' or 'No'"
+        # watchnow = gets.strip.downcase
+        # if watch == 'yes'
+        #     puts "watch now" 
+        # else
+        #     #go back to main menu
+        #     menu
+        # end
     end
 
 
diff --git a/lists/Bella.txt b/lists/Bella.txt
index a92bf9e..ede41db 100644
--- a/lists/Bella.txt
+++ b/lists/Bella.txt
@@ -1,2 +1,9 @@
-Matrix
-Harry Potter
+Sound of Metal
+Mank
+Minari
+Promising Young Woman
+The Father
+Judas and the Black Messiah
+The Trial of the Chicago 7
+Nomadland
+Snoo Snoo
diff --git a/movie_item.rb b/movie_item.rb
index 7680847..60b9098 100644
--- a/movie_item.rb
+++ b/movie_item.rb
@@ -1,11 +1,119 @@
+require 'colorize'
+
 class MovieItem
-    attr_reader :name
+    attr_reader :moviename
 
-    def initialize(name)
-        @name = name
+    def initialize
+        #could pass in movie name, not sure how yet.
+        # I think it could be an array, and loop through information, but not sure how to do it.
+        @moviename = moviename
     end
     # removed to refactor through attr_accessor
     # def name
     #     return @name
     # end
+
+    def soundofmetal
+    system 'clear'
+        puts " Sound of Metal ".colorize(:red).on_white.underline
+        puts "2021".colorize(:light_red) + "- Best Picture Nominee"
+        puts "Director".colorize(:light_red) + "- Darius Marder"
+        puts "Synopsis: ".colorize(:light_red) + "During a series of adrenaline-fueled one-night gigs, itinerant punk-metal drummer Ruben (Riz Ahmed) begins to experience intermittent hearing loss."
+        puts "***".colorize(:yellow)
+        puts "Please choose an option.".colorize(:blue)
+        puts "1. > Save to To Watch List"
+        puts "2. > Save to Favourite List"
+        puts "3. > Back to Main Menu"
+    end
+
+    def mank
+    system 'clear'
+        puts " Mank ".colorize(:red).on_white.underline
+        puts "Director".colorize(:light_red) + " - David Fincher"
+        puts "2021".colorize(:light_red) + " - Best Picture Nominee"
+        puts "Synopsis".colorize(:light_red) + "Mank is a 2020 American biographical drama film about screenwriter Herman J. Mankiewicz and his development of the screenplay for Citizen Kane (1941)."
+        puts "***".colorize(:yellow)
+        puts "Please choose an option.".colorize(:blue)
+        puts "1. > Save to To Watch List"
+        puts "2. > Save to Favourite List"
+        puts "3. > Back to Main Menu"
+    end
+
+    def minari
+    system 'clear'
+        puts " Minari ".colorize(:red).on_white.underline
+        puts "Director".colorize(:light_red) + " - Lee Isaac Chung"
+        puts "2021".colorize(:light_red) + " - Best Picture Nominee"
+        puts "Synopsis".colorize(:light_red) + "A tender and sweeping story about what roots us, Minari follows a Korean-American family that moves to a tiny Arkansas farm in search of their own American dream."
+        puts "***".colorize(:yellow)
+        puts "Please choose an option.".colorize(:blue)
+        puts "1. > Save to To Watch List"
+        puts "2. > Save to Favourite List"
+        puts "3. > Back to Main Menu"
+    end
+
+    def promising
+    system 'clear'
+        puts " Promising Young Woman ".colorize(:red).on_white.underline
+        puts "Director".colorize(:light_red) + " - Emerald Fennell"
+        puts "2021".colorize(:light_red) + " - Best Picture Nominee"
+        puts "Synopsis".colorize(:light_red) + "The film stars Carey Mulligan as a vigilante seeking to avenge the death of her best friend who was a rape victim."
+        puts "***".colorize(:yellow)
+        puts "Please choose an option.".colorize(:blue)
+        puts "1. > Save to To Watch List"
+        puts "2. > Save to Favourite List"
+        puts "3. > Back to Main Menu"
+    end
+
+    def thefather
+    system 'clear'
+        puts " The Father ".colorize(:red).on_white.underline
+        puts "Director".colorize(:light_red) + " - Florian Zeller"
+        puts "2021".colorize(:light_red) + " - Best Picture Nominee"
+        puts "Synopsis".colorize(:light_red) + "Based on the acclaimed, award-winning play, The Father starts out as a deceptively simple drama hinged on a deceptively familiar dynamic."
+        puts "***".colorize(:yellow)
+        puts "Please choose an option.".colorize(:blue)
+        puts "1. > Save to To Watch List"
+        puts "2. > Save to Favourite List"
+        puts "3. > Back to Main Menu"
+    end
+
+    def judas
+    system 'clear'
+        puts " Judas and the Black Messiah ".colorize(:red).on_white.underline
+        puts "Director".colorize(:light_red) + " - Shaka King"
+        puts "2021".colorize(:light_red) + " - Best Picture Nominee"
+        puts "Synopsis".colorize(:light_red) + "FBI informant William O'Neal infiltrates the Illinois Black Panther Party and is tasked with keeping tabs on their charismatic leader, Chairman Fred Hampton."
+        puts "***".colorize(:yellow)
+        puts "Please choose an option.".colorize(:blue)
+        puts "1. > Save to To Watch List"
+        puts "2. > Save to Favourite List"
+        puts "3. > Back to Main Menu"
+    end
+
+    def trial
+    system 'clear'
+        puts " The Trial of the Chicago 7 ".colorize(:red).on_white.underline
+        puts "Director".colorize(:light_red) + " - Aaron Sorkin"
+        puts "2021".colorize(:light_red) + " - Best Picture Nominee"
+        puts "Synopsis".colorize(:light_red) + "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago."
+        puts "***".colorize(:yellow)
+        puts "Please choose an option.".colorize(:blue)
+        puts "1. > Save to To Watch List"
+        puts "2. > Save to Favourite List"
+        puts "3. > Back to Main Menu"
+    end
+
+    def nomadland
+    system 'clear'
+        puts " Nomadland ".colorize(:black).on_red.underline
+        puts "Director".colorize(:light_red) + "- Chloe Zhao"
+        puts "2021".colorize(:light_red) + "- Best Picture Winner"
+        puts "Synopsis: ".colorize(:light_red) + "Nomadland is a surprisingly balanced look at the van living, nomadic life within America."
+        puts "***".colorize(:yellow)
+        puts "Please choose an option.".colorize(:blue)
+        puts "1. > Save to To Watch List"
+        puts "2. > Save to Favourite List"
+        puts "3. > Back to Main Menu"
+    end
 end
\ No newline at end of file
diff --git a/movie_menu.rb b/movie_menu.rb
index 1e8daf2..b4fd77a 100644
--- a/movie_menu.rb
+++ b/movie_menu.rb
@@ -1,15 +1,15 @@
-require_relative './movie_item'
+# require_relative './movie_item'
 
-class MovieMenu
-    def initialize
-        @movie_items = []
-    end
-    def add_item(name)
-        movie_item = MovieItem.new(name)
-        @movie_items << movie_item
-    end
-    def get_name(name)
-        item = @movie_items.filter {|movie_item| movie_item.name == name}
-        return item.name
-    end
-end
\ No newline at end of file
+# class MovieMenu
+#     def initialize
+#         @movie_items = []
+#     end
+#     def add_item(name)
+#         movie_item = MovieItem.new(name)
+#         @movie_items << movie_item
+#     end
+#     def get_name(name)
+#         item = @movie_items.filter {|movie_item| movie_item.name == name}
+#         return item.name
+#     end
+# end
\ No newline at end of file
diff --git a/spec/list_spec.rb b/spec/list_spec.rb
index 1c35fda..254e8f0 100644
--- a/spec/list_spec.rb
+++ b/spec/list_spec.rb
@@ -1,7 +1,7 @@
 require_relative '../list.rb'
 
 describe "List"
-    context "#view new user main menu" do 
+    context "#view new user list" do 
     # hash shows that this is an instance methods
 
     #before everything create a new instance
diff --git a/user_profile.rb b/user_profile.rb
index 90a152f..e047057 100644
--- a/user_profile.rb
+++ b/user_profile.rb
@@ -1,6 +1,15 @@
 # default user
-user_profile = [
-    {name: "Bella", 
-    fave: [],
-    watch: []}
-] 
\ No newline at end of file
+# user_profile = [
+#     {name: "Bella", 
+#     fave: [],
+#     watch: []}
+# ] 
+
+# class User
+#     # do i need the initialise function?
+#     # yes because each user needs a new one
+#     def initialize(name)
+#         @name = name
+#         # passing in name as arguement or instance variable@ 
+#     end
+# end
\ No newline at end of file

commit 264e706388584a146fb3f1c3c58676e0ea355401
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Thu May 20 11:50:40 2021 +1000

    Added colorize and tty-prompt gems and bundled. Updated Readme.md with installation information.

diff --git a/Gemfile b/Gemfile
index ec0f2ee..b65c667 100644
--- a/Gemfile
+++ b/Gemfile
@@ -7,3 +7,5 @@ git_source(:github) { |repo_name| "https://github.com/#{repo_name}" }
 # gem "rails"
 
 gem "rspec", "~> 3.10"
+gem 'tty-prompt', '~> 0.23.1'
+gem 'colorize', '~> 0.8.1'
diff --git a/Gemfile.lock b/Gemfile.lock
index 63ec47d..592e1ee 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -1,7 +1,10 @@
 GEM
   remote: https://rubygems.org/
   specs:
+    colorize (0.8.1)
     diff-lcs (1.4.4)
+    pastel (0.8.0)
+      tty-color (~> 0.5)
     rspec (3.10.0)
       rspec-core (~> 3.10.0)
       rspec-expectations (~> 3.10.0)
@@ -15,12 +18,25 @@ GEM
       diff-lcs (>= 1.2.0, < 2.0)
       rspec-support (~> 3.10.0)
     rspec-support (3.10.2)
+    tty-color (0.6.0)
+    tty-cursor (0.7.1)
+    tty-prompt (0.23.1)
+      pastel (~> 0.8)
+      tty-reader (~> 0.8)
+    tty-reader (0.9.0)
+      tty-cursor (~> 0.7)
+      tty-screen (~> 0.8)
+      wisper (~> 2.0)
+    tty-screen (0.8.1)
+    wisper (2.0.1)
 
 PLATFORMS
   x86_64-darwin-20
 
 DEPENDENCIES
+  colorize (~> 0.8.1)
   rspec (~> 3.10)
+  tty-prompt (~> 0.23.1)
 
 BUNDLED WITH
    2.2.17
diff --git a/README.md b/README.md
index d7fad55..fccab3b 100644
--- a/README.md
+++ b/README.md
@@ -8,58 +8,66 @@ Create:
 - Can't decide what to watch? **Randomise** best picture movies and be directed to streaming sites,
 - **Save and return** at any time.
 
+[Git Hub Source Respository](https://github.com/leberSmeaton/portfolioT1A3)
+
 <br/>![Bong Joon-ho saying thankyou with Oscar in hand](https://media.giphy.com/media/l0Exilgks3XFeHErK/giphy.gif)
 
 ## Installation
 
 This Oscars Judge Terminal App requires,
 
-- Ruby 3.0 installed for operation.
-- Ruby Gems: Colorize, TTY Reader.
+- Ruby 3.0.1 installed for operation.
+- Ruby Gems: Colorize, TTY-prompt.
 
-<br/> [**Ruby 3.0** install information here,](https://www.ruby-lang.org/en/documentation/installation/#rubyinstaller)
+<br/> [**Ruby 3.0.1** install information here,](https://www.ruby-lang.org/en/documentation/installation/#rubyinstaller)
 
 - **Homebrew (macOS)**<br/>
-  Ruby versions 2.0 and above are included by default in macOS releases since at least El Capitan (10.11). Homebrew is a commonly used package manager on macOS. Installing Ruby using Homebrew is easy:
+  Ruby versions 2.0 and above are included by default in macOS releases since at least El Capitan (10.11). [Homebrew](https://brew.sh/) is a commonly used package manager on macOS. Installing Ruby using Homebrew is easy:
 
   `$ brew install ruby`
 
-  - To check which version is installed,<br/>
+  - You may already have ruby installed on your computer. To check which version is installed type in your terminal emulator,<br/>
     `$ ruby --version`
+
+- [rbenv](https://github.com/rbenv/rbenv#readme) to manage multiple installations/versions of Ruby. [rbenv](https://github.com/rbenv/rbenv#readme) allows you to manage multiple installations of Ruby.
+
   - To update to version required,<br/>
     `$ rbenv install -list`<br/>
-    #select from available versions 3.0.1<br/>
+    #select from available versions<br/>
     #set to global version...<br/>
     `$ rbenv install 3.0.1`<br/>
     #check ruby version<br/>
     `ruby --version`
 
 - **Windows** <br/>
-  Check our the **RubyInstaller** as it gives you everything to set up a full Ruby environment.
+  Check our the [**RubyInstaller**](https://rubyinstaller.org/) as it gives you everything to set up a full Ruby environment.
+
+- **Linux/UNIX** <br/>
+  You can use the package management system of your distribution or third-party tools ([rbenv](https://github.com/rbenv/rbenv) and [RVM](http://rvm.io/)).
+  Debian GNU/Linux and Ubuntu use the apt package manager. You can use it like this:<br/>
+  - `$ sudo apt-get install ruby-full`
 
-<br/> **Ruby Gems** to install before use: <br/>
+<br/> **Ruby Gem** dependencies to install before use: <br/>
 
-- colorize
-- tty-prompt
+- colorize ~> 0.8.1
+- tty-prompt ~> 0.23.1
 
 [**colorize** install information here,](https://rubygems.org/gems/colorize)<br/>
 
 - Add Colorize to your Gemfile:
-  - `$ gem install colorize`
-- Install Colorize:
+  - `gem 'colorize', '~> 0.8.1'`
+- Or install Colorize yourself:
   - `$ gem install colorize`<br/>
 
-`$ bundle install` and restart your server to ensure the gem has fully loaded.
-<br/>
-<br/>
 [**tty-prompt** install information here,](https://rubygems.org/gems/tty-prompt)<br/>
 
 - Add tty-prompt to your Gemfile:
-  - `$ gem 'tty-prompt', '~> 0.23.1'`<br/>
-- Install tty-prompt:
+  - `gem 'tty-prompt', '~> 0.23.1'`<br/>
+- Or install tty-prompt yourself:
   - `$ gem install tty-prompt`<br/>
 
-`$bundle install` and restart your server to ensure the gem has fully loaded.
+`$ bundle` and restart your terminal to ensure colorize and tty-prompt gems are fully loaded.
+Use `$ bundle info [gemname]` to see where a bundled gem is installed. Type `$ gem` for more info on RubyGem usage.
 
 <br/>
 <br/>
@@ -68,6 +76,8 @@ This Oscars Judge Terminal App requires,
 
 # Oscars Judge Terminal App
 
+[Git Hub Source Respository](https://github.com/leberSmeaton/portfolioT1A3)
+
 ## Example imagery
 
 Insert example images of app
@@ -144,19 +154,15 @@ As seen above, The README.md file provides the user instructions on the install
 Built into the Oscars Judge Terminal App is a -help flag that will also give a rundown of requirements and how to navigate and any other features the User needs to be informed about.
 
 On start after the app welcome page, the **User Profile Creation** feature allows the user to either select their previously saved profile or create a new user profile. Users initially create their profile by selecting 'New User' which prompts name input. To save the user just has to exit via prompt and **Saving Sessions** feature will execute. On return to the app a user who's created a profile will see their name as an option to continue with their saved profile that has stored all information from the **Creating New Lists** feature.
-Error handling for **User Profile Creation** is set for name input, ensuring only english a-z characters are used, no symbols or numbers. Control flow will stop on invalid user name, displaying a prompt to enter a new name and the reason why.  
-[image]
+Error handling for **User Profile Creation** is set for name input, ensuring only english a-z characters are used, no symbols or numbers. Control flow will stop on invalid user name, displaying a prompt to enter a new name and the reason why.
 
 The user can interact with 'To Watch List' and 'Favourite List' objects in the **Creating New Lists** feature that allows them to keep record and interact with the app. Whilst browsing movies in their chosen films category they have the option to 'Save to Watch List'/'Save to Favourite List'. The user doesn't get taken from the movie interface they've selected, rather on selection the movie is pushed into the array list of their choice. If the movie is already in either list error handling will display 'movie not added. Movie already in list'.
 When they want to view either list, it is available to select through the main menu. If the lists are empty, error handling will display 'You don't have any items to list.'
-[image]
 
 When the user can't decide on a movie to watch **Randomise Movies** feature can be selected to output a random movie. On execute the feature will loop through all movies Control flow, If option is random - output movie. This is also a feature exit of the program that will take the user to a direct link to watch the movie.
 The session will end and **Saving Session** feature will execute. Error handling to display 'You've seen this film' is not yet set up on **Randomise Movies** feature yet.
-[image]
 
 The user must move through the app after creating their profile to get to the final feature. On exit of the app, the user does not have to take any additional steps for the **Saving Sessions** to execute as it is a built in save automation. The control flow asks, If exit - then save to file.
 Error handling is not yet set up for **Saving Sessions**. If something goes wrong on exit or the save does not occur a message will display 'save error - goodbye'.
-[image]
 
 <br/>![Bong Joon-ho saying thankyou with Oscar in hand](https://media.giphy.com/media/VhosQcv9wVK5MmXULs/giphy.gif)

commit 285990687453d106f8184abd1b557c0739d529a3
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Thu May 20 11:05:19 2021 +1000

    moved git file into src folder

diff --git a/Gemfile b/Gemfile
index d41f271..ec0f2ee 100644
--- a/Gemfile
+++ b/Gemfile
@@ -5,3 +5,5 @@ source "https://rubygems.org"
 git_source(:github) { |repo_name| "https://github.com/#{repo_name}" }
 
 # gem "rails"
+
+gem "rspec", "~> 3.10"
diff --git a/src/Gemfile.lock b/Gemfile.lock
similarity index 100%
rename from src/Gemfile.lock
rename to Gemfile.lock
diff --git a/README.md b/README.md
index 4a51ee2..d7fad55 100644
--- a/README.md
+++ b/README.md
@@ -1,16 +1,72 @@
-# Oscars Judge
+# Oscars Judge Terminal App
 
-Oscars Judge gives you the opportunity to be your own judge on the Academy Awards nominees and winners.
+Oscars Judge Terminal App gives you the opportunity to be your own judge on the Academy Awards nominees and winners.<br/>
 Create:
 
-- personalise lists of your favourite Oscars movies,
-- personalise To Watch Lists,
-- Randomise best picture movies to watch,
-- Rate your movies and compare to award winners(feature not yet available).
+- Create a **User Profile**,
+- **Personalise lists** of your Favourite Oscars movies and To Watch Lists,
+- Can't decide what to watch? **Randomise** best picture movies and be directed to streaming sites,
+- **Save and return** at any time.
+
+<br/>![Bong Joon-ho saying thankyou with Oscar in hand](https://media.giphy.com/media/l0Exilgks3XFeHErK/giphy.gif)
 
 ## Installation
 
-Insert Installation requirements
+This Oscars Judge Terminal App requires,
+
+- Ruby 3.0 installed for operation.
+- Ruby Gems: Colorize, TTY Reader.
+
+<br/> [**Ruby 3.0** install information here,](https://www.ruby-lang.org/en/documentation/installation/#rubyinstaller)
+
+- **Homebrew (macOS)**<br/>
+  Ruby versions 2.0 and above are included by default in macOS releases since at least El Capitan (10.11). Homebrew is a commonly used package manager on macOS. Installing Ruby using Homebrew is easy:
+
+  `$ brew install ruby`
+
+  - To check which version is installed,<br/>
+    `$ ruby --version`
+  - To update to version required,<br/>
+    `$ rbenv install -list`<br/>
+    #select from available versions 3.0.1<br/>
+    #set to global version...<br/>
+    `$ rbenv install 3.0.1`<br/>
+    #check ruby version<br/>
+    `ruby --version`
+
+- **Windows** <br/>
+  Check our the **RubyInstaller** as it gives you everything to set up a full Ruby environment.
+
+<br/> **Ruby Gems** to install before use: <br/>
+
+- colorize
+- tty-prompt
+
+[**colorize** install information here,](https://rubygems.org/gems/colorize)<br/>
+
+- Add Colorize to your Gemfile:
+  - `$ gem install colorize`
+- Install Colorize:
+  - `$ gem install colorize`<br/>
+
+`$ bundle install` and restart your server to ensure the gem has fully loaded.
+<br/>
+<br/>
+[**tty-prompt** install information here,](https://rubygems.org/gems/tty-prompt)<br/>
+
+- Add tty-prompt to your Gemfile:
+  - `$ gem 'tty-prompt', '~> 0.23.1'`<br/>
+- Install tty-prompt:
+  - `$ gem install tty-prompt`<br/>
+
+`$bundle install` and restart your server to ensure the gem has fully loaded.
+
+<br/>
+<br/>
+<br/>
+<br/>
+
+# Oscars Judge Terminal App
 
 ## Example imagery
 
@@ -23,7 +79,7 @@ Insert example images of app
 
 ## Statement of Purpose
 
-The Oscars Judge Terminal App is a single-player, multi-user Oscar's experience, presenting the user with information on the nominees and winners of every annual Academy Awards category.
+The Oscars Judge Terminal App is a multi-user, multi-session Oscar's experience, presenting the user with information on the nominees and winners of every annual Academy Awards category.
 
 Users can create a profile to store 'Favourite List' and 'To Watch List', and set ratings on the movies they loved and hated (feature not yet available). If users can't decide on a movie to watch next, the Randomise feature will choose for you!
 
@@ -84,13 +140,23 @@ Saving session is setup initially by User Profile Creation feature. It allows us
 
 ## User Interaction
 
-As seen above, The README.md file provides the user instructions on the install requirements to run the Oscars Judge Terminal App. The README.md also provides the user instructions on how to navigate the app using keys rather than a mouse click.
+As seen above, The README.md file provides the user instructions on the install requirements to run the Oscars Judge Terminal App. The README.md also provides the user instructions on how to navigate the app using up and down arrow keys rather than a mouse click or numerical.
 Built into the Oscars Judge Terminal App is a -help flag that will also give a rundown of requirements and how to navigate and any other features the User needs to be informed about.
 
-On start the **User Profile Creation** allows the user to save their profile by inputing their name through string datatype.
+On start after the app welcome page, the **User Profile Creation** feature allows the user to either select their previously saved profile or create a new user profile. Users initially create their profile by selecting 'New User' which prompts name input. To save the user just has to exit via prompt and **Saving Sessions** feature will execute. On return to the app a user who's created a profile will see their name as an option to continue with their saved profile that has stored all information from the **Creating New Lists** feature.
+Error handling for **User Profile Creation** is set for name input, ensuring only english a-z characters are used, no symbols or numbers. Control flow will stop on invalid user name, displaying a prompt to enter a new name and the reason why.  
+[image]
+
+The user can interact with 'To Watch List' and 'Favourite List' objects in the **Creating New Lists** feature that allows them to keep record and interact with the app. Whilst browsing movies in their chosen films category they have the option to 'Save to Watch List'/'Save to Favourite List'. The user doesn't get taken from the movie interface they've selected, rather on selection the movie is pushed into the array list of their choice. If the movie is already in either list error handling will display 'movie not added. Movie already in list'.
+When they want to view either list, it is available to select through the main menu. If the lists are empty, error handling will display 'You don't have any items to list.'
+[image]
 
-The user can interact with two objects in the **Creating New Lists** feature that allows them to keep record and interact. The 'To Watch List' and 'Favourite List' can be added too. The rating and review interactive part of 'Favourite List' is a feature not yet available.
+When the user can't decide on a movie to watch **Randomise Movies** feature can be selected to output a random movie. On execute the feature will loop through all movies Control flow, If option is random - output movie. This is also a feature exit of the program that will take the user to a direct link to watch the movie.
+The session will end and **Saving Session** feature will execute. Error handling to display 'You've seen this film' is not yet set up on **Randomise Movies** feature yet.
+[image]
 
-When the user can't decide on a movie to watch **Randomise Movies** can be selected to output a random movie. The interaction is control flow If random, output movie.
+The user must move through the app after creating their profile to get to the final feature. On exit of the app, the user does not have to take any additional steps for the **Saving Sessions** to execute as it is a built in save automation. The control flow asks, If exit - then save to file.
+Error handling is not yet set up for **Saving Sessions**. If something goes wrong on exit or the save does not occur a message will display 'save error - goodbye'.
+[image]
 
-On exit of the app, the user does not have to take any additional steps for the **Saving Sessions** to execute as it is a built in automation. The control flow asks, If exit - then save.
+<br/>![Bong Joon-ho saying thankyou with Oscar in hand](https://media.giphy.com/media/VhosQcv9wVK5MmXULs/giphy.gif)
diff --git a/Screen Shot 2021-05-18 at 11.31.51 am.png b/Screen Shot 2021-05-18 at 11.31.51 am.png
deleted file mode 100644
index 3d53271..0000000
Binary files a/Screen Shot 2021-05-18 at 11.31.51 am.png and /dev/null differ
diff --git a/src/awards.rb b/awards.rb
similarity index 100%
rename from src/awards.rb
rename to awards.rb
diff --git a/docs/Flowchart_T1A3.drawio b/docs/Flowchart_T1A3.drawio
deleted file mode 100644
index 1b5e6f5..0000000
--- a/docs/Flowchart_T1A3.drawio
+++ /dev/null
@@ -1 +0,0 @@
-<mxfile host="app.diagrams.net" modified="2021-05-18T13:58:16.610Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36" etag="HxkXI0yrU1jHCs2GdFK8" version="14.6.13" type="device" pages="3"><diagram id="EEbKFx0Qe1oUpt7cK2yP" name="app-flow">7R1Zd5u4+tf45Mk+7Mtj1s60SZqbtNNJX+ZgG9tMsXEBZ+mvvxIgG6SPxSAWz0x72gQZS6BvXzWSL9dvH3xru7rz5rY7koT520i+GkmSqOsS+oFH3uMRVdfigaXvzJObDgNPzi87GRSS0Z0zt4PMjaHnuaGzzQ7OvM3GnoWZMcv3vdfsbQvPza66tZY2M/A0s1x29JszD1fxqKEKh/HfbGe5IiuLQvLJ2iI3JwPBypp7r6kh+XokX/qeF8a/rd8ubRdvHtmX+Hs3OZ/uH8y3N2GVL6yeHr7qn7SfweNu7t8spjv76us4AUYQvpMXtufo/ZNLzw9X3tLbWO71YfTC93abuY1nFdDV4Z5bz9uiQREN/m2H4XsCTGsXemhoFa5d8uluvSVLLK0tGYlvF/Ed6JX89z/xChNJJdfPydeji6u3ZP346j25Yjcl2Sf8WlkssvylndwjPSzW79feWn4SvT+Whv38+Wk+lvQ9kBB2297aRguhL/q2a4XOS3Y2K0Gz5f6+/VcfPAc9iyQkJDEWJXOixt9KaMI0hYmQ+iNl5wy8nT+zk2nSAKZmVgmmkWl1ITtR/MrMROe+b72nbtviG4L8N1AE+unTs6Ff4gnJVWrzDkMRbsJ4CgIj2eYXy90lGz+SNDfEeIU+0pb4t8/BzPLRcwsfdxjYyedoucMtZHBLBi5s/CJog9EP73WD/s/OMkG/nGNssf21g3Acb9N2iwdWFt4Sy3Uxi4nmiFgTZkW+bYV4XtcJ8D4K3uKwyMJ6Qb840ef7pdbei2MHaC3NWmNy2EyDbepp0StsD29A0Wtov4VZ8gpC3/thX3qu56ORjbfBRLtwXJcaCrbWzNks0YB6uPoS0fBYwsT0ukLP+YTG8VKvfkSp3ovtL9yIj62c+dzeMAwhlwTRN9HDpoZY2iI0IglZHCOY/XpgwRJhwass+82nxxSGFiKg/PPh12J6q32RBFHRd/qt9fVhrImNOWUh2zPqsdIDo0xzSWGilvDJ6OrB9h20O7ZfBrmYAxXxSpanvv+8WV6vf91byvblae1fzO2tNdZBZtyAx1aFadFTp5iKv5tGy6Mff3kRdU78KQt410Xqh51DISnocCAFo5QQRAkgBIMDHYB7pgGMuHsNIndjS6W6yhsDYRkpi5SIp+CRI9NriMv/fV78/tG4NFaPf5sfzIsnMVDfxqI8KKiU8g+VhR78XtKgGIjKEMO3lXeGJfo3K5ytIuF6w0CihGnE4psYGxIlu0eSvFgspNmMEfTok7k21VSND+OR1CwG70VrGevR2mI9BKmHyntKsVyvyKMGhuU6s+0Pfszs7iwHq8x39mZ3LJa3gKGy3juGVjFTyMjCi/bwsGXaz51HPhgHEfph00NStm+HD8ksN8jG2Pl2kLIR4gmzixRbP2M0/RnNss7Q75fYhMHsC23SZo6f0nqJL3eBjc2Yre8hrhTbLNGcU59eBRkUm/RCqTnPvnhkQfTzFplJeNG9+RP/j++7IdZScLgvbz30qukl8x7j7BG9kbd2AmyB3UWGF148sF17Fnp+8/nRv+s3J+eN0D7aJRMea+21Y8VZrrNEo1d+TDY86FWVS3VZWWjLqIPplRXgfUgUG6HLnwezDV09pz45WHD4otTRVSqFiHQpF0NKV7pyFi9UtTVluXBDUlhwHvzAvhrMDhLO4HibAYg4Re1QxP30588/1atP64t36X6qfTUXV/ZYNHqhkJpujgZUolSkElnuS1kDLSSluZ+qCXzEwcFH4u5zquU0F9Usk9M1Klpz3P2Nvewg8ugnRdwHsWnoWkpwChNNJtew8MQX/Jyf1VkFHIviLlAVSqDqklpJoB4dCKLXUcxCnKbvN5UuIkcKoOOxqnu+3n8YQYAQsIqP/uJfp3aAX27rzLAlVqLVA/ZR6Ds/bDIqHeYWcueGjZLMPDKOWEVhqNfEvMJRKHYCBd+XDkbBt0FbpSaP6keG1CgJXwE2VPWtSN2lJbOvbHfbaCI9mejnzglzJ6K4nb/y1tNdkGM1pXgWMY9miFtgFsJD2RNNSg82WWUPjHpJtMLMz0AyGeJ5QhZsEvDE2vHGWiPQX0ZMa22vp7a/j4bSkqTDqIlOxw8JB+wibgLrzQK7IcPVy/aiNSNWiXXK2yKFgjfgJrajyrEpGlQihSZ3a5BK+W7E6T7ZYYsfWIxchAXCYX9/IrPiTAMsYPA+zazQXnp+NHKZL3XK+W56JQbPj4p3cGIAtEvB6NBuhmEKBS8gRQCCdOR8EKTKwM7VDnJBSikjRUpI/qRc0YIOeqn47wgIemnRn1HsN0+Nx384oZNO4ZPStx+mH0clbzO/NU5OLBKxmuXDzYDuFyzCRMymS46FiVArFShlW0tmSgkQJ4Kod2hbS0DMFNx5rSPdQKQki1FRNyifqHG2JndkZkXW/WcQv2+tqe2WGEiY2Tozyz1PPlg783mM/nbg/LKm0XwYWZIXQpOrFyP1CkSfQuJLUsGTKUf7ONMR+YeIbHRFysCHcNyGHIniR95iEdjtKJFs2D5HiZRTegWkRRzkOuBXaKLr9ZbbQvut5A6lOYi6ai95+Cm5kZEaQonEaMDOzYrsXBS4h1UqJupVZMPcmCxr6z1fPw2YyxJU5cJlJYnmsnIzLkviptlJzRaYLgxNgYFmjsg8NU2dH2nz19SaGeasizNHTiqV7e9FOm0p41jv0pUymNRRs8vUURDnjL7tso7kqwx4UmFGxT23pxERypU9nmplZfUxPzx1klSlUKUgnVIV6INSBl4MUk4uMksu8JsOjFyaOJPR97SYiPKKDQuI6jcqKkutdsIuXpq8dNOYVAwathY06CmZq9Pgn9xRRZaqUS78ilmmrMWoUzmZdG0XrzJrzcg+MF3fX3K/0kVdtjJcH2EhRTF8Ic+gLbReTfL6nHyEBFWzCCZlv9+ey1AZRjr88HmJToeXpdacRjCgWMVrME6jYsziQXaKmOQZ7ksTuVCdDs3ZPtHJLNGd+0lXCgxOHHkHikgrZ6rlUtMRhTuU6FR0VjEyAb2IFoz89F/I8AA1Xb22pvu/KG3wOIWWw17Tamj/mSsyFEiiOc1mfo6bLWGu4lpB4MzyPCHHuSOJKkrU0ufUOPe6qMpp3FpFKZMCGZS2Scaa+rppw6VuRFqm6vM0Ohmy5VBIPymSuQjTthJhUFmGolDfItEo/tyORWIoOU+c92D0F8iDtVrEAhRhD8UkKUR7LgE1UxWzesyYj3JELBsyqyZnZ+CiH4GuNxmKz/ToFOmkRhdKe4J7MwjdMCuEpVQ7EEGpxq2OZTI6zWM4FwnBMckBG1SFVMGFaagyBVxOuU5junC/RS7RC084mXTYAxXTFXvd5seq/cAJsiJKHNp5sdvaDUjLuwN1xMp1nfKe7JGCs7rILqRKXFk52GIQ6BJ1lwSASSXFELh6IXlwcZMZIuxHbsxD9BaYeiFFpEApTiZvDAC79IVRNrIoku4hKWPfAIx9HoWFYGNSqbnVnG5MmvSGHVq2S1E5YFpJBreIVLF2H70veux0TW2UmTI6pKqw7siFH+Wy1Em65oD1TEPeTt2S4C5WMQureiUHXR1bvdNJVS2yG7+kSLFKnQ6SVa6UobxIGu0na9kvaZiNOewp+SVVU6XgptWDm0a1sDFojwEnPZN94GKvpCY1u9/owiNhNhfrbYXeO8qQq4ZUesdBCrMX7+MJwqViSsSxxJ63TlUmRN3fEvH2XM7FyR01WOTSNK0ScvHyLpL3BPIN5s5LBtCkTy9u1DpOXAi4i69rL8IR08UXztoVcW+m3zdBaOFHK+m6gD6IniE72sZjSfixPtjrYEDPFLW7unGtZVCQ5dH3Q0a9tnBP4KOfqa6jY9CZ1ZpW0XYUaRlSx3g07z/8Esa34Z16LS+nLzfiHx/dguOEsnB5jA/yYc3xxFDP6xCnVs+RP1GYCtnMV1EAqlHa8oPBYfReeldWkp2FR1mUh3h5y9hG20zcLCnSIa2ooO0fhl+d4AaXaKmoadkUi4Yly+1XJQNd/GKY9WLLtKqmViY10FGsGN3oswqVUIsU3Lb02cINySLEJu4mJ1ygGSxWtuE74hZkwr39iv7/Gh0FUVectdL2TaIMhb3bOq1qyJCqQSdN8mOY/TZ+5EVk5acFcA+y5Hj7ymiHXwoDHEzS+4Bn6dmB9bmj1JERLxn1Oq0c6yFi1uFcBwdjhZEjYpWYYy5x56SofRLQG2IIelMhrvPJRxA0KQMYTqmpdA1eG5mphYQDVaGkpGYiVYvbcX/eJqK1vCX3523csEuYWrMfoJg+oN0thF9dpkswgWOjauCYi/EPw61KmWNZ6BgKAY+GlVBWPXBctddWRwUttLeXFhR1A8dqx7GigtZC2xHkZHSdjT0mO4rpN0rNU/P9jKPMWWE5PYY8t3zEdXKnecK6yyg5xfrODq20T5ptJJzt05/rkoUPPmMfo+DB7qzNj6JHOXo+Z2P5Ds8ZH3x80Fx85t0z2kb885u3jl6d2yJfVlhW3FjhCptj/Ob9uJtbWEeJDwAMo1Uu3EjmIDRALNFa8X+NL74THbIeIVu85uUKKTmR/qTzXO8ewWHuxi+HXbbfHKTQHL+BaJClprxBZkqGeEdFh/8dfTpFFKRoR46LQAds0OHL5XAKuGij36R/XmmO5Q3zpG4MtDHdF1VkvCItlwdorEYdAdhG1sY8GIahVIiKfBzMdOthqZla1b4lpEHxtH8FaXZVfkdXxVWlzAozddzwVmOtrxOh8ULPx7HtxenGt5zKdJXMpOSSKwcAq24GJYrbM6lVoGEguB/cRXZVTQl8GlasDqa6tQibmrsdEaFpzQiL+CBaIKRCDEvBipyTvsHuqH47Aemk7ngwaR9qL+EY7uG11tvcq3T5ft1mI2zmT8flGCoP921NTbHjk9orO3Crxl67ceDSB7rXPiNHpmK9XSf7k+VTqHYWWC829hk5+Ei2QzDvjMHBDoIr9BlCoghEVyB2TFfi8PPJSCU7djhCppcdo2MLA9gxthz07N4LV7HXONq7PnaK7hRhSj3vkwFFW/8Bkr80P0MHpAC8Qx11P9VoV3DXGoDJkowYuxBAjBiG+4DgLxf3gSIJ2WbPDV2EJLcqC9fs11s8NYcl7fhscUyEfZo7KoPpfZs7xj+vsqyQl5WqvmrV3IVu0uMN1jixNsErkCjbPvZqMtXSWADOuetUhptsltxkMhkG0+bm3dVIWv1+24lSzH8/eTbByNB2mQsVNoTbas1LOu6Wt+atqgJ11ALDpOzXuk4Xicpk0iu27OJWMCCwlnB9TBN7w7RTQyCNQiBNqdmLQzWlSVa7U9X9CH8kOv/4cnH53frre/j8sJgJV2JoGiQmcgqnSwzrTNLKHfr4kXvBAVOpzL24G1tOUh+tt2cA109xEO0DB3warTWxggvOmrcWKq0MadTsWOIs3rsJlsJkpZedAMWPqopeM10isliMt9YyzvXHyayxe/Td24W7KWv6BitrG6HFYvGAvnUZq6q4vLsXeqKDgYYGnZhmiCw98TCPwS3OP/M8zZse/BgvvtnuDC08ivNZIzhU42Xsdqb3OoHS+m2J4LCaLFzvdbay/HCCrJa1s7HyIcaFyemUoIcONycCphMmR9xKQ2NybWaPgNiZkMtgSil1KhdMpvt1t8wQ88sj0tQXN04RHnwP0dO6HolK3Ei0l6Nf6fPG9kcOpmlaaElxgbssw+0eBprgmbIhRT2t0EwMTSpUavDFg+07aNewy6khAyBgLD1vlnvPj+irx1bSjpkCqsT8bLeBN+tqmNpB+NfWmYU7356Eb2xJIyHouTfbrSOwlGlE0xgXb6etqkhM2QRIuaDJoeYDsyrlGus/vl3ZH0L5u3b5yTfdh1/3izFk2VVx5AQIacNaSTVteHhq0yW4JwZLls1K5bvxDo333um9RVu3VBKYqj2fQxEMsgX0Se10gOQxVtOdfeHcod45W1d9Oor6WNJoTf0Avi50dRAK+Z2ConMUqb1/KoALW8h+QrARpQHCBjjZAu5aF4Ms6RJAmiNWbEfXFlQG1b1OU8UMcHXSvSztt9AmEgBd+sAcftCF0lrzoZu0iyhpx/kfcHHQTe8fuPkH1kLATcReeQvY/+CLHYwy5HbsGsKs/lIEYSWGcElTWAq8p9QglIaSpgAwain3BPRCys09Fl16IbnUrMIb0VHNqkr34jOpKfgVk79604+W/uH67+9/fno2L8Tl4/ljUY/fkw1h0vn+/UcwpSr+hF7Oo8rd7rQ7AI7KspTUUee8ZsFkBhLk4Dtns/COlSYcsJXxfukmFCHsGGGHgp/cOX8pXpO4Unkf3EHhNdC+OHWiI1aXJxO2+XevXe66bXEP43mVepl/m6MXIIBTcPTS6Z+GWdPNK1H5hFWP5Kqhk8FICdnB+UiZMNe5Fawi5ktZtHj8wQoRYmyikcjndcFGfuuc19dqyUNl7lzYVnAoyEkfDUlnEVRGTspgUGgdgFOD4DFNBaQvZH5whPqCnP1C4zgobKdJDK3kde3o24jNRfpSFD2UtDXs0/GWhcwehypGsVjrVVCLJyrFaq51c4WWfApDLj3fj4+SZSMyG2udc7as56+tsO/eIvSO71tWpNiYCbAxWhbys6eUfxixNW20TdGWLFZz6JROxHiGODH6vHVaZdukr9fAsCals+v1lPbKKnt9Fagr16RC6dMyrWnUxWRZrYbJ3JCN9b7dfwbxbxgHChDi4HKgAJL12RgDybAfRKNM+P3ZIK+zQRfoS5IQy+fOvXSKkt1FmbQW6CtSo7ChtPN57gaRsCbaA8t1bTfOEkY4mnIaZD5LeRPKj9x7s+cJS23Np88cBiVXdJGqHGKZq6eHr/on7WfwuJv7N4vpzr76Wv10RPvFiU6CypyG+M+KY0o6U4sH5IrwIQ906Xu4z/+B5eBI/Z03x6z7+v8=</diagram><diagram id="Pa3GTjm2JhgWjG1fDgN7" name="data-flow">7V1Zd5s4FP41fkwPSKyPidO0M9N0SbqkTzmykW1ajFxQHDu/fkRANkgKXljjmXPyABdZtu797qorMoDD+epdhBaza+LhYAA0bzWAlwMAXAAGyZ/mrVOCaVspYRr5XkrSt4Rb/wlnRC2jPvgejgsDKSEB9RdF4piEIR7TAg1FEXksDpuQoPitCzTFEuF2jAKZ+sP36CylOqa2pb/H/nTGv1nXsidzxAdnhHiGPPKYI8G3AziMCKHp1Xw1xEHCO86XeDhzl86vZXj/9a949vvmzjeMs3Syq0M+sllChEN69NRXAfnuW+RT+PHr1Wx6cf+0OL/LPqItUfCQ8StbK11zBmKP8TO7JRGdkSkJUfB2S72IyEPo4eRrNHa3HfOBkAUj6oz4C1O6zsCBHihhpBmdB9nTPdeX8SEmD9EYlyyKwwxFU0xLxpnpuGSBOaxk3HuHyRzTaM0GRDhA1F8WAYUyXE4347a8ZxcZ+w8QhS6J4nyxkKTxOPMpvl2gZwY8Mo0tchLFi1SJJv4qkciBrF3iiOJVKTP40ww5a36b3T/mdCwjzXLqxWm1cw+cIpDNPYFs9wrIUBLFLVsBVcrjAxoxd1OEcOBPQ3Y9ZjzEESMkoPSZQT/PHsx9z0vFhWP/CY2e50sEtiB+SJ9XY14MzEulPErBI6J/45WyLykYfpVWnGlvIIBmQTX47HszP5v9c7KanMLpyln5BGQyiTGVZLf5iceL0/gva5bbK80yJVEMI4woZrRP8RhF8QBYAVvOxShiV9PkSuVD2Dex6CsRyw5v0pjzsLvzHrZ3/4/9cHN/g40R/LJ0z/w/v86A3QWm8cqnd9nHk+ufyfUbM7u7XOUeXa6zm+P14PHq7M91NB0O9fn3L87T6Gr1M+S2uj58q42XaQgCdwVJpj80+1Q+iBUmMhxhIkOYKNVoaaIjjKESKDxtaBkoIfvVd/mbHFSS2y1Wnu+qg6UszNhpNA3QCKrOowitcwMyd/8i6AxQxAq0TQES6Yz1AkSOfkI0x/0IfkohXT360d4Ypl4x2qk1nlGv1zpdFW7ajhuWYH5N8zg7brvFidw97fjBNkD4wcDSSn+Xo1Ubz9fRrI2xJRvziOh4lnyO4nncZ2Nj1WVsWKplmaZezdrwuUBXyZUsSR7Ia0dUfyZ+EAxJQKLn0dBD2JmMGT2mEfmNc0+ssYNHkwYjfGgWk2AdZPe5CF8HihAfNlUgMmTH3IUfqDkkczsLySrlW1xvT4H3jftcwcXoVsspj1xa7XtE+5K5OsbJ6LYNi/yv5nKa9ymuJK9bSqKkSJTKbShXica8jMQ8iEKyfasXAd2RvEmruw189+NVOZOdTkJvyaKJm0em6PRfyCKOUJDVNVjefYbu8uzbyFhqi49/fx5u1tlLi1aOtzpydE0vGrSKGfta+YFazJtaep2o2iZ/z6XsPwf5jL2VEpyu0GUll4xGVPnQ9Nt01JpeV3qsBgj8HyC7AdJZ84NaZk63Muu0rq6SmTKwNZrZrjlUq4FQWLcyk1yXVpcyKee0L/14ETz/8mscPvQ/bDUc2FrYqsQP7Nh1NqllO5WHB5ltR7f2ntHtwVqod1B6hidsp3ciCHSUH9lmOwhyakZQaZKZb2KZERIn1Yc5WfoVyg9C+XsymYCxsvztWSPLtDZPeF8waNEXWA5ozReoe95eYwljZygFuqt1VPLMXSe1nca/ewutJfurm0K50XSKU9S0Of3C1zRqfoEcRn+LcSShr6d95p2bTeMk22H59uBus1l7o0k1aQBJGtuk8AcOxkRV1u1bXgihvDneFKjV1ZdOtmPb9z7KFlit99BXygzI0CcL6pNQ0QQe+HFPjl+Uwq+W/VrgAKegXTW1CAkdQrqgi7Xsd5ThMyfn6zRNUle9OrJpYqkLGpJJa6zfRwmqbrs8hU0AvV2T1tkmUTWLJiO9P9uyZRirp8+En0GpZ1e2ebskJxJXaMmQycyP3IH6ahoXTWFvw2mzcVEJso4rrp0aMkVa8go2MxU5ds8NmVOXIWNwsXiKzEMl2HdLJkfSX0mSP6Y99a/VkllCSOa2acnKDhvm+PweBwc3uTdm+cWzLW3yS1kUlndK3pPAS84GoORsgOYhigbwSmIgWzAt8qyIvpCEWIBqRtrf9KiEVPQ6TckJusWjBfwkUU5MlilLCTQlJdjN2eHWiyelW6J5D10WLfZkuwXKqjVByySnlosnfT9SxfFXTxbiusU0pE/OuxSB+ffmeN5gs5ms0cSXT15OTTovB0PhcLzT9dsQDDkRz84X7q8bJ2H+dlqr3FlEp5qivHBmXToXu+8BWyn62/OAbZuqC2WcKVT3URmG905r3c61Vg6vb1DokTmj8YrxOxziCFEW8h3Nzz432YgyMW3QsUy6Ld609roQ9eItOTbsWS+OejtK0qPMHr22yNCorazDHJwGnOK+GudTf0NDw+1C+xrSoqabnqBwVMfi537rP2asLpqejNbxhKSW3WzLNqqpmVCFbUHrLEmSPPz4oOpDeDUFVSjE5rZmS9FFu1tDci9afgtOVBwl908i7hNfL9dml2DZflROMD/UCfTpysRyeyYTfZ/OzdA7T945nniMAMWxn3ITRVQmK17kyK/rf5HjTu+f46qp4CqnVQwSLLFUdWx5whBfCLnnS00ObbEWyyDCEZed4/nuwr7rEMY3dMBZNi8buz/o1TvAyhWxjpcZ6KCewtsmbKkSILHb7b8DSIdv/6cCfPsv</diagram><diagram id="e8ASWA4kNTYfSbyO9nUa" name="interface-flow">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</diagram></mxfile>
\ No newline at end of file
diff --git a/src/index.rb b/index.rb
similarity index 100%
rename from src/index.rb
rename to index.rb
diff --git a/src/list.rb b/list.rb
similarity index 100%
rename from src/list.rb
rename to list.rb
diff --git a/src/lists/Bella.txt b/lists/Bella.txt
similarity index 100%
rename from src/lists/Bella.txt
rename to lists/Bella.txt
diff --git a/src/lists/best_picture.txt b/lists/best_picture.txt
similarity index 100%
rename from src/lists/best_picture.txt
rename to lists/best_picture.txt
diff --git a/src/main_menu.rb b/main_menu.rb
similarity index 100%
rename from src/main_menu.rb
rename to main_menu.rb
diff --git a/src/movie_item.rb b/movie_item.rb
similarity index 100%
rename from src/movie_item.rb
rename to movie_item.rb
diff --git a/src/movie_menu.rb b/movie_menu.rb
similarity index 100%
rename from src/movie_menu.rb
rename to movie_menu.rb
diff --git a/src/oscars_app.rb b/oscars_app.rb
similarity index 100%
rename from src/oscars_app.rb
rename to oscars_app.rb
diff --git a/src/randomiser.rb b/randomiser.rb
similarity index 100%
rename from src/randomiser.rb
rename to randomiser.rb
diff --git a/src/saving_session.rb b/saving_session.rb
similarity index 100%
rename from src/saving_session.rb
rename to saving_session.rb
diff --git a/src/spec/list_spec.rb b/spec/list_spec.rb
similarity index 100%
rename from src/spec/list_spec.rb
rename to spec/list_spec.rb
diff --git a/src/spec/ruby_oscars_spec.rb b/spec/ruby_oscars_spec.rb
similarity index 100%
rename from src/spec/ruby_oscars_spec.rb
rename to spec/ruby_oscars_spec.rb
diff --git a/src/Gemfile b/src/Gemfile
deleted file mode 100644
index ec0f2ee..0000000
--- a/src/Gemfile
+++ /dev/null
@@ -1,9 +0,0 @@
-# frozen_string_literal: true
-
-source "https://rubygems.org"
-
-git_source(:github) { |repo_name| "https://github.com/#{repo_name}" }
-
-# gem "rails"
-
-gem "rspec", "~> 3.10"
diff --git a/src/README.md b/src/README.md
deleted file mode 100644
index f5bb8ad..0000000
--- a/src/README.md
+++ /dev/null
@@ -1,104 +0,0 @@
-# Oscars Judge
-
-Oscars Judge gives you the opportunity to be your own judge on the Academy Awards nominees and winners.
-Create:
-
-- personalise lists of your favourite Oscars movies,
-- personalise To Watch Lists,
-- Randomise best picture movies to watch,
-- Rate your movies and compare to award winners(feature not yet available).
-
-## Installation
-
-Insert Installation requirements
-
-## Example imagery
-
-Insert example images of app
-
-<br />
-<br />
-
-# Software Development Plan
-
-## Statement of Purpose
-
-The Oscars Judge Terminal App is a multi-user, multi-session Oscar's experience, presenting the user with information on the nominees and winners of every annual Academy Awards category.
-
-Users can create a profile to store 'Favourite List' and 'To Watch List', and set ratings on the movies they loved and hated (feature not yet available). If users can't decide on a movie to watch next, the Randomise feature will choose for you!
-
-On start be welcomed by the Oscars Judge App welcome message, greeting the user and describing how to operate the app in short. The welcome screen waits for 3 seconds until the user is presented with 'Who is watching?' and the ability to select a pre-made profile or create a new profile with 'New User'. If 'New User' is selected, the prompt 'Type name of new user' requests the new user's name.
-
-The user's name will be used as a personifier throughout the session in menu titles. On exit of the app the profile will save and the name will be a unique identifier when they return to play again. When 'Who's Watching?' has been executed the main menu will appear requesting selection.
-
-Selecting option '2021 Best Picture' will list films from that selected category. Movie information will be printed, including synopsis and director. The user can select to store that movie into their 'To Watch List' or in their 'Favourite List' for future analysis.
-
-The Main Menu is where the personalised 'To Watch List' and 'Favourite List' are directly accessed. If the 'To Watch List' is populated there is the option to exit the app via direct link of the chosen movie.
-
-The avid movie goer will love the ease of movie information and ability to store their rating and movie review(currently unavailable) in their 'Favourite List'.
-
-The app is great for the indecisive user who finds it difficult to find quality movies. The 'Random Movie Selector' will narrow down the search for the user, provide a movie choice and exiting the app to watch.
-
-Users can return and start from where they left off to update their profiles and discover what to watch next.
-
-<br />
-<br />
-
-## Main Features
-
-**User Profile Creation**
-Allows a user to create a profile that stores the data they create and remembers it for future sessions. The User Profile Creation caters to multiple users.
-
-- On creation of a new user, the data is stored in an array which is assigned as a variable defined by the users name. name = $bella ?
-- Within the array profile we store @watchlist and @favourite variables that can be called in creating new lists. Are these global variables?
-- when a user is attempting to make a profile a conditional conditional control structure will check if the name contains any invalid numbers or symbols. This is where 'invalid name' error handling will take place.
-  <br />
-  <br />
-
-**Creating New Lists**
-is for @watchlist and @favourite lists and is defined by the user and stored in the user profile. Lists can be accessed whilst in the main menu.
-
-- $watchlist and $favourite are global variables because they can be accessed across multiple features. variable movie names are accessed to pull the entire movie info to move into either list.
-- there are no loops only printing of the array of variable movie title names.
-- If nothing has been saved in the lists a 'nothing saved' error message is printed.
-  <br />
-  <br />
-
-**Randomise Movies**
-When a user can't choose what movie to watch they have the option in the main menu to randomly output a movie from the entire movie list. On selection it executes watch now and exits user directly to an external website youtube trailer link.
-
-- It randomises the variable movies names and their youtube link value.
-- Loop control structure for random variable movie name output. On answer user has conditional control structure to 'watch now' and exit or 'go back' to main menu.
-- possible error handling if user receives movies that they have favourited.  
-  <br />
-  <br />
-
-**Saving Session**
-Saving session is setup initially by User Profile Creation feature. It allows users to return to where they left off.
-
-- When users decide to exit the program their data is automatically saved into their profile @name variable and @watchlist @favourites into their alloted key values.
-- All end points offer a conditional control structure before exiting 'are you sure'? If no, it loops back into main menu selection.
-- Error messages must be displayed if saving does not complete at exit.
-  <br />
-  <br />
-
-## User Interaction
-
-As seen above, The README.md file provides the user instructions on the install requirements to run the Oscars Judge Terminal App. The README.md also provides the user instructions on how to navigate the app using up and down arrow keys rather than a mouse click or numerical.
-Built into the Oscars Judge Terminal App is a -help flag that will also give a rundown of requirements and how to navigate and any other features the User needs to be informed about.
-
-On start after the app welcome page, the **User Profile Creation** feature allows the user to either select their previously saved profile or create a new user profile. Users initially create their profile by selecting 'New User' which prompts name input. To save the user just has to exit via prompt and **Saving Sessions** feature will execute. On return to the app a user who's created a profile will see their name as an option to continue with their saved profile that has stored all information from the **Creating New Lists** feature.
-Error handling for **User Profile Creation** is set for name input, ensuring only english a-z characters are used, no symbols or numbers. Control flow will stop on invalid user name, displaying a prompt to enter a new name and the reason why.  
-[image]
-
-The user can interact with 'To Watch List' and 'Favourite List' objects in the **Creating New Lists** feature that allows them to keep record and interact with the app. Whilst browsing movies in their chosen films category they have the option to 'Save to Watch List'/'Save to Favourite List'. The user doesn't get taken from the movie interface they've selected, rather on selection the movie is pushed into the array list of their choice. If the movie is already in either list error handling will display 'movie not added. Movie already in list'.
-When they want to view either list, it is available to select through the main menu. If the lists are empty, error handling will display 'You don't have any items to list.'
-[image]
-
-When the user can't decide on a movie to watch **Randomise Movies** feature can be selected to output a random movie. On execute the feature will loop through all movies Control flow, If option is random - output movie. This is also a feature exit of the program that will take the user to a direct link to watch the movie.
-The session will end and **Saving Session** feature will execute. Error handling to display 'You've seen this film' is not yet set up on **Randomise Movies** feature yet.
-[image]
-
-The user must move through the app after creating their profile to get to the final feature. On exit of the app, the user does not have to take any additional steps for the **Saving Sessions** to execute as it is a built in save automation. The control flow asks, If exit - then save to file.
-Error handling is not yet set up for **Saving Sessions**. If something goes wrong on exit or the save does not occur a message will display 'save error - goodbye'.
-[image]
diff --git a/src/user_profile.rb b/user_profile.rb
similarity index 100%
rename from src/user_profile.rb
rename to user_profile.rb

commit ab4dfd4ae1038b50fa0ed65c1e869de5f1feed63
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Thu May 20 09:53:23 2021 +1000

    moved readme into src folder

diff --git a/src/README.md b/src/README.md
new file mode 100644
index 0000000..f5bb8ad
--- /dev/null
+++ b/src/README.md
@@ -0,0 +1,104 @@
+# Oscars Judge
+
+Oscars Judge gives you the opportunity to be your own judge on the Academy Awards nominees and winners.
+Create:
+
+- personalise lists of your favourite Oscars movies,
+- personalise To Watch Lists,
+- Randomise best picture movies to watch,
+- Rate your movies and compare to award winners(feature not yet available).
+
+## Installation
+
+Insert Installation requirements
+
+## Example imagery
+
+Insert example images of app
+
+<br />
+<br />
+
+# Software Development Plan
+
+## Statement of Purpose
+
+The Oscars Judge Terminal App is a multi-user, multi-session Oscar's experience, presenting the user with information on the nominees and winners of every annual Academy Awards category.
+
+Users can create a profile to store 'Favourite List' and 'To Watch List', and set ratings on the movies they loved and hated (feature not yet available). If users can't decide on a movie to watch next, the Randomise feature will choose for you!
+
+On start be welcomed by the Oscars Judge App welcome message, greeting the user and describing how to operate the app in short. The welcome screen waits for 3 seconds until the user is presented with 'Who is watching?' and the ability to select a pre-made profile or create a new profile with 'New User'. If 'New User' is selected, the prompt 'Type name of new user' requests the new user's name.
+
+The user's name will be used as a personifier throughout the session in menu titles. On exit of the app the profile will save and the name will be a unique identifier when they return to play again. When 'Who's Watching?' has been executed the main menu will appear requesting selection.
+
+Selecting option '2021 Best Picture' will list films from that selected category. Movie information will be printed, including synopsis and director. The user can select to store that movie into their 'To Watch List' or in their 'Favourite List' for future analysis.
+
+The Main Menu is where the personalised 'To Watch List' and 'Favourite List' are directly accessed. If the 'To Watch List' is populated there is the option to exit the app via direct link of the chosen movie.
+
+The avid movie goer will love the ease of movie information and ability to store their rating and movie review(currently unavailable) in their 'Favourite List'.
+
+The app is great for the indecisive user who finds it difficult to find quality movies. The 'Random Movie Selector' will narrow down the search for the user, provide a movie choice and exiting the app to watch.
+
+Users can return and start from where they left off to update their profiles and discover what to watch next.
+
+<br />
+<br />
+
+## Main Features
+
+**User Profile Creation**
+Allows a user to create a profile that stores the data they create and remembers it for future sessions. The User Profile Creation caters to multiple users.
+
+- On creation of a new user, the data is stored in an array which is assigned as a variable defined by the users name. name = $bella ?
+- Within the array profile we store @watchlist and @favourite variables that can be called in creating new lists. Are these global variables?
+- when a user is attempting to make a profile a conditional conditional control structure will check if the name contains any invalid numbers or symbols. This is where 'invalid name' error handling will take place.
+  <br />
+  <br />
+
+**Creating New Lists**
+is for @watchlist and @favourite lists and is defined by the user and stored in the user profile. Lists can be accessed whilst in the main menu.
+
+- $watchlist and $favourite are global variables because they can be accessed across multiple features. variable movie names are accessed to pull the entire movie info to move into either list.
+- there are no loops only printing of the array of variable movie title names.
+- If nothing has been saved in the lists a 'nothing saved' error message is printed.
+  <br />
+  <br />
+
+**Randomise Movies**
+When a user can't choose what movie to watch they have the option in the main menu to randomly output a movie from the entire movie list. On selection it executes watch now and exits user directly to an external website youtube trailer link.
+
+- It randomises the variable movies names and their youtube link value.
+- Loop control structure for random variable movie name output. On answer user has conditional control structure to 'watch now' and exit or 'go back' to main menu.
+- possible error handling if user receives movies that they have favourited.  
+  <br />
+  <br />
+
+**Saving Session**
+Saving session is setup initially by User Profile Creation feature. It allows users to return to where they left off.
+
+- When users decide to exit the program their data is automatically saved into their profile @name variable and @watchlist @favourites into their alloted key values.
+- All end points offer a conditional control structure before exiting 'are you sure'? If no, it loops back into main menu selection.
+- Error messages must be displayed if saving does not complete at exit.
+  <br />
+  <br />
+
+## User Interaction
+
+As seen above, The README.md file provides the user instructions on the install requirements to run the Oscars Judge Terminal App. The README.md also provides the user instructions on how to navigate the app using up and down arrow keys rather than a mouse click or numerical.
+Built into the Oscars Judge Terminal App is a -help flag that will also give a rundown of requirements and how to navigate and any other features the User needs to be informed about.
+
+On start after the app welcome page, the **User Profile Creation** feature allows the user to either select their previously saved profile or create a new user profile. Users initially create their profile by selecting 'New User' which prompts name input. To save the user just has to exit via prompt and **Saving Sessions** feature will execute. On return to the app a user who's created a profile will see their name as an option to continue with their saved profile that has stored all information from the **Creating New Lists** feature.
+Error handling for **User Profile Creation** is set for name input, ensuring only english a-z characters are used, no symbols or numbers. Control flow will stop on invalid user name, displaying a prompt to enter a new name and the reason why.  
+[image]
+
+The user can interact with 'To Watch List' and 'Favourite List' objects in the **Creating New Lists** feature that allows them to keep record and interact with the app. Whilst browsing movies in their chosen films category they have the option to 'Save to Watch List'/'Save to Favourite List'. The user doesn't get taken from the movie interface they've selected, rather on selection the movie is pushed into the array list of their choice. If the movie is already in either list error handling will display 'movie not added. Movie already in list'.
+When they want to view either list, it is available to select through the main menu. If the lists are empty, error handling will display 'You don't have any items to list.'
+[image]
+
+When the user can't decide on a movie to watch **Randomise Movies** feature can be selected to output a random movie. On execute the feature will loop through all movies Control flow, If option is random - output movie. This is also a feature exit of the program that will take the user to a direct link to watch the movie.
+The session will end and **Saving Session** feature will execute. Error handling to display 'You've seen this film' is not yet set up on **Randomise Movies** feature yet.
+[image]
+
+The user must move through the app after creating their profile to get to the final feature. On exit of the app, the user does not have to take any additional steps for the **Saving Sessions** to execute as it is a built in save automation. The control flow asks, If exit - then save to file.
+Error handling is not yet set up for **Saving Sessions**. If something goes wrong on exit or the save does not occur a message will display 'save error - goodbye'.
+[image]

commit 1f7692961c5f9367efd8522476023af1db4feeed
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Thu May 20 09:52:09 2021 +1000

    finished User Interaction in README.md. Moving through main menu feature and testing

diff --git a/src/index.rb b/src/index.rb
index 0d69f98..d5b1d30 100644
--- a/src/index.rb
+++ b/src/index.rb
@@ -18,7 +18,7 @@ end
 
 def menu
     puts "*******************************************"
-    puts "Please choose an option"
+    puts "Please choose an option."
     puts "1: View 2021 Best Picture Films"
     puts "2: Add a movie to the list"
     puts "3: Remove a movie from the list"
@@ -45,6 +45,8 @@ loop do
     menu
 
     case gets.to_i
+    # view list first then create view best picture.
+    # best picture just write file path
     when 1
         mainmenu.viewbestpicture
     when 2 
diff --git a/src/list.rb b/src/list.rb
index 9104615..c1a5ccb 100644
--- a/src/list.rb
+++ b/src/list.rb
@@ -35,10 +35,10 @@ class List
         puts "Add a movie to the list"    
         puts 
         print ">"
-        task = gets.strip
+        movie = gets.strip
         @list = file_to_array(@file_path)
         # add movie to array
-        @list << task
+        @list << movie
         # write contents of array into file
         array_to_file(@list)
         puts "Success!"
@@ -46,8 +46,17 @@ class List
     end
 
     def remove
-
+    system 'clear'
         puts "Remove a movie from the list"
+        @list = file_to_array(@file_path)
+        # view
+        puts "Enter the movie number: "
+        print ">"
+        movie_no = gets.to_i - 1
+        # the file starts at 1 but array starts at 0 does so need to -1 to start.
+        @list.delete_at movie_no 
+        puts "Success! Deleted"
+        array_to_file(@list)
         puts "*******************************************"
     end
 
diff --git a/src/lists/Cate.txt b/src/lists/Bella.txt
similarity index 71%
rename from src/lists/Cate.txt
rename to src/lists/Bella.txt
index 41cad7e..a92bf9e 100644
--- a/src/lists/Cate.txt
+++ b/src/lists/Bella.txt
@@ -1,3 +1,2 @@
 Matrix
 Harry Potter
-Memento
diff --git a/src/spec/list_spec.rb b/src/spec/list_spec.rb
index 254e8f0..1c35fda 100644
--- a/src/spec/list_spec.rb
+++ b/src/spec/list_spec.rb
@@ -1,7 +1,7 @@
 require_relative '../list.rb'
 
 describe "List"
-    context "#view new user list" do 
+    context "#view new user main menu" do 
     # hash shows that this is an instance methods
 
     #before everything create a new instance

commit 6ddb0fc1c07fee4af1caf814352db7562fe3e7ad
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 19 16:34:07 2021 +1000

    started building menu with tests

diff --git a/src/index.rb b/src/index.rb
index 68dd7dc..0d69f98 100644
--- a/src/index.rb
+++ b/src/index.rb
@@ -1,51 +1,64 @@
-# # FEATURE: User Profile Creation
+# when the program starts, ask user name
+# create a new list for a new user
+#when a new list is created it is called by the name of the user
 
-# # Input User input name string into name.
-# # Create space to put watch and fave
+#1. View existing list
+#2. Create a new list for a new user
+#3. Add a new task to the list
+#4. Remove a tast from the list
 
-# # On input it gets put into a class and stored into an array of hashes?
+require_relative "./list"
 
-# class NewUser
-#     attr_accessor :user # I want them all to be read but not editable
-    
-#     def initialize
-#         @user = "user name"
-#     end
+def greeting 
+    puts "Hi!"
+    puts "Welcome to Oscars Judge Terminal App"
+    puts "What is your name?"
+    puts "*******************************************"
+end
 
+def menu
+    puts "*******************************************"
+    puts "Please choose an option"
+    puts "1: View 2021 Best Picture Films"
+    puts "2: Add a movie to the list"
+    puts "3: Remove a movie from the list"
+    puts "4: View To Watch List"
+    puts "5: View Favourite List"
+    puts "6: Random Movie Selector"
+    puts "7: Exit"
+    puts "*******************************************"
+end
+# ------------------------
+# main body
+# ------------------------
 
-# end
+system 'clear'
+greeting
 
-# class CreatingNewLists
-#     # movie gets added to list and get stored here
-#     attr_accessor :watch[], :fave[]
+name = gets.strip.downcase.capitalize
+puts ">>>>> Thanks for joining us #{name}"
 
-#     def initialize (watch: [], fave: [])
-#         @watch = watch
-#         @fave = fave
-#     end
-# end
+mainmenu = List.new(name)
 
-# # FEATURE: User Profile Creation
-# class UserProfileCreation
-#     # user and list gets added and it goes here.
-#     @users = %/Bella User/
+loop do
+    #start 
+    menu
 
-#     @user_profile = []
+    case gets.to_i
+    when 1
+        mainmenu.viewbestpicture
+    when 2 
+        mainmenu.add
+    when 3
+        mainmenu.remove
+    when 4
+        mainmenu.watch
+    when 5 
+        mainmenu.fave
+    when 6
+        mainmenu.random
+    when 7
+        exit
+    end
+end
 
-#     count = 0
-#     while count < 10
-#         @user_profile << NewUser.new
-#         count += 1
-#     end 
-# end
-
-# # FEATURE: Saving Sessions
-# # on exit information created get stored
-
-# class SavingSessions
-#     # loop 
-#     # user << @name
-#     # user << @watch
-#     # user << @fave
-# end
-        
\ No newline at end of file
diff --git a/src/list.rb b/src/list.rb
index 77670d5..9104615 100644
--- a/src/list.rb
+++ b/src/list.rb
@@ -11,29 +11,42 @@ class List
         # bestpicture = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
 
         puts "2021 Best Picture Films: #{@name}"
-
-        if File.exist?(@file_path) 
-            # just reading from file, not from an array
-            File.open(@file_path, 'r') do |file|
-                file.each_line do |line|
-                    puts "#{file.lineno}. #{line}"
+        #reading from a file instead of array
+        if file_exist? 
+            unless file_empty? #if not empty open it
+                File.open(@file_path, 'r') do |file|
+                    file.each_line do |line|
+                        puts "#{file.lineno}. #{line}"
+                    end
+                    # working with files we can call each line of file through each_line
                 end
-                # working with files we can call each line of file through each_line
+            else
+                puts "Your list is empty."
             end
-        else
-            puts "New Profile for #{@name}"
-            file = File.new(@file_path, 'w')
-            file.puts "" # you can add additional text here when file is created
-            file.close #always close your file
+        else #if file does not exist
+            #refactoring by moving code down in private
+            create
         end # if exist
     end
 
     def add
+        # check whether the file exists and read  into array, otherwise create a new file
+    system 'clear'
         puts "Add a movie to the list"    
+        puts 
+        print ">"
+        task = gets.strip
+        @list = file_to_array(@file_path)
+        # add movie to array
+        @list << task
+        # write contents of array into file
+        array_to_file(@list)
+        puts "Success!"
         puts "*******************************************"
     end
 
     def remove
+
         puts "Remove a movie from the list"
         puts "*******************************************"
     end
@@ -52,4 +65,48 @@ class List
         puts "Random Movie Selector"
         puts "*******************************************"
     end
+
+
+    # You can have these in the public section but makes it easier to read
+    # methods that arern't called outside of class should be in private. 
+    # methods called outside of class should be easily visble in public section.
+    private
+    def file_empty? # true or false if file is empty
+        File.zero?(@file_path)
+    end
+
+    def file_exist? #true or false if file exists
+        File.exist?(@file_path)
+    end
+
+    def create
+        puts "New Empty Profile for #{@name}"
+            file = File.new(@file_path, 'w')
+            file.puts "" # you can add additional text here when file is created
+            file.close #always close your file
+    end
+
+    def file_to_array(path)
+    #read file content into an array
+        array = []
+        if file_exist?
+            File.open(path, 'r') do |file|
+                file.each_line do |line|
+                    array << line.strip
+                end
+            end
+        else
+            create
+        end
+        return array
+        # last line of method gets returned
+    end #file to array
+
+    def array_to_file(array)
+        File.open(@file_path, 'w') do |file|
+            array.each do |line|
+                file.puts line 
+            end
+        end
+    end
 end
\ No newline at end of file
diff --git a/src/lists/Cate.txt b/src/lists/Cate.txt
new file mode 100644
index 0000000..41cad7e
--- /dev/null
+++ b/src/lists/Cate.txt
@@ -0,0 +1,3 @@
+Matrix
+Harry Potter
+Memento
diff --git a/src/main.rb b/src/main.rb
deleted file mode 100644
index 1f7a546..0000000
--- a/src/main.rb
+++ /dev/null
@@ -1,64 +0,0 @@
-# when the program starts, ask user name
-# create a new list for a new user
-#when a new list is created it is called by the name of the user
-
-#1. View existing list
-#2. Create a new list for a new user
-#3. Add a new task to the list
-#4. Remove a tast from the list
-
-require_relative "./list"
-
-def greeting 
-    puts "Hi!"
-    puts "Welcome to Oscars Judge Terminal App"
-    puts "What is your name?"
-    puts "*******************************************"
-end
-
-def menu
-    puts "**********************"
-    puts "Please choose an option"
-    puts "1: View 2021 Best Picture Films"
-    puts "2: Add a movie to the list"
-    puts "3: Remove a movie from the list"
-    puts "4: View To Watch List"
-    puts "5: View Favourite List"
-    puts "6: Random Movie Selector"
-    puts "7: Exit"
-    puts "*******************************************"
-end
-# ------------------------
-# main body
-# ------------------------
-
-system 'clear'
-greeting
-
-name = gets.strip.downcase.capitalize
-puts ">>>>> Thanks for joining us #{name}"
-
-mainmenu = List.new(name)
-
-loop do
-    #start 
-    menu
-
-    case gets.to_i
-    when 1
-        mainmenu.viewbestpicture
-    when 2 
-        mainmenu.add
-    when 3
-        mainmenu.remove
-    when 4
-        mainmenu.watch
-    when 5 
-        mainmenu.fave
-    when 6
-        mainmenu.random
-    when 7
-        exit
-    end
-end
-

commit 94b56bb09f904b7ffddb49593214f27e96f4d701
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 19 15:47:50 2021 +1000

    recent changes were from iryna test. Getting syntax error

diff --git a/src/list.rb b/src/list.rb
new file mode 100644
index 0000000..77670d5
--- /dev/null
+++ b/src/list.rb
@@ -0,0 +1,55 @@
+class List
+    # do i need the initialise function?
+    # yes because each user needs a new one
+    def initialize(name)
+        @name = name
+        @file_path = "./lists/#{name}.txt" 
+        # passing in name as arguement or instance variable@ 
+    end
+    
+    def viewbestpicture
+        # bestpicture = ["Sound of Metal", "Mank", "Minari", "Promising Young Woman", "The Father", "Judas and the Black Messiah", "The Trial of the Chicago 7", "Nomadland"]
+
+        puts "2021 Best Picture Films: #{@name}"
+
+        if File.exist?(@file_path) 
+            # just reading from file, not from an array
+            File.open(@file_path, 'r') do |file|
+                file.each_line do |line|
+                    puts "#{file.lineno}. #{line}"
+                end
+                # working with files we can call each line of file through each_line
+            end
+        else
+            puts "New Profile for #{@name}"
+            file = File.new(@file_path, 'w')
+            file.puts "" # you can add additional text here when file is created
+            file.close #always close your file
+        end # if exist
+    end
+
+    def add
+        puts "Add a movie to the list"    
+        puts "*******************************************"
+    end
+
+    def remove
+        puts "Remove a movie from the list"
+        puts "*******************************************"
+    end
+
+    def watch
+        puts "View to Watch List"
+        puts "*******************************************"
+    end
+
+    def fave
+        puts "View Favourite List"
+        puts "*******************************************"
+    end
+
+    def random
+        puts "Random Movie Selector"
+        puts "*******************************************"
+    end
+end
\ No newline at end of file
diff --git a/src/best_picture.txt b/src/lists/best_picture.txt
similarity index 100%
rename from src/best_picture.txt
rename to src/lists/best_picture.txt
diff --git a/src/main.rb b/src/main.rb
new file mode 100644
index 0000000..1f7a546
--- /dev/null
+++ b/src/main.rb
@@ -0,0 +1,64 @@
+# when the program starts, ask user name
+# create a new list for a new user
+#when a new list is created it is called by the name of the user
+
+#1. View existing list
+#2. Create a new list for a new user
+#3. Add a new task to the list
+#4. Remove a tast from the list
+
+require_relative "./list"
+
+def greeting 
+    puts "Hi!"
+    puts "Welcome to Oscars Judge Terminal App"
+    puts "What is your name?"
+    puts "*******************************************"
+end
+
+def menu
+    puts "**********************"
+    puts "Please choose an option"
+    puts "1: View 2021 Best Picture Films"
+    puts "2: Add a movie to the list"
+    puts "3: Remove a movie from the list"
+    puts "4: View To Watch List"
+    puts "5: View Favourite List"
+    puts "6: Random Movie Selector"
+    puts "7: Exit"
+    puts "*******************************************"
+end
+# ------------------------
+# main body
+# ------------------------
+
+system 'clear'
+greeting
+
+name = gets.strip.downcase.capitalize
+puts ">>>>> Thanks for joining us #{name}"
+
+mainmenu = List.new(name)
+
+loop do
+    #start 
+    menu
+
+    case gets.to_i
+    when 1
+        mainmenu.viewbestpicture
+    when 2 
+        mainmenu.add
+    when 3
+        mainmenu.remove
+    when 4
+        mainmenu.watch
+    when 5 
+        mainmenu.fave
+    when 6
+        mainmenu.random
+    when 7
+        exit
+    end
+end
+
diff --git a/src/spec/list_spec.rb b/src/spec/list_spec.rb
new file mode 100644
index 0000000..254e8f0
--- /dev/null
+++ b/src/spec/list_spec.rb
@@ -0,0 +1,26 @@
+require_relative '../list.rb'
+
+describe "List"
+    context "#view new user list" do 
+    # hash shows that this is an instance methods
+
+    #before everything create a new instance
+        before do 
+            @mainmenu = List.new('new_user')
+        end
+
+        it 'should create a new file' do
+            @mainmenu.view
+            expect(File.exist?('./lists/new_user.txt')).to be true
+        end
+
+        it 'should be empty' do
+            expect(File.size('./lists/new_user.txt')).to eq(0)
+        end
+        
+        # after use, delete
+        after(:context) do # to delete the file url
+            File.delete('./lists/new_user.txt')
+        end
+    end
+end
\ No newline at end of file
diff --git a/src/spec/ruby_oscars_spec.rb b/src/spec/ruby_oscars_spec.rb
index 61722db..684c3a8 100644
--- a/src/spec/ruby_oscars_spec.rb
+++ b/src/spec/ruby_oscars_spec.rb
@@ -13,7 +13,6 @@ describe MovieItem do
         movie_item = MovieItem.new(name)
         expect(movie_item.name).to eq(name)
     end
-
     # it 'should save to watch list and offer to go to list'
     # it 'should save to fave list and offer to go to list'
     # it 'should go back to main menu'
@@ -26,4 +25,10 @@ describe MovieMenu do
         menu.add_item(name)
         expect(menu.get_name(name)).to eq(name)
     end
+    it 'should be able to add a movie item name' do
+        name = "Nomadland"
+        menu = MovieMenu.new
+        menu.add_item(name)
+        expect(menu.get_items().length).to be(1)
+    end
 end
\ No newline at end of file

commit ab78beed735d1b780813197965e67422231d3b52
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 19 14:04:34 2021 +1000

    attempting tests on movie item and movie menu though getting a NoMethodError on 'name'

diff --git a/src/index.rb b/src/index.rb
index 6a13420..68dd7dc 100644
--- a/src/index.rb
+++ b/src/index.rb
@@ -1,51 +1,51 @@
-# FEATURE: User Profile Creation
+# # FEATURE: User Profile Creation
 
-# Input User input name string into name.
-# Create space to put watch and fave
+# # Input User input name string into name.
+# # Create space to put watch and fave
 
-# On input it gets put into a class and stored into an array of hashes?
+# # On input it gets put into a class and stored into an array of hashes?
 
-class NewUser
-    attr_accessor :user # I want them all to be read but not editable
+# class NewUser
+#     attr_accessor :user # I want them all to be read but not editable
     
-    def initialize
-        @user = "user name"
-    end
-
-
-end
-
-class CreatingNewLists
-    # movie gets added to list and get stored here
-    attr_accessor :watch[], :fave[]
-
-    def initialize (watch: [], fave: [])
-        @watch = watch
-        @fave = fave
-    end
-end
-
-# FEATURE: User Profile Creation
-class UserProfileCreation
-    # user and list gets added and it goes here.
-    @users = %/Bella User/
-
-    @user_profile = []
-
-    count = 0
-    while count < 10
-        @user_profile << NewUser.new
-        count += 1
-    end 
-end
-
-# FEATURE: Saving Sessions
-# on exit information created get stored
-
-class SavingSessions
-    # loop 
-    # user << @name
-    # user << @watch
-    # user << @fave
-end
+#     def initialize
+#         @user = "user name"
+#     end
+
+
+# end
+
+# class CreatingNewLists
+#     # movie gets added to list and get stored here
+#     attr_accessor :watch[], :fave[]
+
+#     def initialize (watch: [], fave: [])
+#         @watch = watch
+#         @fave = fave
+#     end
+# end
+
+# # FEATURE: User Profile Creation
+# class UserProfileCreation
+#     # user and list gets added and it goes here.
+#     @users = %/Bella User/
+
+#     @user_profile = []
+
+#     count = 0
+#     while count < 10
+#         @user_profile << NewUser.new
+#         count += 1
+#     end 
+# end
+
+# # FEATURE: Saving Sessions
+# # on exit information created get stored
+
+# class SavingSessions
+#     # loop 
+#     # user << @name
+#     # user << @watch
+#     # user << @fave
+# end
         
\ No newline at end of file
diff --git a/src/main_menu.rb b/src/main_menu.rb
new file mode 100644
index 0000000..e69de29
diff --git a/src/movie_item.rb b/src/movie_item.rb
new file mode 100644
index 0000000..7680847
--- /dev/null
+++ b/src/movie_item.rb
@@ -0,0 +1,11 @@
+class MovieItem
+    attr_reader :name
+
+    def initialize(name)
+        @name = name
+    end
+    # removed to refactor through attr_accessor
+    # def name
+    #     return @name
+    # end
+end
\ No newline at end of file
diff --git a/src/movie_menu.rb b/src/movie_menu.rb
new file mode 100644
index 0000000..1e8daf2
--- /dev/null
+++ b/src/movie_menu.rb
@@ -0,0 +1,15 @@
+require_relative './movie_item'
+
+class MovieMenu
+    def initialize
+        @movie_items = []
+    end
+    def add_item(name)
+        movie_item = MovieItem.new(name)
+        @movie_items << movie_item
+    end
+    def get_name(name)
+        item = @movie_items.filter {|movie_item| movie_item.name == name}
+        return item.name
+    end
+end
\ No newline at end of file
diff --git a/src/oscars_app.rb b/src/oscars_app.rb
new file mode 100644
index 0000000..e69de29
diff --git a/src/randomiser.rb b/src/randomiser.rb
new file mode 100644
index 0000000..e69de29
diff --git a/src/saving_session.rb b/src/saving_session.rb
new file mode 100644
index 0000000..e69de29
diff --git a/src/spec/ruby_oscars_spec.rb b/src/spec/ruby_oscars_spec.rb
index e69de29..61722db 100644
--- a/src/spec/ruby_oscars_spec.rb
+++ b/src/spec/ruby_oscars_spec.rb
@@ -0,0 +1,29 @@
+# require_relative "../oscars_app"
+# require_relative "../main_menu"
+require_relative "../movie_menu"
+require_relative "../movie_item"
+# starting build from lowest level item 
+# require_relative "../randomiser"
+# require_relative "../saving_session"
+
+describe MovieItem do 
+    it 'should display the movie item' do
+        name = "Sound of Metal" 
+        #needs to be pulled from awards array
+        movie_item = MovieItem.new(name)
+        expect(movie_item.name).to eq(name)
+    end
+
+    # it 'should save to watch list and offer to go to list'
+    # it 'should save to fave list and offer to go to list'
+    # it 'should go back to main menu'
+end
+
+describe MovieMenu do
+    it 'should display list of movies' do
+        name = "Minari"
+        menu = MovieMenu.new
+        menu.add_item(name)
+        expect(menu.get_name(name)).to eq(name)
+    end
+end
\ No newline at end of file

commit 398dba49e53d112ed3efa8796f8e8acd7b1777a6
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 19 12:33:21 2021 +1000

    added bundle, rspec and made spec directory and files

diff --git a/src/Gemfile b/src/Gemfile
new file mode 100644
index 0000000..ec0f2ee
--- /dev/null
+++ b/src/Gemfile
@@ -0,0 +1,9 @@
+# frozen_string_literal: true
+
+source "https://rubygems.org"
+
+git_source(:github) { |repo_name| "https://github.com/#{repo_name}" }
+
+# gem "rails"
+
+gem "rspec", "~> 3.10"
diff --git a/src/Gemfile.lock b/src/Gemfile.lock
new file mode 100644
index 0000000..63ec47d
--- /dev/null
+++ b/src/Gemfile.lock
@@ -0,0 +1,26 @@
+GEM
+  remote: https://rubygems.org/
+  specs:
+    diff-lcs (1.4.4)
+    rspec (3.10.0)
+      rspec-core (~> 3.10.0)
+      rspec-expectations (~> 3.10.0)
+      rspec-mocks (~> 3.10.0)
+    rspec-core (3.10.1)
+      rspec-support (~> 3.10.0)
+    rspec-expectations (3.10.1)
+      diff-lcs (>= 1.2.0, < 2.0)
+      rspec-support (~> 3.10.0)
+    rspec-mocks (3.10.2)
+      diff-lcs (>= 1.2.0, < 2.0)
+      rspec-support (~> 3.10.0)
+    rspec-support (3.10.2)
+
+PLATFORMS
+  x86_64-darwin-20
+
+DEPENDENCIES
+  rspec (~> 3.10)
+
+BUNDLED WITH
+   2.2.17
diff --git a/src/index.rb b/src/index.rb
index 2cc4077..6a13420 100644
--- a/src/index.rb
+++ b/src/index.rb
@@ -16,16 +16,18 @@ class NewUser
 end
 
 class CreatingNewLists
+    # movie gets added to list and get stored here
     attr_accessor :watch[], :fave[]
 
     def initialize (watch: [], fave: [])
         @watch = watch
         @fave = fave
     end
-
 end
 
+# FEATURE: User Profile Creation
 class UserProfileCreation
+    # user and list gets added and it goes here.
     @users = %/Bella User/
 
     @user_profile = []
@@ -35,11 +37,9 @@ class UserProfileCreation
         @user_profile << NewUser.new
         count += 1
     end 
-    
 end
 
 # FEATURE: Saving Sessions
-
 # on exit information created get stored
 
 class SavingSessions
diff --git a/src/spec/ruby_oscars_spec.rb b/src/spec/ruby_oscars_spec.rb
new file mode 100644
index 0000000..e69de29

commit bffe6880fded2e84d6211abe572a8b019392f11d
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 19 11:14:24 2021 +1000

    added gemfile through bundle init, updating readme user interaction writen section.

diff --git a/Gemfile b/Gemfile
new file mode 100644
index 0000000..d41f271
--- /dev/null
+++ b/Gemfile
@@ -0,0 +1,7 @@
+# frozen_string_literal: true
+
+source "https://rubygems.org"
+
+git_source(:github) { |repo_name| "https://github.com/#{repo_name}" }
+
+# gem "rails"
diff --git a/README.md b/README.md
index dea8a1e..4a51ee2 100644
--- a/README.md
+++ b/README.md
@@ -81,3 +81,16 @@ Saving session is setup initially by User Profile Creation feature. It allows us
 - Error messages must be displayed if saving does not complete at exit.
   <br />
   <br />
+
+## User Interaction
+
+As seen above, The README.md file provides the user instructions on the install requirements to run the Oscars Judge Terminal App. The README.md also provides the user instructions on how to navigate the app using keys rather than a mouse click.
+Built into the Oscars Judge Terminal App is a -help flag that will also give a rundown of requirements and how to navigate and any other features the User needs to be informed about.
+
+On start the **User Profile Creation** allows the user to save their profile by inputing their name through string datatype.
+
+The user can interact with two objects in the **Creating New Lists** feature that allows them to keep record and interact. The 'To Watch List' and 'Favourite List' can be added too. The rating and review interactive part of 'Favourite List' is a feature not yet available.
+
+When the user can't decide on a movie to watch **Randomise Movies** can be selected to output a random movie. The interaction is control flow If random, output movie.
+
+On exit of the app, the user does not have to take any additional steps for the **Saving Sessions** to execute as it is a built in automation. The control flow asks, If exit - then save.
diff --git a/src/index.rb b/src/index.rb
index e69de29..2cc4077 100644
--- a/src/index.rb
+++ b/src/index.rb
@@ -0,0 +1,51 @@
+# FEATURE: User Profile Creation
+
+# Input User input name string into name.
+# Create space to put watch and fave
+
+# On input it gets put into a class and stored into an array of hashes?
+
+class NewUser
+    attr_accessor :user # I want them all to be read but not editable
+    
+    def initialize
+        @user = "user name"
+    end
+
+
+end
+
+class CreatingNewLists
+    attr_accessor :watch[], :fave[]
+
+    def initialize (watch: [], fave: [])
+        @watch = watch
+        @fave = fave
+    end
+
+end
+
+class UserProfileCreation
+    @users = %/Bella User/
+
+    @user_profile = []
+
+    count = 0
+    while count < 10
+        @user_profile << NewUser.new
+        count += 1
+    end 
+    
+end
+
+# FEATURE: Saving Sessions
+
+# on exit information created get stored
+
+class SavingSessions
+    # loop 
+    # user << @name
+    # user << @watch
+    # user << @fave
+end
+        
\ No newline at end of file
diff --git a/src/user_profile.rb b/src/user_profile.rb
index b4be14b..90a152f 100644
--- a/src/user_profile.rb
+++ b/src/user_profile.rb
@@ -1,6 +1,6 @@
 # default user
 user_profile = [
     {name: "Bella", 
-    favourites: [],
-    toWatch: []}
+    fave: [],
+    watch: []}
 ] 
\ No newline at end of file

commit e1934af248864a6d06d76ee18b8835712120369f
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Wed May 19 00:36:13 2021 +1000

    finished features description in readme. updated flowchart

diff --git a/README.md b/README.md
index 033fa59..dea8a1e 100644
--- a/README.md
+++ b/README.md
@@ -46,20 +46,38 @@ Users can return and start from where they left off to update their profiles and
 
 ## Main Features
 
-**Creating User**
+**User Profile Creation**
+Allows a user to create a profile that stores the data they create and remembers it for future sessions. The User Profile Creation caters to multiple users.
 
-<br />
-<br />
+- On creation of a new user, the data is stored in an array which is assigned as a variable defined by the users name. name = $bella ?
+- Within the array profile we store @watchlist and @favourite variables that can be called in creating new lists. Are these global variables?
+- when a user is attempting to make a profile a conditional conditional control structure will check if the name contains any invalid numbers or symbols. This is where 'invalid name' error handling will take place.
+  <br />
+  <br />
 
 **Creating New Lists**
+is for @watchlist and @favourite lists and is defined by the user and stored in the user profile. Lists can be accessed whilst in the main menu.
 
-<br />
-<br />
+- $watchlist and $favourite are global variables because they can be accessed across multiple features. variable movie names are accessed to pull the entire movie info to move into either list.
+- there are no loops only printing of the array of variable movie title names.
+- If nothing has been saved in the lists a 'nothing saved' error message is printed.
+  <br />
+  <br />
 
 **Randomise Movies**
-<br />
-<br />
+When a user can't choose what movie to watch they have the option in the main menu to randomly output a movie from the entire movie list. On selection it executes watch now and exits user directly to an external website youtube trailer link.
+
+- It randomises the variable movies names and their youtube link value.
+- Loop control structure for random variable movie name output. On answer user has conditional control structure to 'watch now' and exit or 'go back' to main menu.
+- possible error handling if user receives movies that they have favourited.  
+  <br />
+  <br />
 
 **Saving Session**
-<br />
-<br />
+Saving session is setup initially by User Profile Creation feature. It allows users to return to where they left off.
+
+- When users decide to exit the program their data is automatically saved into their profile @name variable and @watchlist @favourites into their alloted key values.
+- All end points offer a conditional control structure before exiting 'are you sure'? If no, it loops back into main menu selection.
+- Error messages must be displayed if saving does not complete at exit.
+  <br />
+  <br />
diff --git a/docs/Flowchart_T1A3.drawio b/docs/Flowchart_T1A3.drawio
index 8177a18..1b5e6f5 100644
--- a/docs/Flowchart_T1A3.drawio
+++ b/docs/Flowchart_T1A3.drawio
@@ -1 +1 @@
-<mxfile host="app.diagrams.net" modified="2021-05-18T12:21:32.375Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36" etag="u2Y_bxWBukNl5E11amLP" version="14.6.13" type="device" pages="3"><diagram id="EEbKFx0Qe1oUpt7cK2yP" name="app-flow">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</diagram><diagram id="Pa3GTjm2JhgWjG1fDgN7" name="data-flow">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</diagram><diagram id="e8ASWA4kNTYfSbyO9nUa" name="interface-flow">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</diagram></mxfile>
\ No newline at end of file
+<mxfile host="app.diagrams.net" modified="2021-05-18T13:58:16.610Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36" etag="HxkXI0yrU1jHCs2GdFK8" version="14.6.13" type="device" pages="3"><diagram id="EEbKFx0Qe1oUpt7cK2yP" name="app-flow">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</diagram><diagram id="Pa3GTjm2JhgWjG1fDgN7" name="data-flow">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</diagram><diagram id="e8ASWA4kNTYfSbyO9nUa" name="interface-flow">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</diagram></mxfile>
\ No newline at end of file

commit 3bd086e44101fab0902db211d99bd64ae1869b4c
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Tue May 18 23:56:50 2021 +1000

    updating readme file, adding favourite and towatch key value pairs in awards.rb file.

diff --git a/README.md b/README.md
index bf9fc32..033fa59 100644
--- a/README.md
+++ b/README.md
@@ -23,19 +23,23 @@ Insert example images of app
 
 ## Statement of Purpose
 
-The Oscars Judge Terminal App is a multi-user Oscar's experience, presenting the user with information on the nominees and winners of every annual Academy Awards category.
+The Oscars Judge Terminal App is a single-player, multi-user Oscar's experience, presenting the user with information on the nominees and winners of every annual Academy Awards category.
 
-Users can create a profile to store 'Favourite List' and 'To Watch Lists', and set ratings on the movies they loved and hated(feature not yet available). If users can't decide on a movie to watch next, the Randomise feature will choose for you!
+Users can create a profile to store 'Favourite List' and 'To Watch List', and set ratings on the movies they loved and hated (feature not yet available). If users can't decide on a movie to watch next, the Randomise feature will choose for you!
 
-On start be welcomed by the Oscars Judge App welcome message, greeting the user and describing how to operate the app in short. The welcome screen waits for 3 seconds until the user is presented with 'Who is watching?' and the ability to select a pre-made profile or create a new profile with New User. If 'New User' is selected, the prompt 'Type name of new user' requests the user's name. The user's name will be used as a personifier throughout the session of the app in menu titles. On end of the app the profile will save and the name will be a unique identifier when they return to play again.
-When 'Who's Watching?' has been executed the main menu will appear requesting selection. Selecting '2021 Best Picture' will list movie Titles from that selected category. On selection you will be provided with information about the movie, including synopsis and director. The user can select to store that movie into their 'To Watch List' or in their 'Favourites List' for future analysis.
-The main menu is where the 'To Watch List' and 'Favourite List' are accessed. If the 'To Watch List' is populated there is the option to exit the app via direct link to the movie.
+On start be welcomed by the Oscars Judge App welcome message, greeting the user and describing how to operate the app in short. The welcome screen waits for 3 seconds until the user is presented with 'Who is watching?' and the ability to select a pre-made profile or create a new profile with 'New User'. If 'New User' is selected, the prompt 'Type name of new user' requests the new user's name.
 
-The avid movie goer will love the ease of movie information and ability to store their rating and movie review features(currently unavailable) in their 'Favourites List'.
+The user's name will be used as a personifier throughout the session in menu titles. On exit of the app the profile will save and the name will be a unique identifier when they return to play again. When 'Who's Watching?' has been executed the main menu will appear requesting selection.
 
-The Oscars Judge App is great for the indecisive user who finds it difficult to find quality movies. The 'Random Movie Selector' will narrow down the search for the user, provide a movie choice and exiting the app to watch.
+Selecting option '2021 Best Picture' will list films from that selected category. Movie information will be printed, including synopsis and director. The user can select to store that movie into their 'To Watch List' or in their 'Favourite List' for future analysis.
 
-Users can return after watching movies to update their profiles and discover what to watch next.
+The Main Menu is where the personalised 'To Watch List' and 'Favourite List' are directly accessed. If the 'To Watch List' is populated there is the option to exit the app via direct link of the chosen movie.
+
+The avid movie goer will love the ease of movie information and ability to store their rating and movie review(currently unavailable) in their 'Favourite List'.
+
+The app is great for the indecisive user who finds it difficult to find quality movies. The 'Random Movie Selector' will narrow down the search for the user, provide a movie choice and exiting the app to watch.
+
+Users can return and start from where they left off to update their profiles and discover what to watch next.
 
 <br />
 <br />
@@ -59,15 +63,3 @@ Users can return after watching movies to update their profiles and discover wha
 **Saving Session**
 <br />
 <br />
-
-## Other Features
-
-**Menu Selection**
-The ability to select an option in a menu.Implementation detail.
-<br />
-<br />
-
-**Help**
-Instructions on instal, gems, flags, exit.
-<br />
-<br />
diff --git a/docs/Flowchart_T1A3.drawio b/docs/Flowchart_T1A3.drawio
index 1b3892f..8177a18 100644
--- a/docs/Flowchart_T1A3.drawio
+++ b/docs/Flowchart_T1A3.drawio
@@ -1 +1 @@
-<mxfile host="app.diagrams.net" modified="2021-05-18T11:33:52.486Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36" etag="3ASLZQZsHIuYevDUCSWR" version="14.6.13" type="device" pages="3"><diagram id="EEbKFx0Qe1oUpt7cK2yP" name="app-flow">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</diagram><diagram id="Pa3GTjm2JhgWjG1fDgN7" name="data-flow">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</diagram><diagram id="e8ASWA4kNTYfSbyO9nUa" name="interface-flow">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</diagram></mxfile>
\ No newline at end of file
+<mxfile host="app.diagrams.net" modified="2021-05-18T12:21:32.375Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36" etag="u2Y_bxWBukNl5E11amLP" version="14.6.13" type="device" pages="3"><diagram id="EEbKFx0Qe1oUpt7cK2yP" name="app-flow">7R1Zd5u4+tf45Mk+7Mtj1s60SZqbtNNJX+ZgG9tMsXEBZ+mvvxIgG6SPxSAWz0x72gQZS6BvXzWSL9dvH3xru7rz5rY7koT520i+GkmSqMky+oFH3uMRVdfigaXvzJObDgNPzi87GRSS0Z0zt4PMjaHnuaGzzQ7OvM3GnoWZMcv3vdfsbQvPza66tZY2M/A0s1x29JszD1fxqKEKh/HfbGe5IiuLQvLJ2iI3JwPBypp7r6kh+XokX/qeF8a/rd8ubRdvHtmX+Hs3OZ/uH8y3N2GVL6yeHr7qn7SfweNu7t8spjv76us4AUYQvpMXtufo/ZNLzw9X3tLbWO71YfTC93abuY1nFdDV4Z5bz9uiQREN/m2H4XsCTGsXemhoFa5d8uluvSVLLK0tGYlvF/Ed7Lslr4ufLjWQvOkH21vbof+ObvBt1wqdlyz0rAQJlvv79l998By0hCQkCDsWJXOixt9KMNY0hYmQ+iNl5wy8nT+zk2nS20/NrBI8INPqQnai0PKXdshMdO771nvqti2+Ich/A2YdU6j1XMn96Jf4CchVarcPQxGqwWgnPSzW79feWn4SvT+Whv38+Wk+TuDyYrm7BFIjSXNDjCboI22Jf/sczCwfvajwcYeBnnyOljvcQga3ZODCxi+CIIJ+eK8b9H92lgn65RyzENtfOwhl8b5ut3hgZeE9sVwXc4xojojTYM7i21aI53WdAG+84C0OiyysF/SLE32+X2rtvTh2gNbSrDXG7s002KaeFr3C9vAGFPmF9luYpZYg9L0f9qXnej4a2XgbTIMLx3WpoWBrzZzNEg2oh6svEUmOJUypryv0nE9oHC/16keE573Y/sKN2NLKmc/tDUPfuaSIvoketpAYCVFJQhbHCMq9HjiqRDjqKstN8wk4haGFCCj/fPi1mN5qXyRBVPSdfmt9fRhrYmPGV8jFjHqcEe2x//5nskB08YwvJiq5vHpLf3j1nr56sH0H7Y7tl0EuZlkF5JmwuJgjxfe9/7xZXq9/3VvK9uVp7V/M7a011nkz5aowLXrqFFPxd9NoefTjLy+izok/ZQHvukibsHMoJAUdDqRglBKCKAGEYHCgA3DPNIARd68Q5G5sGgPB51e7UQtkkdIJKHjkKAE1xOX/Pi9+/2hcGqvHv80P5sWTGKhvY1EeFFRK+YfKQg9+L2lQDERliOHbyjvDEv2bFc5WkXC9YSBRwjRi8U1sB4mS3SNJXiwW0mzGCHr0yVybaqrGh/FIahaD96K1jPVobbEegtRD5T2lWK5X5FEDw3Kd2fYHP2Z2d5aDVeY7e7M7FstbwFBZ7x1Dq5gpZGThRXt42DLt584jH4yDCP2w6SEp27fDh2SWG2Rj7Hw7SNkI8YTZRYqtnzGa/oxmWWfo90tswmD2hTZpM8dPab3El7vAxmbM1vcQV4ptlmjOqU+vggyKTXqh1JxnXzyyIPp5i8wkvOje/In/x/fdEGspONyXtx561fSSeY9x9ojeyFs7AbbA7iLDCy8e2K49Cz2/+fzo3/Wbk/NGaB/tkgmPtfbaseIs11mi0Ss/Jhse9KrKpbqsLLRl1MH0ygrwPiSKjdDlz4PZhq6eU58cLDh8QQy4+lKISJdyMaR0pStn8UJVW1OWCzckhQXnwQ/sq8HsIOEMjrcZgIhT1A5F3E9//vxTvfq0vniX7qfaV3NxZY9FoxcKqenmaEAlSkUqIfGK7pU10EJSmvupmsBHHBx8JO4+p1pedlHNMjldK/ayl9zf2MsOIo9+UsR9EJuGrqUEpzDRZHINC098wc/5WZ1VdBSTUiiBqktqJYF6LE4z6yhmIU7T95tKF5EjBdDxWNU9X+8/jCBACFjFR3/xr1M7wC+3dWbYEivR6gH7KPSdHzYZlQ5zC7lzw0ZJZh4ZR6yiMNRrYl7hKBQ7gYLvSwej4NugrVKTR/UjQ2qUhK8AG6r6VqTu0pLZV7a7bTSRnkz0c+eEuRNR3M5feevpLsixmlI8i5hHM8QtMAvhoeyJJqUHm6yyB0a9JFph5mcgmQzxPCELNgl4Yu14Y60R6C8jprW211Pb30dDaUnSYdREp+OHhAN2ETeB9WaB3ZDh6mV70ZoRq8Q65W2RQsEbcBPbUeXYnA4qw0GTuzVIpXw34nSf7LDFDyxGLsIC4bC/P5FZcaYBFjB4n2ZWaC89Pxq5zJc65Xw3vRKD50fFOzgxANqlYHRoN8MwhYIXkCIAQTpyPghSZWDnage5IKWUkSIlJH9SrmhBB71U/HcEBL206M8o9punxuM/nNBJp/BJ6dsP04+jkreZ3xonJxaJWM3y4WZA9wsWYSJKaho0Y2Ei1EoFStnWkplSAsSJIOod2tYSEDMFd17rSDcQKcliVNQNyidqnN7JHZlZkXX/GcTvW2tquyUGEma2zsxyz5MP1s58HqO/HTi/rGk0H0aW5IXQ5OrFSL0C0aeQ+JLM7mTK0T7OdET+ISIbXZEy8CEctyFHoviRt1gEdjtKJBu2z1Ei5ZReAWkRB7kO+BWa6Hq95bbQfiu5Q2kOoq7aS1p9Sm5kpIZQIjEasHOzIjsXBe5hlYqJehXZMDcmy9p6z9dPA+ayBFW5cFlJorms3IzLkrhpdlKzBaYLQ1NgoJkjMk9NU+dH2vw1tWaGOevizJGTSmX7e5FOW8o41rt0pQwmddTsMnUUxDmjb7usI/kqA55UmFFxz+1pRIRyZY+nWllZfcwPT50kVSlUKUinVAX6oJSBF4OUk4vMkgv8pgMjlybOZPQ9LSaivGLDAqL6jYrKUqudsIuXJi/dNCYVg4atBQ16SubqNPgnd1SRpWqUC79ililrMepUTiZd28WpLlvRjOwD0+X6Jfcr2TrudrJrlOH6CAspiuELeQZtofVqktfn5CMkqJpFMCn7/fZchsow0uGHz0t0OrwsteY0ggHFKl6DcRoVYxYPslPEJM9wX5rIhep0aM72iU5mie7cT7pSYHDiyDtQRFo5Uy2Xmo4o3KFEp6KzipEJ6EW0YOSn/0KGB6jp6rU13f9FaYPHKbQc9ppWQ/vPXJGhQBLNaTbzc9w7CXMV1woCZ5bnCTnOHUlUUaKWPqfGuddFVU7j1ipKmRTIoLRNMtbU100bLnUj0jJVn6fRyZAth0L6SZHMRZi2lQiDyjIUhfoWiUbx53YsEkPJeeK8B6O/oHBuFQWjEetLHIpJUoj2XAJqpipm9ZgxH+WIWDZkVk3OzsBFPwJdbzIUn+nRKdJJjS6U9gT3ZhC6YVYIS6l2IIJSjVsdy2R0msdwLhKCY5IDNqgKqYIL01BlCriccp3GdOF+i1yiF55wMumwByqmK/a6zY9V+4ETZEWUOLTzYrdiXdiWdwfqiJXrOuU92SMFZ3WRXUiVuLJysMUg0CXqLgkAk0qKIXD1QvLg4iYzRNiP3JiH6C0w9UKKSIFSnEzeGAB26QujbGRRJN1DUsa+ARj7PAoLwcakUnOrOd2YNOkNO7Rsl6JywLSSDG4RqWLtPnpf9NjpmtooM2V0SFVh3ZELP8plqZN0zQHrmYa8nbolwV2sYhZW9UoOujq2eqeTqlpkN35JkWKVOh0kq1wpQ3mRNNpP1rJf0jAbc9hT8kuqpkrBTasHN41qYWPQHgNeDeyZBy72SmpSs/uNLjwSZnOx3lbovaMMuWpIpXccpDB78T6eIFwqpkQcS+x561RlQtT9LRFvz+VcnNxRg0UuTdMqIRcv7yJ5TyDfYO68ZABN+vTiRq3jxIWAu/i69iIcMV184axdEfdm+n0ThBZ+tJKuC+iD6Bmyo208loQf64O9Dgb0TFG7qxvXWgYFWR59P2TUawv3BD76meo6OgadWa1pFW1HkZYhdYxH8/7DL2F8G96p1/Jy+nIj/vHRLThOKAuXx/ggH9YcTwz1vA5xavUc+ROFqZDNfBUFoBqlLT8YHEbvpXdlJdlZeJRFeYiXt4xttM3EzZIiHdKKCtr+YfjVCW5wiZaKmpZNsWhYstx+VTLQxS+GWS+2TKtqamVSAx3FitGNPqtQCbVIwW1Lny3ckCxCbOJucsIFmsFiZRu+I25BJtzbr+j/r9FREHXFWStt3yTKUNi7rdOqhgypGnTSJD+G2W/jR15EVn5aAPcgS463r4x2+KUwwMEkvQ94lp4dWJ87Sh0Z8ZJRr9PKsR4iZh3OdXAwVhg5IlaJOeYSd06K2icBvSGGoDcV4jqffARBkzKA4ZSaStfgtVG5U0g4UBVKSmomUrW4HffnbSJay1tyf97GDbuEqTX7AYrpA9rdQvjVZboEEzg2qgaOuRj/MNyqlDmWhY6hEPBoWAll1QPHVXttdVTQQnt7aUFRN3CsdhwrKmgttB1BTkbX2dhjsqOYfqPUPDXfzzjKnBWW02PIc8tHXCd3miesu4ySU6zv7NBK+6TZRsLZPv25Lln44DP2MQoe7M7a/Ch6lKPnczaW7/Cc8cHHB83FZ949o23EP7956+jVuS3yZYVlxY0VrrA5xm/ej7u5hXWU+ADAMFrlwo1kDkIDxBKtFf/X+OI70SHrEbLFa16ukJIT6U86z/XuERzmbvxy2GX7zUEKzfEbiAZZasobZKZkiHdUdPjf0adTREGKduS4CHTABh2+XA6ngIs2+k3655XmWN4wT+rGQBvTfVFFxivScnmAxmrUEYBtZG3Mg2EYSoWoyMfBTLcelpqpVe1bQhoUT/tXkGZX5Xd0VVxVyqwwU8cNbzXW+joRGi/0fBzbXpxufMupTFfJTEouuXIAsOpmUKK4PZNaBRoGgvvBXWRX1ZTAp2HF6mCqW4uwqbnbERGa1oywiA+iBUIqxLAUrMg56Rvsjuq3E5BO6o4Hk/ah9hKO4R5ea73NvUqX79dtNsJm/nRcjqHycN/W1BQ7Pqm9sgO3auy1GwcufaB77TNyZCrW23WyP1k+hWpngfViY5+Rg49kOwTzzhgc7CC4Qp8hJIpAdAVix3QlDj+fjFSyY4cjZHrZMTq2MIAdY8tBz+69cBV7jaO962On6E4RptTzPhlQtPUfIPlL8zN0QArAO9RR91ONdgV3rQGYLMmIsQsBxIhhuA8I/nJxHyiSkG323NBFSHKrsnDNfr3FU3NY0o7PFsdE2Ke5ozKY3re5Y/zzKssKeVmp6qtWzV3oJj3eYI0TaxO8Aomy7WOvJlMtjQXgnLtOZbjJZslNJpNhMG1u3l2NpNXvt50oxfz3k2cTjAxtl7lQYUO4rda8pONueWveqipQRy0wTMp+ret0kahMJr1iyy5uBQMCawnXxzSxN0w7NQTSKATSlJq9OFRTmmS1O1Xdj/BHovOPLxeX362/vofPD4uZcCWGpkFiIqdwusSwziSt3KGPH7kXHDCVytyLu7HlJPXRensGcP0UB9E+cMCn0VoTK7jgrHlrodLKkEbNjiXO4r2bYClMVnrZCVD8qKroNdMlIovFeGst41x/nMwau0ffvV24m7Kmb7CythFaLBYP6FuXsaqKy7t7oSc6GGho0IlphsjSEw/zGNzi/DPP07zpwY/x4pvtztDCozifNYJDNV7Gbmd6rxMord+WCA6rycL1Xmcryw8nyGpZOxsrH2JcmJxOCXrocHMiYDphcsStNDQm12b2CIidCbkMppRSp3LBZLpfd8sMMb88Ik19ceMU4cH3ED2t65GoxI1Eezn6lT5vbH/kYJqmhZYUF7jLMtzuYaAJnikbUtTTCs3E0KRCpQZfPNi+g3YNu5waMgACxtLzZrn3/Ii+emwl7ZgpoErMz3YbeLOuhqkdhH9tnVm48+1J+MaWNBKCnnuz3ToCS5lGNI1x8XbaqorElE2AlAuaHGo+MKtSrrH+49uV/SGUv2uXn3zTffh1vxhDll0VR06AkDaslVTThoenNl2Ce2KwZNmsVL4b79B4753eW7R1SyWBqdrzORTBIFtAn9ROB0geYzXd2RfOHeqds3XVp6OojyWN1tQP4OtCVwehkN8pKDpHkdr7pwK4sIXsJwQbURogbICTLeCudTHIki4BpDlixXZ0bUFlUN3rNFXMAFcn3cvSfgttIgHQpQ/M4QddKK01H7pJu4iSdpz/ARcH3fT+gZt/YC0E3ETslbeA/Q++2MEoQ27HriHM6i9FEFZiCJc0haXAe0oNQmkoaQoAo5ZyT0AvpNzcY9GlF5JLzSq8ER3VrKp0Lz6TmoJfMfmrN/1o6R+u//7+56dn80JcPp4/FvX4PdkQJp3v338EU6riT+jlPKrc7U67A+CoLEtJHXXOaxZMZiBBDr5zNgvvWGnCAVsZ75duQhHCjhF2KPjJnfOX4jWJK5X3wR0UXgPti1MnOmJ1eTJhm3/32uWu2xb3MJ5XqZf5tzl6AQI4BUcvnf5pmDXdvBKVT1j1SK4aOhmMlJAdnI+UCXOdW8EqYr6URYvHH6wQIcYmGol8Xhds5LfOeX2tljxU5s6FbQWHgpz00ZB0FkFl5KQMBoXWATg1CB7TVED6QuYHR6gvyNkvNI6DwnaaxNBKXteOvo3YXKQvRdFDSVvDPh1vWcjscahiFIu1XgW1eKJSrOZaN1doyacw5NLz/fgoWTYis7HWOWfLev7aCvvuLULv+L5lRYqNmQAbo2UhP3tK+YcRW9NG2xRtyWI1h07pRIxniBOjz1unVbZN+noNDGtSOrteT2mvrLLXV4G6ck0qlD4t05pGXUyW1WqYzA3ZWO/b/WcQ/4ZxoAAhDi4HCiBZn40xkAz7QTTKhN+fDfI6G3SBviQJsXzu3EunKNldlElrgb4iNQobSjuf524QCWuiPbBc13bjLGGEoymnQeazlDeh/Mi9N3uesNTWfPrMYVByRRepyiGWuXp6+Kp/0n4Gj7u5f7OY7uyrr20U6nWqCKXlDPiCQKis6JjI7v2gRU9dfmil/eJEB3RlDqn8Z4WXJZ0pkQRSePhwLXTpe/j4hYMkwAkUd94cS9Tr/wM=</diagram><diagram id="Pa3GTjm2JhgWjG1fDgN7" name="data-flow">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</diagram><diagram id="e8ASWA4kNTYfSbyO9nUa" name="interface-flow">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</diagram></mxfile>
\ No newline at end of file
diff --git a/src/awards.rb b/src/awards.rb
index a76cbbf..b901998 100644
--- a/src/awards.rb
+++ b/src/awards.rb
@@ -4,49 +4,56 @@ awards = [
     name: "Sound of Metal", 
     director: "Darius Marder", 
     synopsis: "During a series of adrenaline-fueled one-night gigs, itinerant punk-metal drummer Ruben (Riz Ahmed) begins to experience intermittent hearing loss.",
-    favourite: nil}, 
+    favourite: nil,
+    towatch: nil}, 
     
     {year: 2021, 
     category: "Best Picture", 
     name: "Mank", 
     director: "David Fincher", 
     synopsis: "Mank is a 2020 American biographical drama film about screenwriter Herman J. Mankiewicz and his development of the screenplay for Citizen Kane (1941).",
-    favourite: nil}, 
+    favourite: nil,
+    towatch: nil}, 
     
     {year: 2021, 
     category: "Best Picture", 
     name: "Minari", 
     director: "Lee Isaac Chung", 
     synopsis: "A tender and sweeping story about what roots us, Minari follows a Korean-American family that moves to a tiny Arkansas farm in search of their own American dream.",
-    favourite: nil},
+    favourite: nil,
+    towatch: nil},
 
     {year: 2021, 
     category: "Best Picture", 
     name: "Promising Young Woman", 
     director: "Emerald Fennell", 
     synopsis: "The film stars Carey Mulligan as a vigilante seeking to avenge the death of her best friend who was a rape victim.",
-    favourite: nil},
+    favourite: nil,
+    towatch: nil},
 
     {year: 2021, 
     category: "Best Picture", 
     name: "The Father", 
     director: "Florian Zeller", 
     synopsis: "Based on the acclaimed, award-winning play, The Father starts out as a deceptively simple drama hinged on a deceptively familiar dynamic.",
-    favourite: nil},
+    favourite: nil,
+    towatch: nil},
 
     {year: 2021, 
     category: "Best Picture", 
     name: "Judas and the Black Messiah", 
     director: "Shaka King", 
     synopsis: "FBI informant William O'Neal infiltrates the Illinois Black Panther Party and is tasked with keeping tabs on their charismatic leader, Chairman Fred Hampton.",
-    favourite: nil},
+    favourite: nil,
+    towatch: nil},
 
     {year: 2021, 
     category: "Best Picture", 
     name: "The Trial of the Chicago 7", 
     director: "Aaron Sorkin", 
     synopsis: "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago.",
-    favourite: nil},
+    favourite: nil,
+    towatch: nil},
 
     {year: 2021, 
     category: "Best Picture",
@@ -54,5 +61,6 @@ awards = [
     name: "Nomadland", 
     director: "Chloe Zhao", 
     synopsis: "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago.",
-    favourite: nil}
+    favourite: nil,
+    towatch: nil}
 ]
\ No newline at end of file

commit 5fa97ca3af053058deba0f8581cc313b582b36cc
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Tue May 18 21:43:08 2021 +1000

    finished app statement of purpose in readme file

diff --git a/README.md b/README.md
index ee8651a..bf9fc32 100644
--- a/README.md
+++ b/README.md
@@ -23,16 +23,20 @@ Insert example images of app
 
 ## Statement of Purpose
 
-The Oscars Judge App presents the user information on the nominees and winners of every annual Academy Awards category.
+The Oscars Judge Terminal App is a multi-user Oscar's experience, presenting the user with information on the nominees and winners of every annual Academy Awards category.
 
-Users can create a profile to store favourite movie lists, store To Watch Lists and set ratings on the movies they loved and hated(feature not yet available). If users can't decide on a movie to watch next, the Randomise feature will choose for you!
+Users can create a profile to store 'Favourite List' and 'To Watch Lists', and set ratings on the movies they loved and hated(feature not yet available). If users can't decide on a movie to watch next, the Randomise feature will choose for you!
 
-It can often be difficult to decide on a movie to watch. The Oscars Judge App gives you the power to choose from the best of the best.
+On start be welcomed by the Oscars Judge App welcome message, greeting the user and describing how to operate the app in short. The welcome screen waits for 3 seconds until the user is presented with 'Who is watching?' and the ability to select a pre-made profile or create a new profile with New User. If 'New User' is selected, the prompt 'Type name of new user' requests the user's name. The user's name will be used as a personifier throughout the session of the app in menu titles. On end of the app the profile will save and the name will be a unique identifier when they return to play again.
+When 'Who's Watching?' has been executed the main menu will appear requesting selection. Selecting '2021 Best Picture' will list movie Titles from that selected category. On selection you will be provided with information about the movie, including synopsis and director. The user can select to store that movie into their 'To Watch List' or in their 'Favourites List' for future analysis.
+The main menu is where the 'To Watch List' and 'Favourite List' are accessed. If the 'To Watch List' is populated there is the option to exit the app via direct link to the movie.
+
+The avid movie goer will love the ease of movie information and ability to store their rating and movie review features(currently unavailable) in their 'Favourites List'.
+
+The Oscars Judge App is great for the indecisive user who finds it difficult to find quality movies. The 'Random Movie Selector' will narrow down the search for the user, provide a movie choice and exiting the app to watch.
 
 Users can return after watching movies to update their profiles and discover what to watch next.
 
-The avid movie goer will love the ease of movie information and ability to store their rating and movie review.
-Indecisive? The Oscars Judge App will narrow down the search for you, or even at random make the movie choice for you.
 <br />
 <br />
 
diff --git a/docs/Flowchart_T1A3.drawio b/docs/Flowchart_T1A3.drawio
index 8b3b849..1b3892f 100644
--- a/docs/Flowchart_T1A3.drawio
+++ b/docs/Flowchart_T1A3.drawio
@@ -1 +1 @@
-<mxfile host="app.diagrams.net" modified="2021-05-18T09:50:59.834Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36" etag="xnqs6Ha-Phbd0I1GNIFG" version="14.6.13" type="device" pages="3"><diagram id="EEbKFx0Qe1oUpt7cK2yP" name="app-flow">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</diagram><diagram id="Pa3GTjm2JhgWjG1fDgN7" name="data-flow">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</diagram><diagram id="e8ASWA4kNTYfSbyO9nUa" name="interface-flow">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</diagram></mxfile>
\ No newline at end of file
+<mxfile host="app.diagrams.net" modified="2021-05-18T11:33:52.486Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36" etag="3ASLZQZsHIuYevDUCSWR" version="14.6.13" type="device" pages="3"><diagram id="EEbKFx0Qe1oUpt7cK2yP" name="app-flow">7R1Zd5u4+tf49Mk+7Mtj1s60TZqbtNNJX+ZgG9tMsXEBZ+mvvxIgG6QPkI1YMjPtaRNkLIG+fdVIvVi/vA+d7eommLv+SJHmLyP1cqQoiqTo6AceeU1HDMlIB5ahN0+H5MPAg/fLzQalbHTnzd2ocGMcBH7sbYuDs2CzcWdxYcwJw+C5eNsi8Iurbp2lyww8zByfHf3mzeNVOmrp0mH8N9dbrsjKspR9snbIzdlAtHLmwXNuSL0aqRdhEMTpb+uXC9fHm0f2Jf3edcmn+wcL3U3M84XVw91X86PxM7rfzcPrxXTnXn4dZ8CI4lfywu4cvX92GYTxKlgGG8e/Ooyeh8FuM3fxrBK6OtzzKQi2aFBGg3+7cfyaAdPZxQEaWsVrn3y6W2/JEktnS0bS22V8R/pU+FFKX1bebyHCPTdYu3H4im4JXd+Jvafi95wMCZb7+/ZfvQs8NKMiZQg7lhV7kqFshrG2LU2k3B+lOGcU7MKZm02T335qZp3gAZnWlIoTxU64dGNmorMwdF5zt23xDVH5GzDr2NJJz5Xdj35Jn4Bc5Xb7MJSgGox2yt1i/XoVrNUHOfhjabmPnx/m4wwuT46/yyA1Ugw/xmiCPjKW+LfP0cwJ0YtKH3YYD7LP0XKHW8jglgycu/hFEETQj+B5g/4vzjJBv5xhFuKGaw+hLN7X7RYPrBy8J47vY46RzJFwGsxZQteJ8by+F+GNl4LFYZGF84R+8ZLP90utgyfPjdBahrPG2L2ZRtvc06JX2B7egCK/2H2Ji9QSxWHww70I/CBEI5tgg2lw4fk+NRRtnZm3WaIB/XD1JSHJsYIp9XmFnvMBjeOlnsOE8IInN1z4CVtaefO5u2Hou4TyEPDcED1sJTESolKkIo4RlHs+cFSFcNRVkZuWE3AOQysRUP1592sx/WR8USRZM3fmJ+fr3diQGzO+Si5mncYZ0R6Hr39mCyQXj/hiopPLy5f8h5ev+as7N/TQ7rhhAXL1TBTtQsLDKug143kpi0rve/15vbxa/7p1tO3Twzo8n7tbZ2w2ZMq8MK16yBxTCXfTZHn0468goc5JOGUB7/tIm3BLKCQHHQGkYNUSgqwAhGAJoANwzwyAEXevEJRubB7hwOfXQSQXrhaoMqUTUPAoUQJOEJf/+7z4/YN1Ya3u/7bf2+cPcqS/jGV1UFCpZRc6Cz34vRTR4GtEDDpDDN9WwTss0b858WyVCNdrBhI1TCMV38R2UCjZPVLUxWKhzGaMoEefzI2poRtiGI+iFzF4L1rrWI/RFushSD1U3lOL5SYnjxoYlpvMtt+FKbO7cTysMt+4m92xWN4Chqpm7xjKY6aQkUWQ7OFhy4yfu4B8MI4S9MOmh6JtXw4fklmukY2xC90oZyOkExYXqbZ+xmj6dzTLeod+v8AmDGZfaJM2c/yUzlN6uYtcbMZswwBxpdRmSeachvQqyKDY5BfKzfnuS0AWRD8/ITMJL7o3f9L/8X3XxFqKDveVrYdeNb9k2WO8u0dvFKy9CFtgN4nhhRePXN+dxUHYfH707+rFK3kjtI9uzYTHWnvtWHGO7y3R6GWYko0IetXVWl1Wldoy6mB6ZQV4HxLFRejy58FsQ1ePuU8OFhy+IAbc6VKISJd6MaR1pSsX8ULXW1OWKzckhwVn0Q/sq8HsIOMMXrAZgIjT9A5F3M9w/vhTv/y4Pn9VbqfGV3tx6Y5lqxcKOdHN0YBKNE4qUdW+lDXQQtKa+6mawEceHHwUsxUudqyXXdaLTM40qr3sNfc39rKDyGO+KeI+iE3LNHKCU5oYKrmGhSe+gJ2f7bIKuRuBqlEC1SQx1RqBeixOM+todiVO0/fbWheRIw3Q8VjVvVzvP4wgQEhYxUd/8a9TN8Ivt/Vm2BKr0eoB+ygOvR8uGVUOc0ulc8NGSWEeFUeskjDUc2Ze4SgUO4GG78sHo+DboK3Ss0cNE0NqlIWvABuKfytydxnZ7CvX3zaayMwm+rnz4tKJKG4XroL1dBeVWE05nkXMoxniFpiFiFD2ZJvSg21W2QOjXgqtMIszkGyGeB6QBZsFPLF2vHHWCPQXCdNau+upG+6jobQk6TBqYtLxQ8IBu4ibwHqzxG7IcPWyvWgtiFVinYq2SKHgDbiJ7ahybE4HleFgqN0apEq5G3G6T3bY4geWExdhhXDY35/JrDTTAAsYvE8zJ3aXQZiMXJRLnXq+m1+JwfOj4h2CGADtUrA6tJthmELBC0gRgCCdOB8khRvYpdpBKUgpZaRKCSmfVCha0EEvHf8dAUEvI/kzSv3mufH0jyB0Mil80vr2w/TjqBRt5rfGyYlFIvNZPsIM6H7BIk1kRc+DZixNpJNSgXK2tWLnlAB5Islmh7a1AsRMwZ03OtINZEqyWJy6Qf1EjdM7hSMzK7JuP4P4/cmZun6NgYSZrTdz/LPsg7U3n6fo70beL2eazIeRJXshNLl+PtIvQfSpJL4sszubcrSPMx2Rf4jIxtSUAnwIx23IkSh+FCwWkduOEsmG7UuUSDWnV0BaxEGuA36FJrpeb7kttN9K7VCag6ir95JWn5MbBakh1UiMBuzc5mTnsiQ8rMKZqMfJhoUxWdbWe7x6GDCXJagqhMsqCs1l1WZclsRNi5PaLTBdGJoSA80SkfnWNHVxpC1eU2tmmLMuzhI5qXHb34t82lLBsd6lK2UwqaN2l6mjIM5ZfdtlHclXFfCkwoxKeG5PIyJUuT2eOreyel8ennqTVKVRpSCdUhXog9IGXgxSTy4qSy7wmw6MXJo4k9H3jJSIyooNK4jqNyoqS632hl28NHmZtjXhDBq2FjToKZmr0+Cf2lFFlm5QLnzOLFPWYjSpnEy6tktQXbZmWMUHpsv1a+7XinXc7WTXaMP1EVZSFMMXygzaSuvVJq8vyEdIULWIYErx++25DLVhpMMPn5eYdHhZac1pBAOKVbwG4zSqxiwRZKfJWZ7hvjRRCNWZ0JztE53KEt1ZmHWlwODEkXegiJQ7U62Umo4o3KFEp2ayipEN6EW0YBSn/0KGB6jpmidruv9L0gaPU2gF7DWthvafuaJCgSSa02zmZ7h3EuYqvhNF3qzME3KcO5KookQtfcyNC6+L4k7jNjilTA5kUNomGWvq66YNl1Mj0ipVn2fQyZAth0L6SZEsRZi2lQiLyjKUpdMtEoPiz+1YJJZW8sRlD0Z/QRPcKgpGI9aXOBSTpBLthQTUbF0u6jFjMcoRsWzIrIZanEGIfgS63lQoPtOjU6STGl0o7QnuzSB1w6wQllLtQCSNj1sdy2RMmscILhKCY5IDNqgqqUII09BVCriCcp3GdOF+i1yiF57wZtJhD1RMV+x1mx+r9wMnyIqocWiXxW7lU2Fb3x2oI1ZumpT3ZI8UgtVFdiFdEcrKwY6CQJeomywATCophsDVK8lDiJvMkmE/cmMeYrbA1CspIgdKeTJ5YQDYpS+MspFlmXQPyRn7FmDsiygsBBuTKs2t5nxj0qw3bOfZLsd2Ha2qD8xrzeCepWWtHUTvq54yX1ObZKaMDqkqrDtyESa5LKckXQvAeqYhb6duSXAXecxCXq/koKtj+Tud8GqR3fglZYpVmnSQjLtShvIiGbSfrGW/pGU35rBvyS+p2zoFN+M0uBlUCxuL9hiIamDPPHC1V9JQmt1vdeGRsJuL9bZC7x1lyPEhldlxkMLuxfv4BuHCmRJxLLGXrcPLhKj7WyLensu5BLmjBotchmFwIZco7yJ5TyDfYO49FQBN+vTiRq3jzIWAu/j67iIeMV184axdGfdm+n0TxQ5+tJquC+iD5BmKo208loIf6727jgb0TEm7q2vfWUYVWR59P2TSawv3BD76mU51dAw6s9owOG1HmZYhpxiP9u37X9L4U3yjX6nL6dO1/McHv+I4oSJc7tODfFhzPDPUyzrE6fw58m8UplIx81WWgGqUtvxgcBi9l96VXLKz8iiL+hCvaBnbaJuJmyVHOqQVFbT9w/CrE9wQEi2VDaOYYtGwZLn9qmSgi18Ks15smVbVVG5SA/3CmtWNPqtRCbVIwW1Ln63ckCJCbNJuctI5msFhZRu+I21BJt26z+j/r8lREKeKs1bavimUobB3W+dVDRVSNeikSXEMs9/Gj6KIrP60ALsb2qGT0RnaEZfCAMeOzD7gWXt2ILj5p7FLRWsFcIp1WqeVYz1EzDqC6+BgrLBKRKyWcswl7pyUtE8CekP0pTdxpxkU8aiCLCrzESRDKQBGUGoqXYPXRuVOBZ3AVSg5qZlJ1ep23J+3mWitb8n9eZs27JKmzuwHKKYPaPcJwq8u0yWYwLHFGzgWYvzDcOMpc6wLHUMh4NGwEsr4A8e8vbY6Kmihvb20oDg1cKx3HCuqaC20HUFORt/buGOyo5h+k9Q8vdzPOCqcFVbSYyjw60d8r3SaB6y7jLJTrG/c2Mn7pNlGwsU+/aUuWfjgM/YxKh7sxtn8qHqUo+fzNk7oiZzxLsQHzaVn3j2ibcQ/vwXr5NWFLfJlhWXFtROvsDkmbt4Pu7mDdZT0AMA4WeXcT2QOQgPEEp2V+Nf4EnrJIesJsqVrXqyQkpPoT6bI9W4RHOZ++nLYZfvNQ5rP8RuIBllqKhtkpmSId1R1+N/Rp1MkQYp25LgMdMAGHb5CDqeAizb6TfoX1dSrvmGewimeG9d4UW0NZMYr0nJ5gMFq1AmAXWSWzKP+DKVaBzNBRTEOZrr1sNJMrWrfEjKgeNq/gjS7Kr+jq+J4KZNjpo4b3hqs9fVGaLzGRXJce3G68a2gMl2tMCm5FMoBwKqbQYni9kxqHWgYCO6HcJHNqymBT8OK1cFUt1ZhU/MyKERoRjPCIj6IFgipEsNysCLnpG+wO6rfTkAmqTseTNqH3ks4Rnh4rfU29zpdvn9qsxE286fjcgxdhPv2RE2x45PauR24vLHXbhy49IHuJ5+Ro1Kx3q6T/cnyOVR7FzlPLvYZefhItkMw7x2Dgx0EV+gzhGQZiK5A7JiuxBHnk1FqduxwhEwvO0bHFgawY2w56LvbIF6lXuNk7/rYKbpThK30vE8WFG39B0j+2nQME5AC8A511P3UoF3BXWsANksycupCADFiGO4Dgr9C3AeaIhWbPTd0EZLcqiJci19v8dQclrTTs8UxEfZp7ugMpvdt7lj/vMqySl5Wq/rqvLkL3aTHW6xx4myiZyBRtn3sNVSqpbEEnHPXqQy32Sy5yWQyDKYtzLtrkLT6/bYTpVj8fopsglGg7ToXKmwIt9Wal3TcrW/Ny6sCddQCw6bs11OdLgqVyWRytuwSVjAgsZbw6Zgm94Zpbw2BDAqBDO3EXhy6rUyK2p2u70fEI9HZh6fzi+/OX9/jx7vFTLqUY9siMZFBnC4hJFE+O6RUvLOWOpOUu0OfOHKvOGAql7mXdmMrSeqj9fYC4PopDqJ94IBPo7UmVnDBWfPWQrWVIY2aHSvHMt1jCas8eiqcrMy6E6DEUVVVTDhfIrJYjLfOMs31x8msqXv0NdjFuylr+kYrZ5ugxWJxh751kaqquLy7F3qig4GWAZ2YZsksPYkwj8EtLj/zPM+b7sIUL765/gwtPErzWRM48PEydjvze51Baf2yRHBYTRZ+8DxbOWE8QVbL2ts45RATwuRMStBDh5sTAdMJkyNupaExuUbZI0L4XEY/nLWV4hkilQum0v26W2aI5eUReepLG6dId2GA6Gl9Gokqwki0l6Nf6fPG9kcO5mlaaklxgbssw+0eBprgmbMhZTOv0EwsQ6lUavDFnRt6aNewy4nfjwHvmsQSfFWLWMGRnGMracdMAVVmfrbbwJt1NUzdKP5r683iXehO4he2pJEQ9DyY7dYJWOo0ommKi5+mrapITNkESLmgyaGXA5OXcq31H98u3fex+t24+Bja/t2v28UYsux4HDkRQtr4pKSaNjw85XR5rGAGN8li6fSoUvluvEPjvXd6b9GeWioJTNWez6Fqy4sF9FntdITkMVbTvX3h3KHeuVhX3amiDuSnMshWwRoMWlM/gK8LXR2EQnmnoOQcRWrvHyrgwhayvyHYyMoAYQOcbAF3rUtBlnUJIM0ROdvRtQUV0d3rGsHX0OUCcE3SvSzvtzAmCgBd+sAccdCF0lrLoZu1i6hpx/kfcHHQzewfuOUH1kLAzcRefQvY/+CLHYwq5HbsGsKs/lIFYS2FcE1TWAq8HTcIFQolQwNg1FLuCeiFVJt7LLr0QvLVrPIYO7VdD9WSGqqmyYR0Lz6bmkJcMflzMP3gmO+v/v7+58dH+1xe3p/dV/X47TOE2Yiq6Hz//iOYCo8/oZfzqPgpJO8OgMO0LCW10zmvWTCZgQQ5+M7bLIJjpYkAbGW8X6YNRQg7Rtih4Gf7nL8Wr0nPzvrGuH3iNdC+OHeiI1aXJxO2+feReeJiEb3bFvcwnvPUy/zrHb0AAQzQ0Uunf1r2iW5ehcon5D2S6wSdDEZKyA4uR8qMuc6daJUwX8qixeN3TowQY5OMJD6vczbye8p5fc1KHlrjzhV9BntDTvpoSDqLgBs5KYNBo3UAQQ2CxzQVkL6Q5cER6gtq8QuN46CwWaYwtFLWtaNvI5YX6csFqDRp2KfjpQiZPQ5xRrFY61XSqyeqxWqhdXMVhnsBQy6CMEyPkmUjMhtnXXK2bBCunVhAb5FGShS94/uWFTk2ZgNsjJaF4uwp7R9GbE0bbVO0pcp8Dp3aiRjPkCBGX7ZOq2yb9PUaGNbkdHbzNKWdW2UXqAK15JrUKH1apTWNUzFZ1fkwWRiysd63288g/r25AwVSOqrSGJCsL8YYSIb9IBplwi/FBnm9DbpAX1KkVD537qXTtOIuqqS1QF+RGo0NpZ3NSzeIhDXRCzu+7/ppljDC0ZzToPBZzptQf+TeizvPWGprPn3mMCiV00WqC4hlrh7uvpofjZ/R/W4eXi+mO/fyaxuFen0qQkU5A74xECorPzeyAz9o1UPWH1rpPnnJAV2FQyr/WeFlxWRKJIEUHjFcC12GAT5+4SAJcALFTTDHEvXq/w==</diagram><diagram id="Pa3GTjm2JhgWjG1fDgN7" name="data-flow">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</diagram><diagram id="e8ASWA4kNTYfSbyO9nUa" name="interface-flow">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</diagram></mxfile>
\ No newline at end of file
diff --git a/src/awards.rb b/src/awards.rb
index 7fe4915..a76cbbf 100644
--- a/src/awards.rb
+++ b/src/awards.rb
@@ -3,48 +3,56 @@ awards = [
     category: "Best Picture",
     name: "Sound of Metal", 
     director: "Darius Marder", 
-    synopsis: "During a series of adrenaline-fueled one-night gigs, itinerant punk-metal drummer Ruben (Riz Ahmed) begins to experience intermittent hearing loss."}, 
+    synopsis: "During a series of adrenaline-fueled one-night gigs, itinerant punk-metal drummer Ruben (Riz Ahmed) begins to experience intermittent hearing loss.",
+    favourite: nil}, 
     
     {year: 2021, 
     category: "Best Picture", 
     name: "Mank", 
     director: "David Fincher", 
-    synopsis: "Mank is a 2020 American biographical drama film about screenwriter Herman J. Mankiewicz and his development of the screenplay for Citizen Kane (1941)."}, 
+    synopsis: "Mank is a 2020 American biographical drama film about screenwriter Herman J. Mankiewicz and his development of the screenplay for Citizen Kane (1941).",
+    favourite: nil}, 
     
     {year: 2021, 
     category: "Best Picture", 
     name: "Minari", 
     director: "Lee Isaac Chung", 
-    synopsis: "A tender and sweeping story about what roots us, Minari follows a Korean-American family that moves to a tiny Arkansas farm in search of their own American dream."},
+    synopsis: "A tender and sweeping story about what roots us, Minari follows a Korean-American family that moves to a tiny Arkansas farm in search of their own American dream.",
+    favourite: nil},
 
     {year: 2021, 
     category: "Best Picture", 
     name: "Promising Young Woman", 
     director: "Emerald Fennell", 
-    synopsis: "The film stars Carey Mulligan as a vigilante seeking to avenge the death of her best friend who was a rape victim."},
+    synopsis: "The film stars Carey Mulligan as a vigilante seeking to avenge the death of her best friend who was a rape victim.",
+    favourite: nil},
 
     {year: 2021, 
     category: "Best Picture", 
     name: "The Father", 
     director: "Florian Zeller", 
-    synopsis: "Based on the acclaimed, award-winning play, The Father starts out as a deceptively simple drama hinged on a deceptively familiar dynamic."},
+    synopsis: "Based on the acclaimed, award-winning play, The Father starts out as a deceptively simple drama hinged on a deceptively familiar dynamic.",
+    favourite: nil},
 
     {year: 2021, 
     category: "Best Picture", 
     name: "Judas and the Black Messiah", 
     director: "Shaka King", 
-    synopsis: "FBI informant William O'Neal infiltrates the Illinois Black Panther Party and is tasked with keeping tabs on their charismatic leader, Chairman Fred Hampton."},
+    synopsis: "FBI informant William O'Neal infiltrates the Illinois Black Panther Party and is tasked with keeping tabs on their charismatic leader, Chairman Fred Hampton.",
+    favourite: nil},
 
     {year: 2021, 
     category: "Best Picture", 
     name: "The Trial of the Chicago 7", 
     director: "Aaron Sorkin", 
-    synopsis: "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago."},
+    synopsis: "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago.",
+    favourite: nil},
 
     {year: 2021, 
     category: "Best Picture",
     winner: "Winner", 
     name: "Nomadland", 
     director: "Chloe Zhao", 
-    synopsis: "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago."}
+    synopsis: "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago.",
+    favourite: nil}
 ]
\ No newline at end of file

commit 71d2f007793dc8bdc034876aecda8175ff68fb1e
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Tue May 18 20:11:22 2021 +1000

    created user_profile ruby file with default hash and am updating readme

diff --git a/README.md b/README.md
index 52d6a70..ee8651a 100644
--- a/README.md
+++ b/README.md
@@ -1,8 +1,38 @@
+# Oscars Judge
+
+Oscars Judge gives you the opportunity to be your own judge on the Academy Awards nominees and winners.
+Create:
+
+- personalise lists of your favourite Oscars movies,
+- personalise To Watch Lists,
+- Randomise best picture movies to watch,
+- Rate your movies and compare to award winners(feature not yet available).
+
+## Installation
+
+Insert Installation requirements
+
+## Example imagery
+
+Insert example images of app
+
+<br />
+<br />
+
 # Software Development Plan
 
 ## Statement of Purpose
 
-insert statement here
+The Oscars Judge App presents the user information on the nominees and winners of every annual Academy Awards category.
+
+Users can create a profile to store favourite movie lists, store To Watch Lists and set ratings on the movies they loved and hated(feature not yet available). If users can't decide on a movie to watch next, the Randomise feature will choose for you!
+
+It can often be difficult to decide on a movie to watch. The Oscars Judge App gives you the power to choose from the best of the best.
+
+Users can return after watching movies to update their profiles and discover what to watch next.
+
+The avid movie goer will love the ease of movie information and ability to store their rating and movie review.
+Indecisive? The Oscars Judge App will narrow down the search for you, or even at random make the movie choice for you.
 <br />
 <br />
 
diff --git a/docs/Flowchart_T1A3.drawio b/docs/Flowchart_T1A3.drawio
index f36b49b..8b3b849 100644
--- a/docs/Flowchart_T1A3.drawio
+++ b/docs/Flowchart_T1A3.drawio
@@ -1 +1 @@
-<mxfile host="app.diagrams.net" modified="2021-05-18T06:57:07.557Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36" etag="t9z6W89wJWi9ywfSsovQ" version="14.6.13" type="device" pages="3"><diagram id="EEbKFx0Qe1oUpt7cK2yP" name="app-flow">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</diagram><diagram id="Pa3GTjm2JhgWjG1fDgN7" name="data-flow">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</diagram><diagram id="e8ASWA4kNTYfSbyO9nUa" name="interface-flow">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</diagram></mxfile>
\ No newline at end of file
+<mxfile host="app.diagrams.net" modified="2021-05-18T09:50:59.834Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36" etag="xnqs6Ha-Phbd0I1GNIFG" version="14.6.13" type="device" pages="3"><diagram id="EEbKFx0Qe1oUpt7cK2yP" name="app-flow">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</diagram><diagram id="Pa3GTjm2JhgWjG1fDgN7" name="data-flow">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</diagram><diagram id="e8ASWA4kNTYfSbyO9nUa" name="interface-flow">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</diagram></mxfile>
\ No newline at end of file
diff --git a/src/user_profile.rb b/src/user_profile.rb
new file mode 100644
index 0000000..b4be14b
--- /dev/null
+++ b/src/user_profile.rb
@@ -0,0 +1,6 @@
+# default user
+user_profile = [
+    {name: "Bella", 
+    favourites: [],
+    toWatch: []}
+] 
\ No newline at end of file

commit 8b2be3120ed49865fba5e50c1da5d9419242fa26
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Tue May 18 17:00:46 2021 +1000

    creating info in readme.md file

diff --git a/README.md b/README.md
index e69de29..52d6a70 100644
--- a/README.md
+++ b/README.md
@@ -0,0 +1,39 @@
+# Software Development Plan
+
+## Statement of Purpose
+
+insert statement here
+<br />
+<br />
+
+## Main Features
+
+**Creating User**
+
+<br />
+<br />
+
+**Creating New Lists**
+
+<br />
+<br />
+
+**Randomise Movies**
+<br />
+<br />
+
+**Saving Session**
+<br />
+<br />
+
+## Other Features
+
+**Menu Selection**
+The ability to select an option in a menu.Implementation detail.
+<br />
+<br />
+
+**Help**
+Instructions on instal, gems, flags, exit.
+<br />
+<br />
diff --git a/docs/Flowchart_T1A3.drawio b/docs/Flowchart_T1A3.drawio
index d47c1ce..f36b49b 100644
--- a/docs/Flowchart_T1A3.drawio
+++ b/docs/Flowchart_T1A3.drawio
@@ -1 +1 @@
-<mxfile host="app.diagrams.net" modified="2021-05-18T04:57:59.607Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36" etag="SCHwXcnsVCxTbXojv5YX" version="14.6.13" type="device" pages="3"><diagram id="EEbKFx0Qe1oUpt7cK2yP" name="app-flow">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</diagram><diagram id="Pa3GTjm2JhgWjG1fDgN7" name="data-flow">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</diagram><diagram id="e8ASWA4kNTYfSbyO9nUa" name="interface-flow">7VxtV+I6EP41HO+957CnvMtHAVndq65XVHS/hTbQaJt005SX/fU3SVPaYnmnBRQ9B9ppOplMJzPPTFJypaY9/k6BY94SA1q5omaMc6VWrlgsVktV/iUoE59SKNQUZUCRoWghoYP+QEXUFNVDBnRjDRkhFkNOnKgTjKHOYjRAKRnFm/WJFe/VAQP4gdDRgfWR2kUGM33qeUUL6VcQDcyg54KmrtggaKwIrgkMMoqQSpe5UpMSwvwje9yEltBeoBfvse4y47529W/XzI/fqk65Ocz7zNrr3DIdAoWYbcx6dD25eH0vP/2bf2tRnL//Xbcq+ZrPeggsT+lLjZVNAgVCg+tTnWKC+VeDEg8bUPDV+BmhzCQDgoF1Q4jDiQVOfIOMTZQ1AI8RTjKZbamrfieC88xDWjJC1c4lHtXhgmGpJ8YAHUC2oF15+hj5BIDEhoxO+H0UWoChYVw4oAxxMG0XKpsfKH2voXttue5HJmKw4wA52BGfoXE1Atfxp0wfjcXjaLiMkvepnYeaHkLK4HgDXX/UjeJSVtIHbiGYJKNwjhWDmWRG5teUuHN1FhLUWbWY0Bi/VB2Io5+uDqjLW/3whO2p67y7sElAdAJCfrW/CDNnLq8utHQ+XOkDxYcpDoHjyGPApK4sRwg44SYu1AmYbuaKTWGUgMnW2OCfb778ioMclnBZZIig+433BmxhKrjnOhEx4qLNmBq3Dxa3Lt+YmsQiNJz6fWRZMySX2yfCA06ohGeP0hPki8JBJFkx4SbZt6Q7NZFhQPzBrQALDTi1pXMzhTRNU64sNeVCPcGUpw23MeXig1277d9r3Vu3TKznm7srqAeeIWUnzHVGJy/qfnnyKk6+VYLT1jh6sTVRZ2k77/KKzru+T+ddPmbnXSoenPc+P2jvHXms1d+eAHwN4S/zykdd8BYW7LPw6tThm8LPIzdw5dJPttPqber41ZnW4JoHmfV2B0f888nl3jqlLv8RfwGjHg3IjxNHhEEMZGglfXEsZfHmynKKflNfsGn4q6flC+rH7Fur2j59a7X7VH22K/3WTf3mtjrR377/fJkG3mQ4ESKHy5B6+CleUF+IwoS3wvWTPWy3HPSrO3y7MIbjgjbvca0ME+StF5SCSaSBQxBmboTzvSCEVlCbsYJSeSY5n2lfKC9szw98CUIjmA5lc7tYnOunZBch6gyB5msMZ+4HdSbZk6cPdf3Ha0/vPtceyO/e0393leOwp3JxD/ZUOtnTYntq//lpdZpl3Gg+ex1yfm2/dOrHYU/1ffin8smeNvBPpS3taSuoUfkqUKP7ALADRpf5m8urqtO6+8GKT8cxlQvFlGPDQh1+tgQ/4METP7wSG5XQJTAq5WoNmcLWWmdCCbcACZa3EHsR6f2O4p0f8KDiJYLZurTG//mj1XrQFRbqIJ15FC4Zrcj7t5PJHxyj6B3ucHh5fzza3PGEBYvoCJUYWWteLkCo5QXNQkLeTLSe+sD6YMgdOpKLJZ9pXBRgg9g5tcoj+oIW1Bmhn2WAYunrs4zlt4dWMbxs3Piynk610GntbsNa6E5qd4nVq+03CextT0Cpumrls7wD7RltpL0A+65WrvZ+tS4Met97XVLh2v1C6t5SxvmVz3jakqilbdOWrQx8v9s21nPGBhruDFX7tI6M4QLlq6DepzLG30SASzJsTIgoUZoC1gKTNnwweh+AUe2O2AhD6C7PKuSA5yg4VUUtjK4JahRTOKeW/m4hA9ZGY9ut2DyBw+/ZdogwoCjTLu+5vSJXBP2i9sqfgvjuEltqPDspHuU2qDZgZmy9N/2OuUMCwjH5u7L83VgNC+jv0g5dFwFzD4p4pEjMAH86+EI1TaSDgcj5apkKxH0NMCypnuReT+AzeRtaEnpKxp6poacjxp7V8orYs1RIS3tfHNjMjci7hjNxdKCwzQFDm5CLT2p51A+fQNZ0KBLAzNcbMPic4DwxzPc9jhSlQvkJlvZb1AZo4PqbgxHjjSiQdX7Hw+95W6k8phyDerYtIqT24PWgKIH89YD+8K8L04bG3zlRuBwgLPqX5UE4doQ8WBcRBAn/ZyPGIPY3KgMlt0XchXuO5wWZFYoUS2+NB5sOGE73Vj+Kj66qb97E64BbsG0H1UV3a7YNHyZItsm1/jQ1N0uas7VOjN0IpOxHBr+op9Wop8ifHPmTYldi5C/touqUuIZ8TJF/djNztmWn+VuEvmzo/7iSuchprlwa30/Azs8LbDstP5xc4ZzdyNlmQYmTuXhEvnB28/EB+MLSyRfGfGESLp2HnDOsXCZIvma6lpVgIgf8UOjMWqAIYyHPNlXQkMuaVczwxt1UIWcF2bqKGDJcWgU8hcUlfv3gwuL2L0BmFxYr9eUZVsZhsfKFwuIqIXD9Ssbni3Y8cvBrBsFnssDmV50AFobMJ5I9LcuJXW3fTj5zTSy8clllJ5M+8VWPYyqrnJ+vkkpUEtR3npb6vnZZJdgh8iD3gaL4m81fPlOIla/T6iBl/umyT5V7msw/JnwxS1trUSUzhBGXKgA7d0T8KsH0sv/JKZdjtMpCUjo7gbNIkuesLl3I/WgTiXtcL3Iy8pcy1SokV074oxkbLHep34c4m0D3TCS0YgX0DJOzuSDqBK2WYINN09FdYIPEV++OCVoVCtV9lmnnv7r4ZbHV1WqvnhzImtRseFm+QHWNXQakETx4vcl+cGM8In6X+WyGHbYtMMi2x833d+xOhs8FLBSK0PYAJDaWeUPskdVjOWGaMChnWGPnp+EPB8trkd9fLl3+Dw==</diagram></mxfile>
\ No newline at end of file
+<mxfile host="app.diagrams.net" modified="2021-05-18T06:57:07.557Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36" etag="t9z6W89wJWi9ywfSsovQ" version="14.6.13" type="device" pages="3"><diagram id="EEbKFx0Qe1oUpt7cK2yP" name="app-flow">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</diagram><diagram id="Pa3GTjm2JhgWjG1fDgN7" name="data-flow">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</diagram><diagram id="e8ASWA4kNTYfSbyO9nUa" name="interface-flow">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</diagram></mxfile>
\ No newline at end of file
diff --git a/src/awards.rb b/src/awards.rb
index 3596c17..7fe4915 100644
--- a/src/awards.rb
+++ b/src/awards.rb
@@ -1,5 +1,5 @@
 awards = [
-    { year: 2021, 
+    {year: 2021, 
     category: "Best Picture",
     name: "Sound of Metal", 
     director: "Darius Marder", 

commit 9e5bb9e6d42f3a88f5c135c1e05d893167f97fde
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Tue May 18 15:39:16 2021 +1000

    adding in hash structure of award data, adding in best picture txt file

diff --git a/docs/Flowchart_T1A3.drawio b/docs/Flowchart_T1A3.drawio
index 6c08b9c..d47c1ce 100644
--- a/docs/Flowchart_T1A3.drawio
+++ b/docs/Flowchart_T1A3.drawio
@@ -1 +1 @@
-<mxfile host="app.diagrams.net" modified="2021-05-18T02:14:42.320Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36" etag="nSSrH5VI8ryaVhteHxBk" version="14.6.13" type="device" pages="2"><diagram id="EEbKFx0Qe1oUpt7cK2yP" name="app-flow">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</diagram><diagram id="Pa3GTjm2JhgWjG1fDgN7" name="data-flow">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</diagram></mxfile>
\ No newline at end of file
+<mxfile host="app.diagrams.net" modified="2021-05-18T04:57:59.607Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36" etag="SCHwXcnsVCxTbXojv5YX" version="14.6.13" type="device" pages="3"><diagram id="EEbKFx0Qe1oUpt7cK2yP" name="app-flow">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</diagram><diagram id="Pa3GTjm2JhgWjG1fDgN7" name="data-flow">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</diagram><diagram id="e8ASWA4kNTYfSbyO9nUa" name="interface-flow">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</diagram></mxfile>
\ No newline at end of file
diff --git a/src/awards.rb b/src/awards.rb
new file mode 100644
index 0000000..3596c17
--- /dev/null
+++ b/src/awards.rb
@@ -0,0 +1,50 @@
+awards = [
+    { year: 2021, 
+    category: "Best Picture",
+    name: "Sound of Metal", 
+    director: "Darius Marder", 
+    synopsis: "During a series of adrenaline-fueled one-night gigs, itinerant punk-metal drummer Ruben (Riz Ahmed) begins to experience intermittent hearing loss."}, 
+    
+    {year: 2021, 
+    category: "Best Picture", 
+    name: "Mank", 
+    director: "David Fincher", 
+    synopsis: "Mank is a 2020 American biographical drama film about screenwriter Herman J. Mankiewicz and his development of the screenplay for Citizen Kane (1941)."}, 
+    
+    {year: 2021, 
+    category: "Best Picture", 
+    name: "Minari", 
+    director: "Lee Isaac Chung", 
+    synopsis: "A tender and sweeping story about what roots us, Minari follows a Korean-American family that moves to a tiny Arkansas farm in search of their own American dream."},
+
+    {year: 2021, 
+    category: "Best Picture", 
+    name: "Promising Young Woman", 
+    director: "Emerald Fennell", 
+    synopsis: "The film stars Carey Mulligan as a vigilante seeking to avenge the death of her best friend who was a rape victim."},
+
+    {year: 2021, 
+    category: "Best Picture", 
+    name: "The Father", 
+    director: "Florian Zeller", 
+    synopsis: "Based on the acclaimed, award-winning play, The Father starts out as a deceptively simple drama hinged on a deceptively familiar dynamic."},
+
+    {year: 2021, 
+    category: "Best Picture", 
+    name: "Judas and the Black Messiah", 
+    director: "Shaka King", 
+    synopsis: "FBI informant William O'Neal infiltrates the Illinois Black Panther Party and is tasked with keeping tabs on their charismatic leader, Chairman Fred Hampton."},
+
+    {year: 2021, 
+    category: "Best Picture", 
+    name: "The Trial of the Chicago 7", 
+    director: "Aaron Sorkin", 
+    synopsis: "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago."},
+
+    {year: 2021, 
+    category: "Best Picture",
+    winner: "Winner", 
+    name: "Nomadland", 
+    director: "Chloe Zhao", 
+    synopsis: "In 1969, seven people were charged by the federal government with conspiracy and more, arising from the protests at the 1968 Democratic National Convention in Chicago."}
+]
\ No newline at end of file
diff --git a/best_picture.txt b/src/best_picture.txt
similarity index 100%
rename from best_picture.txt
rename to src/best_picture.txt

commit dc160ff0ca92a9e255fc69a9132e268258ea2b08
Author: leberSmeaton <77179232+leberSmeaton@users.noreply.github.com>
Date:   Tue May 18 13:24:10 2021 +1000

    first init

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..e69de29
diff --git a/Screen Shot 2021-05-18 at 11.31.51 am.png b/Screen Shot 2021-05-18 at 11.31.51 am.png
new file mode 100644
index 0000000..3d53271
Binary files /dev/null and b/Screen Shot 2021-05-18 at 11.31.51 am.png differ
diff --git a/best_picture.txt b/best_picture.txt
new file mode 100644
index 0000000..573ff8d
--- /dev/null
+++ b/best_picture.txt
@@ -0,0 +1,8 @@
+Sound of Metal
+Mank
+Minari
+Promising Young Woman
+The Father
+Judas and the Black Messiah
+The Trial of the Chicago 7
+Nomadland
\ No newline at end of file
diff --git a/docs/Flowchart_T1A3.drawio b/docs/Flowchart_T1A3.drawio
new file mode 100644
index 0000000..6c08b9c
--- /dev/null
+++ b/docs/Flowchart_T1A3.drawio
@@ -0,0 +1 @@
+<mxfile host="app.diagrams.net" modified="2021-05-18T02:14:42.320Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36" etag="nSSrH5VI8ryaVhteHxBk" version="14.6.13" type="device" pages="2"><diagram id="EEbKFx0Qe1oUpt7cK2yP" name="app-flow">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</diagram><diagram id="Pa3GTjm2JhgWjG1fDgN7" name="data-flow">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</diagram></mxfile>
\ No newline at end of file
diff --git a/src/index.rb b/src/index.rb
new file mode 100644
index 0000000..e69de29
